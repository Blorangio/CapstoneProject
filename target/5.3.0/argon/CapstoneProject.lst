
/Users/admin/Documents/CTD_2023/Labs/CapstoneProject/target/5.3.0/argon/CapstoneProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000057bc  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b97dc  000b97dc  000097dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000084  2003e3f8  000b9800  0000e3f8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000378  2003e480  2003e480  0001e480  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000b9884  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b9888  000b9888  00019888  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b988e  000b988e  0001988e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b98b2  000b98b2  000198b2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0014de5f  00000000  00000000  000198b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00016445  00000000  00000000  00167715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000419fc  00000000  00000000  0017db5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003340  00000000  00000000  001bf556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000bbd0  00000000  00000000  001c2896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e413  00000000  00000000  001ce466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004b7fa  00000000  00000000  0020c879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001409cf  00000000  00000000  00258073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000094cc  00000000  00000000  00398a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2iz>:
   b48f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d215      	bcs.n	b492e <__aeabi_d2iz+0x36>
   b4902:	d511      	bpl.n	b4928 <__aeabi_d2iz+0x30>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d912      	bls.n	b4934 <__aeabi_d2iz+0x3c>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491e:	fa23 f002 	lsr.w	r0, r3, r2
   b4922:	bf18      	it	ne
   b4924:	4240      	negne	r0, r0
   b4926:	4770      	bx	lr
   b4928:	f04f 0000 	mov.w	r0, #0
   b492c:	4770      	bx	lr
   b492e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4932:	d105      	bne.n	b4940 <__aeabi_d2iz+0x48>
   b4934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4938:	bf08      	it	eq
   b493a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493e:	4770      	bx	lr
   b4940:	f04f 0000 	mov.w	r0, #0
   b4944:	4770      	bx	lr
   b4946:	bf00      	nop

000b4948 <__aeabi_d2uiz>:
   b4948:	004a      	lsls	r2, r1, #1
   b494a:	d211      	bcs.n	b4970 <__aeabi_d2uiz+0x28>
   b494c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4950:	d211      	bcs.n	b4976 <__aeabi_d2uiz+0x2e>
   b4952:	d50d      	bpl.n	b4970 <__aeabi_d2uiz+0x28>
   b4954:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4958:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b495c:	d40e      	bmi.n	b497c <__aeabi_d2uiz+0x34>
   b495e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4966:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b496a:	fa23 f002 	lsr.w	r0, r3, r2
   b496e:	4770      	bx	lr
   b4970:	f04f 0000 	mov.w	r0, #0
   b4974:	4770      	bx	lr
   b4976:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b497a:	d102      	bne.n	b4982 <__aeabi_d2uiz+0x3a>
   b497c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4980:	4770      	bx	lr
   b4982:	f04f 0000 	mov.w	r0, #0
   b4986:	4770      	bx	lr

000b4988 <strcmp>:
   b4988:	f810 2b01 	ldrb.w	r2, [r0], #1
   b498c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4990:	2a01      	cmp	r2, #1
   b4992:	bf28      	it	cs
   b4994:	429a      	cmpcs	r2, r3
   b4996:	d0f7      	beq.n	b4988 <strcmp>
   b4998:	1ad0      	subs	r0, r2, r3
   b499a:	4770      	bx	lr

000b499c <strlen>:
   b499c:	4603      	mov	r3, r0
   b499e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b49a2:	2a00      	cmp	r2, #0
   b49a4:	d1fb      	bne.n	b499e <strlen+0x2>
   b49a6:	1a18      	subs	r0, r3, r0
   b49a8:	3801      	subs	r0, #1
   b49aa:	4770      	bx	lr

000b49ac <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b49ac:	4809      	ldr	r0, [pc, #36]	; (b49d4 <module_user_pre_init+0x28>)
   b49ae:	490a      	ldr	r1, [pc, #40]	; (b49d8 <module_user_pre_init+0x2c>)
   b49b0:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b49b2:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b49b4:	d005      	beq.n	b49c2 <module_user_pre_init+0x16>
   b49b6:	4a09      	ldr	r2, [pc, #36]	; (b49dc <module_user_pre_init+0x30>)
   b49b8:	4282      	cmp	r2, r0
   b49ba:	d002      	beq.n	b49c2 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b49bc:	1a12      	subs	r2, r2, r0
   b49be:	f004 f869 	bl	b8a94 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b49c2:	4807      	ldr	r0, [pc, #28]	; (b49e0 <module_user_pre_init+0x34>)
   b49c4:	4a07      	ldr	r2, [pc, #28]	; (b49e4 <module_user_pre_init+0x38>)
   b49c6:	2100      	movs	r1, #0
   b49c8:	1a12      	subs	r2, r2, r0
   b49ca:	f004 f871 	bl	b8ab0 <memset>
    return &link_global_data_start;
}
   b49ce:	4801      	ldr	r0, [pc, #4]	; (b49d4 <module_user_pre_init+0x28>)
   b49d0:	bd08      	pop	{r3, pc}
   b49d2:	bf00      	nop
   b49d4:	2003e3f8 	.word	0x2003e3f8
   b49d8:	000b9800 	.word	0x000b9800
   b49dc:	2003e47c 	.word	0x2003e47c
   b49e0:	2003e480 	.word	0x2003e480
   b49e4:	2003e7f8 	.word	0x2003e7f8

000b49e8 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b49e8:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49ea:	4e07      	ldr	r6, [pc, #28]	; (b4a08 <module_user_init+0x20>)
   b49ec:	4c07      	ldr	r4, [pc, #28]	; (b4a0c <module_user_init+0x24>)
    module_user_init_hook();
   b49ee:	f003 fdc5 	bl	b857c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b49f2:	1ba4      	subs	r4, r4, r6
   b49f4:	08a4      	lsrs	r4, r4, #2
   b49f6:	2500      	movs	r5, #0
   b49f8:	42ac      	cmp	r4, r5
   b49fa:	d100      	bne.n	b49fe <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b49fc:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b49fe:	f856 3b04 	ldr.w	r3, [r6], #4
   b4a02:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a04:	3501      	adds	r5, #1
   b4a06:	e7f7      	b.n	b49f8 <module_user_init+0x10>
   b4a08:	000b97b8 	.word	0x000b97b8
   b4a0c:	000b97dc 	.word	0x000b97dc

000b4a10 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4a10:	f001 b9d2 	b.w	b5db8 <setup>

000b4a14 <module_user_loop>:
}

void module_user_loop() {
   b4a14:	b508      	push	{r3, lr}
    loop();
   b4a16:	f000 fcd7 	bl	b53c8 <loop>
    _post_loop();
}
   b4a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4a1e:	f003 bd65 	b.w	b84ec <_post_loop>

000b4a22 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4a22:	f002 bb7d 	b.w	b7120 <malloc>

000b4a26 <_Znaj>:
   b4a26:	f002 bb7b 	b.w	b7120 <malloc>

000b4a2a <_ZdaPv>:
   b4a2a:	f002 bb81 	b.w	b7130 <free>

000b4a2e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4a2e:	f002 bb7f 	b.w	b7130 <free>
	...

000b4a34 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4a34:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4a36:	4a03      	ldr	r2, [pc, #12]	; (b4a44 <__cxa_pure_virtual+0x10>)
   b4a38:	4903      	ldr	r1, [pc, #12]	; (b4a48 <__cxa_pure_virtual+0x14>)
   b4a3a:	200c      	movs	r0, #12
   b4a3c:	f002 fabc 	bl	b6fb8 <panic_>
  while (1);
   b4a40:	e7fe      	b.n	b4a40 <__cxa_pure_virtual+0xc>
   b4a42:	bf00      	nop
   b4a44:	000b6c69 	.word	0x000b6c69
   b4a48:	000b8d5c 	.word	0x000b8d5c

000b4a4c <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4a4c:	7800      	ldrb	r0, [r0, #0]
   b4a4e:	fab0 f080 	clz	r0, r0
   b4a52:	0940      	lsrs	r0, r0, #5
   b4a54:	4770      	bx	lr

000b4a56 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4a56:	2301      	movs	r3, #1
   b4a58:	7003      	strb	r3, [r0, #0]
   b4a5a:	4770      	bx	lr

000b4a5c <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4a5c:	4770      	bx	lr
	...

000b4a60 <_Z17readyToUpdateFuncv>:
  analogWrite(blueLedPin, 255 - blue);
}

void readyToUpdateFunc()
{
  readyToUpdate = true;
   b4a60:	4b01      	ldr	r3, [pc, #4]	; (b4a68 <_Z17readyToUpdateFuncv+0x8>)
   b4a62:	2201      	movs	r2, #1
   b4a64:	701a      	strb	r2, [r3, #0]
}
   b4a66:	4770      	bx	lr
   b4a68:	2003e3fd 	.word	0x2003e3fd

000b4a6c <_Z20previouslyShakedTruev>:

void previouslyShakedTrue()
{
  previouslyShakedBool = false;
   b4a6c:	4b01      	ldr	r3, [pc, #4]	; (b4a74 <_Z20previouslyShakedTruev+0x8>)
   b4a6e:	2200      	movs	r2, #0
   b4a70:	701a      	strb	r2, [r3, #0]
}
   b4a72:	4770      	bx	lr
   b4a74:	2003e618 	.word	0x2003e618

000b4a78 <_Z13publishToMQTTv>:
  timesShaked = 0;
}

void publishToMQTT()
{
  readyToPublish = true;
   b4a78:	4b01      	ldr	r3, [pc, #4]	; (b4a80 <_Z13publishToMQTTv+0x8>)
   b4a7a:	2201      	movs	r2, #1
   b4a7c:	701a      	strb	r2, [r3, #0]
}
   b4a7e:	4770      	bx	lr
   b4a80:	2003e638 	.word	0x2003e638

000b4a84 <_Z8callbackPcPhj>:

void callback(char *topic, byte *payload, unsigned int length)
{
   b4a84:	b598      	push	{r3, r4, r7, lr}
  char p[length + 1];
   b4a86:	f102 0308 	add.w	r3, r2, #8
   b4a8a:	f023 0307 	bic.w	r3, r3, #7
{
   b4a8e:	af00      	add	r7, sp, #0
  char p[length + 1];
   b4a90:	ebad 0d03 	sub.w	sp, sp, r3
{
   b4a94:	4614      	mov	r4, r2
  memcpy(p, payload, length);
   b4a96:	4668      	mov	r0, sp
   b4a98:	f003 fffc 	bl	b8a94 <memcpy>
  p[length] = NULL;
   b4a9c:	2300      	movs	r3, #0

  allowRun = atoi(p);
   b4a9e:	4668      	mov	r0, sp
  p[length] = NULL;
   b4aa0:	f80d 3004 	strb.w	r3, [sp, r4]
  allowRun = atoi(p);
   b4aa4:	f003 ffee 	bl	b8a84 <atoi>
   b4aa8:	4b03      	ldr	r3, [pc, #12]	; (b4ab8 <_Z8callbackPcPhj+0x34>)
   b4aaa:	3800      	subs	r0, #0
   b4aac:	bf18      	it	ne
   b4aae:	2001      	movne	r0, #1
   b4ab0:	7018      	strb	r0, [r3, #0]
   b4ab2:	46bd      	mov	sp, r7
   b4ab4:	bd98      	pop	{r3, r4, r7, pc}
   b4ab6:	bf00      	nop
   b4ab8:	2003e510 	.word	0x2003e510

000b4abc <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4abc:	b510      	push	{r4, lr}
  }
   b4abe:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4ac0:	4604      	mov	r4, r0
  }
   b4ac2:	f7ff ffb4 	bl	b4a2e <_ZdlPvj>
   b4ac6:	4620      	mov	r0, r4
   b4ac8:	bd10      	pop	{r4, pc}

000b4aca <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4aca:	6943      	ldr	r3, [r0, #20]
   b4acc:	b113      	cbz	r3, b4ad4 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4ace:	6983      	ldr	r3, [r0, #24]
   b4ad0:	300c      	adds	r0, #12
   b4ad2:	4718      	bx	r3
            callback();
        }
    }
   b4ad4:	4770      	bx	lr

000b4ad6 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4ad6:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4ad8:	2100      	movs	r1, #0
   b4ada:	4604      	mov	r4, r0
   b4adc:	4608      	mov	r0, r1
   b4ade:	f002 f86b 	bl	b6bb8 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b4ae2:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4ae4:	4620      	mov	r0, r4
   b4ae6:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4ae8:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4aea:	f002 f87d 	bl	b6be8 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4aee:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b4af0:	b10c      	cbz	r4, b4af6 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b4af2:	2301      	movs	r3, #1
   b4af4:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4af6:	2100      	movs	r1, #0
   b4af8:	2001      	movs	r0, #1
   b4afa:	f002 f85d 	bl	b6bb8 <os_thread_scheduling>
            }
        }
        if (t) {
   b4afe:	b12c      	cbz	r4, b4b0c <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b4b00:	6823      	ldr	r3, [r4, #0]
   b4b02:	4620      	mov	r0, r4
   b4b04:	689b      	ldr	r3, [r3, #8]
   b4b06:	4798      	blx	r3
            t->running = false;
   b4b08:	2300      	movs	r3, #0
   b4b0a:	7123      	strb	r3, [r4, #4]
        }
    }
   b4b0c:	b002      	add	sp, #8
   b4b0e:	bd10      	pop	{r4, pc}

000b4b10 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b4b10:	2a01      	cmp	r2, #1
   b4b12:	d102      	bne.n	b4b1a <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4b14:	6001      	str	r1, [r0, #0]
      }
   b4b16:	2000      	movs	r0, #0
   b4b18:	4770      	bx	lr
	  switch (__op)
   b4b1a:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4b1c:	bf04      	itt	eq
   b4b1e:	680b      	ldreq	r3, [r1, #0]
   b4b20:	6003      	streq	r3, [r0, #0]
	      break;
   b4b22:	e7f8      	b.n	b4b16 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4b24 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4b24:	6803      	ldr	r3, [r0, #0]
   b4b26:	4718      	bx	r3

000b4b28 <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4b2a:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4b2c:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4b2e:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4b30:	b130      	cbz	r0, b4b40 <_ZN5Timer5startEj.isra.0+0x18>
   b4b32:	2300      	movs	r3, #0
   b4b34:	e9cd 3300 	strd	r3, r3, [sp]
   b4b38:	461a      	mov	r2, r3
   b4b3a:	2102      	movs	r1, #2
   b4b3c:	f002 f85c 	bl	b6bf8 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b4b40:	68a0      	ldr	r0, [r4, #8]
   b4b42:	b130      	cbz	r0, b4b52 <_ZN5Timer5startEj.isra.0+0x2a>
   b4b44:	2300      	movs	r3, #0
   b4b46:	e9cd 5300 	strd	r5, r3, [sp]
   b4b4a:	461a      	mov	r2, r3
   b4b4c:	4619      	mov	r1, r3
   b4b4e:	f002 f853 	bl	b6bf8 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4b52:	b003      	add	sp, #12
   b4b54:	bd30      	pop	{r4, r5, pc}
	...

000b4b58 <_ZN10CloudClass7processEv.isra.0>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
   b4b58:	b508      	push	{r3, lr}
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4b5a:	f002 f88d 	bl	b6c78 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4b5e:	4b03      	ldr	r3, [pc, #12]	; (b4b6c <_ZN10CloudClass7processEv.isra.0+0x14>)
   b4b60:	6018      	str	r0, [r3, #0]
            application_checkin();
            return spark_process();
    }
   b4b62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return spark_process();
   b4b66:	f002 ba63 	b.w	b7030 <spark_process>
   b4b6a:	bf00      	nop
   b4b6c:	2003e730 	.word	0x2003e730

000b4b70 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4b70:	b40e      	push	{r1, r2, r3}
   b4b72:	b503      	push	{r0, r1, lr}
   b4b74:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4b76:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4b78:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4b7c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4b7e:	f002 fe2e 	bl	b77de <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4b82:	b002      	add	sp, #8
   b4b84:	f85d eb04 	ldr.w	lr, [sp], #4
   b4b88:	b003      	add	sp, #12
   b4b8a:	4770      	bx	lr

000b4b8c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4b8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4b8e:	4604      	mov	r4, r0
   b4b90:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4b92:	7922      	ldrb	r2, [r4, #4]
   b4b94:	68a3      	ldr	r3, [r4, #8]
   b4b96:	b132      	cbz	r2, b4ba6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4b98:	b9a3      	cbnz	r3, b4bc4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4b9a:	490b      	ldr	r1, [pc, #44]	; (b4bc8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4b9c:	b002      	add	sp, #8
   b4b9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4ba2:	f002 bd0d 	b.w	b75c0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4ba6:	4a09      	ldr	r2, [pc, #36]	; (b4bcc <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4ba8:	7b26      	ldrb	r6, [r4, #12]
   b4baa:	4d09      	ldr	r5, [pc, #36]	; (b4bd0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4bac:	4909      	ldr	r1, [pc, #36]	; (b4bd4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4bae:	7b64      	ldrb	r4, [r4, #13]
   b4bb0:	2e01      	cmp	r6, #1
   b4bb2:	bf18      	it	ne
   b4bb4:	4629      	movne	r1, r5
   b4bb6:	e9cd 1400 	strd	r1, r4, [sp]
   b4bba:	4907      	ldr	r1, [pc, #28]	; (b4bd8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4bbc:	f7ff ffd8 	bl	b4b70 <_ZN5Print6printfEPKcz>
  }
   b4bc0:	b002      	add	sp, #8
   b4bc2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4bc4:	4a05      	ldr	r2, [pc, #20]	; (b4bdc <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4bc6:	e7ef      	b.n	b4ba8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4bc8:	000b8d82 	.word	0x000b8d82
   b4bcc:	000b8d79 	.word	0x000b8d79
   b4bd0:	000b8d7e 	.word	0x000b8d7e
   b4bd4:	000b8d7a 	.word	0x000b8d7a
   b4bd8:	000b8d98 	.word	0x000b8d98
   b4bdc:	000b8d71 	.word	0x000b8d71

000b4be0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4be0:	b510      	push	{r4, lr}
      if (_M_manager)
   b4be2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4be4:	4604      	mov	r4, r0
      if (_M_manager)
   b4be6:	b113      	cbz	r3, b4bee <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4be8:	2203      	movs	r2, #3
   b4bea:	4601      	mov	r1, r0
   b4bec:	4798      	blx	r3
    }
   b4bee:	4620      	mov	r0, r4
   b4bf0:	bd10      	pop	{r4, pc}
	...

000b4bf4 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b4bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4bf6:	4b13      	ldr	r3, [pc, #76]	; (b4c44 <_ZN5TimerD1Ev+0x50>)
   b4bf8:	6003      	str	r3, [r0, #0]
   b4bfa:	4604      	mov	r4, r0
        if (handle) {
   b4bfc:	6880      	ldr	r0, [r0, #8]
   b4bfe:	b1c8      	cbz	r0, b4c34 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4c00:	2500      	movs	r5, #0
   b4c02:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b4c06:	e9cd 3500 	strd	r3, r5, [sp]
   b4c0a:	2102      	movs	r1, #2
   b4c0c:	462b      	mov	r3, r5
   b4c0e:	462a      	mov	r2, r5
   b4c10:	f001 fff2 	bl	b6bf8 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b4c14:	68a0      	ldr	r0, [r4, #8]
   b4c16:	4629      	mov	r1, r5
   b4c18:	f002 f816 	bl	b6c48 <os_timer_set_id>
            while (running) {
   b4c1c:	7923      	ldrb	r3, [r4, #4]
   b4c1e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b4c22:	b113      	cbz	r3, b4c2a <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b4c24:	f001 ffc0 	bl	b6ba8 <os_thread_yield>
            while (running) {
   b4c28:	e7f8      	b.n	b4c1c <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b4c2a:	68a0      	ldr	r0, [r4, #8]
   b4c2c:	4629      	mov	r1, r5
   b4c2e:	f001 ffd3 	bl	b6bd8 <os_timer_destroy>
            handle = nullptr;
   b4c32:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b4c34:	f104 000c 	add.w	r0, r4, #12
   b4c38:	f7ff ffd2 	bl	b4be0 <_ZNSt14_Function_baseD1Ev>
    }
   b4c3c:	4620      	mov	r0, r4
   b4c3e:	b003      	add	sp, #12
   b4c40:	bd30      	pop	{r4, r5, pc}
   b4c42:	bf00      	nop
   b4c44:	000b8e74 	.word	0x000b8e74

000b4c48 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4c48:	b510      	push	{r4, lr}
   b4c4a:	4604      	mov	r4, r0
    }
   b4c4c:	f7ff ffd2 	bl	b4bf4 <_ZN5TimerD1Ev>
   b4c50:	4620      	mov	r0, r4
   b4c52:	211c      	movs	r1, #28
   b4c54:	f7ff feeb 	bl	b4a2e <_ZdlPvj>
   b4c58:	4620      	mov	r0, r4
   b4c5a:	bd10      	pop	{r4, pc}

000b4c5c <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b4c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4c5e:	468c      	mov	ip, r1
   b4c60:	2500      	movs	r5, #0
   b4c62:	4914      	ldr	r1, [pc, #80]	; (b4cb4 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b4c64:	7105      	strb	r5, [r0, #4]
   b4c66:	4604      	mov	r4, r0
   b4c68:	6085      	str	r5, [r0, #8]
   b4c6a:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4c6c:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4c70:	b085      	sub	sp, #20
   b4c72:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4c74:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4c78:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4c7c:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4c80:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4c84:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4c88:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4c8c:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b4c8e:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b4c90:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4c92:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4c94:	6095      	str	r5, [r2, #8]
   b4c96:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4c98:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b4c9a:	e9cd 3500 	strd	r3, r5, [sp]
   b4c9e:	4a06      	ldr	r2, [pc, #24]	; (b4cb8 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b4ca0:	4623      	mov	r3, r4
   b4ca2:	4661      	mov	r1, ip
   b4ca4:	f104 0008 	add.w	r0, r4, #8
   b4ca8:	f001 ff8e 	bl	b6bc8 <os_timer_create>
    }
   b4cac:	4620      	mov	r0, r4
   b4cae:	b005      	add	sp, #20
   b4cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4cb2:	bf00      	nop
   b4cb4:	000b8e74 	.word	0x000b8e74
   b4cb8:	000b4ad7 	.word	0x000b4ad7

000b4cbc <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4cbc:	6803      	ldr	r3, [r0, #0]
   b4cbe:	b12b      	cbz	r3, b4ccc <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b4cc0:	6842      	ldr	r2, [r0, #4]
   b4cc2:	4293      	cmp	r3, r2
   b4cc4:	d202      	bcs.n	b4ccc <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b4cc6:	4618      	mov	r0, r3
   b4cc8:	f003 bedc 	b.w	b8a84 <atoi>
   b4ccc:	2000      	movs	r0, #0
   b4cce:	4770      	bx	lr

000b4cd0 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b4cd0:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4cd2:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b4cd4:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4cd6:	b145      	cbz	r5, b4cea <_ZN10BlynkParam8iteratorppEv+0x1a>
   b4cd8:	6843      	ldr	r3, [r0, #4]
   b4cda:	429d      	cmp	r5, r3
   b4cdc:	d205      	bcs.n	b4cea <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b4cde:	4628      	mov	r0, r5
   b4ce0:	f7ff fe5c 	bl	b499c <strlen>
   b4ce4:	3001      	adds	r0, #1
   b4ce6:	4405      	add	r5, r0
   b4ce8:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b4cea:	4620      	mov	r0, r4
   b4cec:	bd38      	pop	{r3, r4, r5, pc}

000b4cee <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b4cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4cf0:	4604      	mov	r4, r0
   b4cf2:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b4cf4:	460d      	mov	r5, r1
   b4cf6:	b921      	cbnz	r1, b4d02 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b4cf8:	6803      	ldr	r3, [r0, #0]
   b4cfa:	1c7a      	adds	r2, r7, #1
   b4cfc:	6042      	str	r2, [r0, #4]
   b4cfe:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add(str, strlen(str)+1);
}
   b4d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add(str, strlen(str)+1);
   b4d02:	4608      	mov	r0, r1
   b4d04:	f7ff fe4a 	bl	b499c <strlen>
    if (len + l > buff_size)
   b4d08:	68a3      	ldr	r3, [r4, #8]
    add(str, strlen(str)+1);
   b4d0a:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b4d0c:	19f2      	adds	r2, r6, r7
   b4d0e:	429a      	cmp	r2, r3
   b4d10:	d8f6      	bhi.n	b4d00 <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b4d12:	6820      	ldr	r0, [r4, #0]
   b4d14:	4632      	mov	r2, r6
   b4d16:	4629      	mov	r1, r5
   b4d18:	4438      	add	r0, r7
   b4d1a:	f003 febb 	bl	b8a94 <memcpy>
    len += l;
   b4d1e:	6860      	ldr	r0, [r4, #4]
   b4d20:	4430      	add	r0, r6
   b4d22:	6060      	str	r0, [r4, #4]
   b4d24:	e7ec      	b.n	b4d00 <_ZN10BlynkParam3addEPKc+0x12>
	...

000b4d28 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b4d28:	b538      	push	{r3, r4, r5, lr}
   b4d2a:	4604      	mov	r4, r0
   b4d2c:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b4d2e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4d32:	6825      	ldr	r5, [r4, #0]
   b4d34:	4a04      	ldr	r2, [pc, #16]	; (b4d48 <_ZN10BlynkParam3addEi+0x20>)
   b4d36:	1a09      	subs	r1, r1, r0
   b4d38:	4428      	add	r0, r5
   b4d3a:	f002 fa09 	bl	b7150 <snprintf>
   b4d3e:	6863      	ldr	r3, [r4, #4]
   b4d40:	3001      	adds	r0, #1
   b4d42:	4403      	add	r3, r0
   b4d44:	6063      	str	r3, [r4, #4]
    }
   b4d46:	bd38      	pop	{r3, r4, r5, pc}
   b4d48:	000b8db5 	.word	0x000b8db5

000b4d4c <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b4d4c:	b538      	push	{r3, r4, r5, lr}
   b4d4e:	4604      	mov	r4, r0
   b4d50:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b4d52:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4d56:	6825      	ldr	r5, [r4, #0]
   b4d58:	4a04      	ldr	r2, [pc, #16]	; (b4d6c <_ZN10BlynkParam3addEl+0x20>)
   b4d5a:	1a09      	subs	r1, r1, r0
   b4d5c:	4428      	add	r0, r5
   b4d5e:	f002 f9f7 	bl	b7150 <snprintf>
   b4d62:	6863      	ldr	r3, [r4, #4]
   b4d64:	3001      	adds	r0, #1
   b4d66:	4403      	add	r3, r0
   b4d68:	6063      	str	r3, [r4, #4]
    }
   b4d6a:	bd38      	pop	{r3, r4, r5, pc}
   b4d6c:	000b8db8 	.word	0x000b8db8

000b4d70 <_Z8setColoriii>:
{
   b4d70:	b538      	push	{r3, r4, r5, lr}
   b4d72:	460d      	mov	r5, r1
  analogWrite(redLedPin, 255 - red);
   b4d74:	f1c0 01ff 	rsb	r1, r0, #255	; 0xff
   b4d78:	2003      	movs	r0, #3
{
   b4d7a:	4614      	mov	r4, r2
  analogWrite(redLedPin, 255 - red);
   b4d7c:	f003 fcc2 	bl	b8704 <_Z11analogWritetm>
  analogWrite(greenLedPin, 255 - green);
   b4d80:	f1c5 01ff 	rsb	r1, r5, #255	; 0xff
   b4d84:	2004      	movs	r0, #4
   b4d86:	f003 fcbd 	bl	b8704 <_Z11analogWritetm>
  analogWrite(blueLedPin, 255 - blue);
   b4d8a:	f1c4 01ff 	rsb	r1, r4, #255	; 0xff
   b4d8e:	2005      	movs	r0, #5
}
   b4d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  analogWrite(blueLedPin, 255 - blue);
   b4d94:	f003 bcb6 	b.w	b8704 <_Z11analogWritetm>

000b4d98 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   b4d98:	b508      	push	{r3, lr}
        state = CONNECTING;
   b4d9a:	2300      	movs	r3, #0
   b4d9c:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   b4d9e:	6800      	ldr	r0, [r0, #0]
   b4da0:	f003 f9ba 	bl	b8118 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b4da4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b4da8:	f001 bee8 	b.w	b6b7c <BlynkNoOpCbk>

000b4dac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b4db0:	eb01 0902 	add.w	r9, r1, r2
   b4db4:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b4db6:	4549      	cmp	r1, r9
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b4db8:	e9cd 1905 	strd	r1, r9, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4dbc:	4680      	mov	r8, r0
   b4dbe:	460d      	mov	r5, r1
   b4dc0:	4616      	mov	r6, r2
    if (it >= param.end())
   b4dc2:	f080 8092 	bcs.w	b4eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b4dc6:	a805      	add	r0, sp, #20
   b4dc8:	880f      	ldrh	r7, [r1, #0]
   b4dca:	f7ff ff81 	bl	b4cd0 <_ZN10BlynkParam8iteratorppEv>
   b4dce:	6803      	ldr	r3, [r0, #0]
   b4dd0:	454b      	cmp	r3, r9
   b4dd2:	f080 808a 	bcs.w	b4eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4dd6:	a805      	add	r0, sp, #20
   b4dd8:	f7ff ff70 	bl	b4cbc <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   b4ddc:	f247 2376 	movw	r3, #29302	; 0x7276
   b4de0:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4de2:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
   b4de4:	f000 80a9 	beq.w	b4f3a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
   b4de8:	d827      	bhi.n	b4e3a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   b4dea:	f247 2361 	movw	r3, #29281	; 0x7261
   b4dee:	429f      	cmp	r7, r3
   b4df0:	d07e      	beq.n	b4ef0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
   b4df2:	f247 2364 	movw	r3, #29284	; 0x7264
   b4df6:	429f      	cmp	r7, r3
   b4df8:	d042      	beq.n	b4e80 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
   b4dfa:	f646 5370 	movw	r3, #28016	; 0x6d70
   b4dfe:	429f      	cmp	r7, r3
   b4e00:	d128      	bne.n	b4e54 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b4e02:	4e63      	ldr	r6, [pc, #396]	; (b4f90 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4e04:	4f63      	ldr	r7, [pc, #396]	; (b4f94 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
   b4e06:	f8df 81a0 	ldr.w	r8, [pc, #416]	; b4fa8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
   b4e0a:	9b05      	ldr	r3, [sp, #20]
   b4e0c:	4599      	cmp	r9, r3
   b4e0e:	d96c      	bls.n	b4eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4e10:	a805      	add	r0, sp, #20
   b4e12:	f7ff ff53 	bl	b4cbc <_ZNK10BlynkParam8iterator5asIntEv>
   b4e16:	b2c4      	uxtb	r4, r0
            ++it;
   b4e18:	a805      	add	r0, sp, #20
   b4e1a:	f7ff ff59 	bl	b4cd0 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4e1e:	9d05      	ldr	r5, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b4e20:	4631      	mov	r1, r6
   b4e22:	4628      	mov	r0, r5
   b4e24:	f7ff fdb0 	bl	b4988 <strcmp>
   b4e28:	4601      	mov	r1, r0
   b4e2a:	b9e0      	cbnz	r0, b4e66 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
   b4e2c:	4620      	mov	r0, r4
   b4e2e:	f003 fc15 	bl	b865c <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b4e32:	a805      	add	r0, sp, #20
   b4e34:	f7ff ff4c 	bl	b4cd0 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b4e38:	e7e7      	b.n	b4e0a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
   b4e3a:	f247 7364 	movw	r3, #30564	; 0x7764
   b4e3e:	429f      	cmp	r7, r3
   b4e40:	d03f      	beq.n	b4ec2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   b4e42:	f247 7376 	movw	r3, #30582	; 0x7776
   b4e46:	429f      	cmp	r7, r3
   b4e48:	f000 8087 	beq.w	b4f5a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
   b4e4c:	f247 7361 	movw	r3, #30561	; 0x7761
   b4e50:	429f      	cmp	r7, r3
   b4e52:	d05f      	beq.n	b4f14 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b4e54:	2300      	movs	r3, #0
   b4e56:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4e5a:	2202      	movs	r2, #2
   b4e5c:	9200      	str	r2, [sp, #0]
   b4e5e:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   b4e62:	4619      	mov	r1, r3
   b4e64:	e029      	b.n	b4eba <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4e66:	4639      	mov	r1, r7
   b4e68:	4628      	mov	r0, r5
   b4e6a:	f7ff fd8d 	bl	b4988 <strcmp>
   b4e6e:	b128      	cbz	r0, b4e7c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
   b4e70:	4641      	mov	r1, r8
   b4e72:	4628      	mov	r0, r5
   b4e74:	f7ff fd88 	bl	b4988 <strcmp>
   b4e78:	2800      	cmp	r0, #0
   b4e7a:	d1da      	bne.n	b4e32 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
   b4e7c:	2101      	movs	r1, #1
   b4e7e:	e7d5      	b.n	b4e2c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4e80:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b4e82:	4945      	ldr	r1, [pc, #276]	; (b4f98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
   b4e84:	9307      	str	r3, [sp, #28]
   b4e86:	a807      	add	r0, sp, #28
   b4e88:	2310      	movs	r3, #16
   b4e8a:	2500      	movs	r5, #0
   b4e8c:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b4e90:	f7ff ff2d 	bl	b4cee <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4e94:	a807      	add	r0, sp, #28
   b4e96:	4621      	mov	r1, r4
   b4e98:	f7ff ff46 	bl	b4d28 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b4e9c:	4620      	mov	r0, r4
   b4e9e:	f003 fc07 	bl	b86b0 <digitalRead>
        rsp.add(analogRead(pin));
   b4ea2:	4601      	mov	r1, r0
   b4ea4:	a807      	add	r0, sp, #28
   b4ea6:	f7ff ff51 	bl	b4d4c <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b4eaa:	9b08      	ldr	r3, [sp, #32]
   b4eac:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4eb0:	3b01      	subs	r3, #1
   b4eb2:	9300      	str	r3, [sp, #0]
   b4eb4:	9b07      	ldr	r3, [sp, #28]
   b4eb6:	462a      	mov	r2, r5
   b4eb8:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b4eba:	4640      	mov	r0, r8
   b4ebc:	f000 fe1a 	bl	b5af4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b4ec0:	e013      	b.n	b4eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
   b4ec2:	a805      	add	r0, sp, #20
   b4ec4:	f7ff ff04 	bl	b4cd0 <_ZN10BlynkParam8iteratorppEv>
   b4ec8:	6803      	ldr	r3, [r0, #0]
   b4eca:	4599      	cmp	r9, r3
   b4ecc:	d90d      	bls.n	b4eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   b4ece:	b2a4      	uxth	r4, r4
   b4ed0:	2101      	movs	r1, #1
   b4ed2:	4620      	mov	r0, r4
   b4ed4:	f003 fbc2 	bl	b865c <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b4ed8:	a805      	add	r0, sp, #20
   b4eda:	f7ff feef 	bl	b4cbc <_ZNK10BlynkParam8iterator5asIntEv>
   b4ede:	1e01      	subs	r1, r0, #0
   b4ee0:	bf18      	it	ne
   b4ee2:	2101      	movne	r1, #1
   b4ee4:	4620      	mov	r0, r4
   b4ee6:	f003 fbca 	bl	b867e <digitalWrite>
    }
}
   b4eea:	b00f      	add	sp, #60	; 0x3c
   b4eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4ef0:	ab0a      	add	r3, sp, #40	; 0x28
   b4ef2:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b4ef4:	a807      	add	r0, sp, #28
   b4ef6:	2310      	movs	r3, #16
   b4ef8:	4928      	ldr	r1, [pc, #160]	; (b4f9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
   b4efa:	2500      	movs	r5, #0
   b4efc:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b4f00:	f7ff fef5 	bl	b4cee <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4f04:	a807      	add	r0, sp, #28
   b4f06:	4621      	mov	r1, r4
   b4f08:	f7ff ff0e 	bl	b4d28 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b4f0c:	4620      	mov	r0, r4
   b4f0e:	f003 fbe2 	bl	b86d6 <analogRead>
   b4f12:	e7c6      	b.n	b4ea2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
   b4f14:	a805      	add	r0, sp, #20
   b4f16:	f7ff fedb 	bl	b4cd0 <_ZN10BlynkParam8iteratorppEv>
   b4f1a:	6803      	ldr	r3, [r0, #0]
   b4f1c:	4599      	cmp	r9, r3
   b4f1e:	d9e4      	bls.n	b4eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   b4f20:	b2a4      	uxth	r4, r4
   b4f22:	2101      	movs	r1, #1
   b4f24:	4620      	mov	r0, r4
   b4f26:	f003 fb99 	bl	b865c <pinMode>
        analogWrite(pin, it.asInt());
   b4f2a:	a805      	add	r0, sp, #20
   b4f2c:	f7ff fec6 	bl	b4cbc <_ZNK10BlynkParam8iterator5asIntEv>
   b4f30:	4601      	mov	r1, r0
   b4f32:	4620      	mov	r0, r4
   b4f34:	f003 fbe6 	bl	b8704 <_Z11analogWritetm>
    } break;
   b4f38:	e7d7      	b.n	b4eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   b4f3a:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   b4f3c:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   b4f40:	f001 fe1e 	bl	b6b80 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b4f44:	4603      	mov	r3, r0
            handler(req);
   b4f46:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b4f48:	b123      	cbz	r3, b4f54 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
   b4f4a:	4a15      	ldr	r2, [pc, #84]	; (b4fa0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
   b4f4c:	4293      	cmp	r3, r2
   b4f4e:	d001      	beq.n	b4f54 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
   b4f50:	4798      	blx	r3
   b4f52:	e7ca      	b.n	b4eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        } else {
            BlynkWidgetReadDefault(req);
   b4f54:	f001 fe10 	bl	b6b78 <BlynkWidgetRead>
        }
    }
   b4f58:	e7c7      	b.n	b4eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
   b4f5a:	a805      	add	r0, sp, #20
   b4f5c:	f7ff feb8 	bl	b4cd0 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4f60:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   b4f62:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b4f66:	1b5d      	subs	r5, r3, r5
   b4f68:	1b75      	subs	r5, r6, r5
        WidgetWriteHandler handler = GetWriteHandler(pin);
   b4f6a:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b4f6c:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   b4f70:	950c      	str	r5, [sp, #48]	; 0x30
   b4f72:	f001 fe0f 	bl	b6b94 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b4f76:	4603      	mov	r3, r0
            handler(req, param);
   b4f78:	a90a      	add	r1, sp, #40	; 0x28
   b4f7a:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b4f7c:	b123      	cbz	r3, b4f88 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   b4f7e:	4a09      	ldr	r2, [pc, #36]	; (b4fa4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   b4f80:	4293      	cmp	r3, r2
   b4f82:	d001      	beq.n	b4f88 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param);
   b4f84:	4798      	blx	r3
   b4f86:	e7b0      	b.n	b4eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
   b4f88:	f001 fdf7 	bl	b6b7a <BlynkWidgetWrite>
    } break;
   b4f8c:	e7ad      	b.n	b4eea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
   b4f8e:	bf00      	nop
   b4f90:	000b8dbc 	.word	0x000b8dbc
   b4f94:	000b8dbf 	.word	0x000b8dbf
   b4f98:	000b8dc7 	.word	0x000b8dc7
   b4f9c:	000b8dca 	.word	0x000b8dca
   b4fa0:	000b6b79 	.word	0x000b6b79
   b4fa4:	000b6b7b 	.word	0x000b6b7b
   b4fa8:	000b8dc3 	.word	0x000b8dc3

000b4fac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b4fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4fb0:	b08c      	sub	sp, #48	; 0x30
   b4fb2:	af04      	add	r7, sp, #16
   b4fb4:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b4fb6:	2205      	movs	r2, #5
   b4fb8:	6800      	ldr	r0, [r0, #0]
   b4fba:	1d39      	adds	r1, r7, #4
   b4fbc:	f002 fd0d 	bl	b79da <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b4fc0:	b3a8      	cbz	r0, b502e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b4fc2:	2805      	cmp	r0, #5
   b4fc4:	d004      	beq.n	b4fd0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b4fc6:	2000      	movs	r0, #0
}
   b4fc8:	3720      	adds	r7, #32
   b4fca:	46bd      	mov	sp, r7
   b4fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b4fd0:	f8b7 0005 	ldrh.w	r0, [r7, #5]
   b4fd4:	f001 fee8 	bl	b6da8 <inet_ntohs>
   b4fd8:	f8a7 0005 	strh.w	r0, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b4fdc:	f8b7 0007 	ldrh.w	r0, [r7, #7]
   b4fe0:	f001 fee2 	bl	b6da8 <inet_ntohs>
    if (ret < 0 || hdr.msg_id == 0) {
   b4fe4:	f8b7 3005 	ldrh.w	r3, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b4fe8:	f8a7 0007 	strh.w	r0, [r7, #7]
   b4fec:	4680      	mov	r8, r0
    if (ret < 0 || hdr.msg_id == 0) {
   b4fee:	2b00      	cmp	r3, #0
   b4ff0:	d0e9      	beq.n	b4fc6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b4ff2:	793b      	ldrb	r3, [r7, #4]
   b4ff4:	bb23      	cbnz	r3, b5040 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x94>
        lastActivityIn = BlynkMillis();
   b4ff6:	f001 fdbd 	bl	b6b74 <_Z11BlynkMillisv>
   b4ffa:	4602      	mov	r2, r0
   b4ffc:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b4ffe:	7f60      	ldrb	r0, [r4, #29]
   b5000:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b5004:	b9c0      	cbnz	r0, b5038 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8c>
   b5006:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b500a:	2901      	cmp	r1, #1
   b500c:	d114      	bne.n	b5038 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8c>
            switch (hdr.length) {
   b500e:	2b09      	cmp	r3, #9
   b5010:	d00f      	beq.n	b5032 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
   b5012:	2bc8      	cmp	r3, #200	; 0xc8
   b5014:	d001      	beq.n	b501a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6e>
   b5016:	2b04      	cmp	r3, #4
   b5018:	d1d6      	bne.n	b4fc8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b501a:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b501c:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   b501e:	4620      	mov	r0, r4
                state = CONNECTED;
   b5020:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   b5022:	f000 fe17 	bl	b5c54 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b5026:	f7ff fd97 	bl	b4b58 <_ZN10CloudClass7processEv.isra.0>
                BlynkOnConnected();
   b502a:	f001 fda7 	bl	b6b7c <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   b502e:	2001      	movs	r0, #1
   b5030:	e7ca      	b.n	b4fc8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b5032:	2303      	movs	r3, #3
   b5034:	7763      	strb	r3, [r4, #29]
                break;
   b5036:	e7c7      	b.n	b4fc8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b5038:	1f58      	subs	r0, r3, #5
   b503a:	bf18      	it	ne
   b503c:	2001      	movne	r0, #1
   b503e:	e7c3      	b.n	b4fc8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b5040:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b5044:	d903      	bls.n	b504e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa2>
        internalReconnect();
   b5046:	4620      	mov	r0, r4
   b5048:	f7ff fea6 	bl	b4d98 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b504c:	e7ef      	b.n	b502e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b504e:	f100 0308 	add.w	r3, r0, #8
   b5052:	f023 0307 	bic.w	r3, r3, #7
   b5056:	466e      	mov	r6, sp
   b5058:	ebad 0d03 	sub.w	sp, sp, r3
   b505c:	ad04      	add	r5, sp, #16
   b505e:	4602      	mov	r2, r0
   b5060:	4629      	mov	r1, r5
   b5062:	6820      	ldr	r0, [r4, #0]
   b5064:	f002 fcb9 	bl	b79da <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b5068:	4580      	cmp	r8, r0
   b506a:	f04f 0000 	mov.w	r0, #0
   b506e:	d17f      	bne.n	b5170 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
    inputBuffer[hdr.length] = '\0';
   b5070:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b5074:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b5076:	f001 fd7d 	bl	b6b74 <_Z11BlynkMillisv>
    switch (hdr.type)
   b507a:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b507c:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   b507e:	2b14      	cmp	r3, #20
   b5080:	f000 80a6 	beq.w	b51d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   b5084:	d848      	bhi.n	b5118 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x16c>
   b5086:	2b0f      	cmp	r3, #15
   b5088:	f000 80a2 	beq.w	b51d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   b508c:	d807      	bhi.n	b509e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf2>
   b508e:	2b02      	cmp	r3, #2
   b5090:	d048      	beq.n	b5124 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x178>
   b5092:	2b06      	cmp	r3, #6
   b5094:	d051      	beq.n	b513a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        internalReconnect();
   b5096:	4620      	mov	r0, r4
   b5098:	f7ff fe7e 	bl	b4d98 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b509c:	e058      	b.n	b5150 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
    switch (hdr.type)
   b509e:	2b11      	cmp	r3, #17
   b50a0:	d1f9      	bne.n	b5096 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
        BlynkReq req = { 0 };
   b50a2:	2300      	movs	r3, #0
   b50a4:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b50a6:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b50aa:	442b      	add	r3, r5
        if (it >= param.end())
   b50ac:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b50ae:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b50b2:	d24d      	bcs.n	b5150 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
        ++it;
   b50b4:	f107 000c 	add.w	r0, r7, #12
   b50b8:	f8d5 8000 	ldr.w	r8, [r5]
   b50bc:	f7ff fe08 	bl	b4cd0 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b50c0:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b50c2:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b50c6:	1b5d      	subs	r5, r3, r5
   b50c8:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b50ca:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b50ce:	687b      	ldr	r3, [r7, #4]
   b50d0:	61fd      	str	r5, [r7, #28]
   b50d2:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b50d6:	8363      	strh	r3, [r4, #26]
   b50d8:	4b64      	ldr	r3, [pc, #400]	; (b526c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c0>)
   b50da:	4598      	cmp	r8, r3
   b50dc:	f000 80bf 	beq.w	b525e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b2>
   b50e0:	f200 808c 	bhi.w	b51fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x250>
   b50e4:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b50e8:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b50ec:	4413      	add	r3, r2
   b50ee:	4598      	cmp	r8, r3
   b50f0:	f000 809d 	beq.w	b522e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x282>
   b50f4:	d879      	bhi.n	b51ea <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23e>
   b50f6:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b50fa:	3b06      	subs	r3, #6
   b50fc:	4598      	cmp	r8, r3
   b50fe:	f000 809c 	beq.w	b523a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x28e>
   b5102:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b5106:	3303      	adds	r3, #3
   b5108:	4598      	cmp	r8, r3
   b510a:	d16b      	bne.n	b51e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b510c:	f107 0114 	add.w	r1, r7, #20
   b5110:	4638      	mov	r0, r7
   b5112:	f001 fd32 	bl	b6b7a <BlynkWidgetWrite>
   b5116:	e065      	b.n	b51e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
    switch (hdr.type)
   b5118:	2b29      	cmp	r3, #41	; 0x29
   b511a:	d01b      	beq.n	b5154 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   b511c:	2b37      	cmp	r3, #55	; 0x37
   b511e:	d017      	beq.n	b5150 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b5120:	2b1d      	cmp	r3, #29
   b5122:	d1b8      	bne.n	b5096 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
        if (state == CONNECTING) {
   b5124:	7f63      	ldrb	r3, [r4, #29]
   b5126:	b943      	cbnz	r3, b513a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
            state = CONNECTED;
   b5128:	2301      	movs	r3, #1
   b512a:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   b512c:	4620      	mov	r0, r4
   b512e:	f000 fd91 	bl	b5c54 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b5132:	f7ff fd11 	bl	b4b58 <_ZN10CloudClass7processEv.isra.0>
            BlynkOnConnected();
   b5136:	f001 fd21 	bl	b6b7c <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b513a:	2300      	movs	r3, #0
   b513c:	21c8      	movs	r1, #200	; 0xc8
   b513e:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b5142:	9100      	str	r1, [sp, #0]
   b5144:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b5148:	4619      	mov	r1, r3
   b514a:	4620      	mov	r0, r4
   b514c:	f000 fcd2 	bl	b5af4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b5150:	2001      	movs	r0, #1
   b5152:	e00d      	b.n	b5170 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
        if (!redir_serv) {
   b5154:	68a3      	ldr	r3, [r4, #8]
   b5156:	b91b      	cbnz	r3, b5160 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b4>
             redir_serv = (char*)malloc(64);
   b5158:	2040      	movs	r0, #64	; 0x40
   b515a:	f001 ffe1 	bl	b7120 <malloc>
   b515e:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   b5160:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b5164:	44a8      	add	r8, r5
        if (it >= param.end())
   b5166:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b5168:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b516c:	d302      	bcc.n	b5174 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
            return false;
   b516e:	2000      	movs	r0, #0
   b5170:	46b5      	mov	sp, r6
   b5172:	e729      	b.n	b4fc8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b5174:	4629      	mov	r1, r5
   b5176:	2240      	movs	r2, #64	; 0x40
   b5178:	68a0      	ldr	r0, [r4, #8]
   b517a:	f003 fcd7 	bl	b8b2c <strncpy>
        redir_serv[63] = '\0';
   b517e:	68a3      	ldr	r3, [r4, #8]
   b5180:	2500      	movs	r5, #0
   b5182:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b5186:	f107 0014 	add.w	r0, r7, #20
   b518a:	f7ff fda1 	bl	b4cd0 <_ZN10BlynkParam8iteratorppEv>
   b518e:	6803      	ldr	r3, [r0, #0]
   b5190:	4598      	cmp	r8, r3
   b5192:	d91b      	bls.n	b51cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b5194:	6978      	ldr	r0, [r7, #20]
   b5196:	b120      	cbz	r0, b51a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f6>
   b5198:	69bb      	ldr	r3, [r7, #24]
   b519a:	4298      	cmp	r0, r3
   b519c:	d214      	bcs.n	b51c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21c>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b519e:	f003 fc75 	bl	b8a8c <atol>
            redir_port = it.asLong();
   b51a2:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b51a4:	6820      	ldr	r0, [r4, #0]
   b51a6:	f002 ffb7 	bl	b8118 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b51aa:	6823      	ldr	r3, [r4, #0]
   b51ac:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   b51ae:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b51b0:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b51b2:	2300      	movs	r3, #0
   b51b4:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b51b6:	f001 fcdd 	bl	b6b74 <_Z11BlynkMillisv>
   b51ba:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b51be:	3808      	subs	r0, #8
   b51c0:	e9c4 0003 	strd	r0, r0, [r4, #12]
   b51c4:	6160      	str	r0, [r4, #20]
   b51c6:	e7c3      	b.n	b5150 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b51c8:	4628      	mov	r0, r5
   b51ca:	e7ea      	b.n	b51a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f6>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b51cc:	2550      	movs	r5, #80	; 0x50
   b51ce:	e7e9      	b.n	b51a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f8>
        msgIdOutOverride = hdr.msg_id;
   b51d0:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b51d2:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b51d6:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b51da:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   b51dc:	4629      	mov	r1, r5
   b51de:	4620      	mov	r0, r4
   b51e0:	f7ff fde4 	bl	b4dac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b51e4:	2300      	movs	r3, #0
   b51e6:	8363      	strh	r3, [r4, #26]
   b51e8:	e7b2      	b.n	b5150 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b51ea:	4b21      	ldr	r3, [pc, #132]	; (b5270 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   b51ec:	4598      	cmp	r8, r3
   b51ee:	d1f9      	bne.n	b51e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b51f0:	f107 0114 	add.w	r1, r7, #20
   b51f4:	4638      	mov	r0, r7
   b51f6:	f001 fcc0 	bl	b6b7a <BlynkWidgetWrite>
   b51fa:	e7f3      	b.n	b51e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
   b51fc:	4b1d      	ldr	r3, [pc, #116]	; (b5274 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   b51fe:	4598      	cmp	r8, r3
   b5200:	d021      	beq.n	b5246 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29a>
   b5202:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b5206:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b520a:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b520e:	4598      	cmp	r8, r3
   b5210:	d01f      	beq.n	b5252 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a6>
   b5212:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b5216:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b521a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b521e:	4598      	cmp	r8, r3
   b5220:	d1e0      	bne.n	b51e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b5222:	f107 0114 	add.w	r1, r7, #20
   b5226:	4638      	mov	r0, r7
   b5228:	f001 fca7 	bl	b6b7a <BlynkWidgetWrite>
   b522c:	e7da      	b.n	b51e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b522e:	f107 0114 	add.w	r1, r7, #20
   b5232:	4638      	mov	r0, r7
   b5234:	f001 fca1 	bl	b6b7a <BlynkWidgetWrite>
   b5238:	e7d4      	b.n	b51e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b523a:	f107 0114 	add.w	r1, r7, #20
   b523e:	4638      	mov	r0, r7
   b5240:	f001 fc9b 	bl	b6b7a <BlynkWidgetWrite>
   b5244:	e7ce      	b.n	b51e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b5246:	f107 0114 	add.w	r1, r7, #20
   b524a:	4638      	mov	r0, r7
   b524c:	f001 fc95 	bl	b6b7a <BlynkWidgetWrite>
   b5250:	e7c8      	b.n	b51e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b5252:	f107 0114 	add.w	r1, r7, #20
   b5256:	4638      	mov	r0, r7
   b5258:	f001 fc8f 	bl	b6b7a <BlynkWidgetWrite>
   b525c:	e7c2      	b.n	b51e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b525e:	f107 0114 	add.w	r1, r7, #20
   b5262:	4638      	mov	r0, r7
   b5264:	f001 fc89 	bl	b6b7a <BlynkWidgetWrite>
   b5268:	e7bc      	b.n	b51e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
   b526a:	bf00      	nop
   b526c:	00736676 	.word	0x00736676
   b5270:	00676264 	.word	0x00676264
   b5274:	6e6f6361 	.word	0x6e6f6361

000b5278 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b5278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b527c:	4604      	mov	r4, r0
   b527e:	b08c      	sub	sp, #48	; 0x30
   b5280:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b5282:	f7ff fc69 	bl	b4b58 <_ZN10CloudClass7processEv.isra.0>
    if (state == DISCONNECTED) {
   b5286:	7f63      	ldrb	r3, [r4, #29]
   b5288:	2b02      	cmp	r3, #2
   b528a:	d01e      	beq.n	b52ca <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x52>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b528c:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   b528e:	8b62      	ldrh	r2, [r4, #26]
   b5290:	3301      	adds	r3, #1
   b5292:	b2db      	uxtb	r3, r3
   b5294:	7723      	strb	r3, [r4, #28]
   b5296:	b9aa      	cbnz	r2, b52c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b5298:	2b02      	cmp	r3, #2
   b529a:	d813      	bhi.n	b52c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b529c:	6820      	ldr	r0, [r4, #0]
   b529e:	f002 fe03 	bl	b7ea8 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b52a2:	b1a8      	cbz	r0, b52d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
        while (avail || conn.available() > 0) {
   b52a4:	b925      	cbnz	r5, b52b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x38>
    int available() { return client.available(); }
   b52a6:	6820      	ldr	r0, [r4, #0]
   b52a8:	f002 fedc 	bl	b8064 <_ZN9TCPClient9availableEv>
   b52ac:	2800      	cmp	r0, #0
   b52ae:	dd0f      	ble.n	b52d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
            if (!processInput()) {
   b52b0:	4620      	mov	r0, r4
   b52b2:	f7ff fe7b 	bl	b4fac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b52b6:	2800      	cmp	r0, #0
   b52b8:	d1f5      	bne.n	b52a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x2e>
    void disconnect() { client.stop(); }
   b52ba:	6820      	ldr	r0, [r4, #0]
   b52bc:	f002 ff2c 	bl	b8118 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b52c0:	f001 fc5c 	bl	b6b7c <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b52c4:	7f23      	ldrb	r3, [r4, #28]
   b52c6:	3b01      	subs	r3, #1
   b52c8:	7723      	strb	r3, [r4, #28]
}
   b52ca:	b00c      	add	sp, #48	; 0x30
   b52cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   b52d0:	f001 fc50 	bl	b6b74 <_Z11BlynkMillisv>
   b52d4:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b52d6:	6820      	ldr	r0, [r4, #0]
   b52d8:	f002 fde6 	bl	b7ea8 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b52dc:	7f67      	ldrb	r7, [r4, #29]
   b52de:	2f01      	cmp	r7, #1
   b52e0:	4606      	mov	r6, r0
   b52e2:	d124      	bne.n	b532e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb6>
        if (!tconn) {
   b52e4:	b920      	cbnz	r0, b52f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x78>
            lastHeartbeat = t;
   b52e6:	6165      	str	r5, [r4, #20]
            internalReconnect();
   b52e8:	4620      	mov	r0, r4
   b52ea:	f7ff fd55 	bl	b4d98 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b52ee:	e7e9      	b.n	b52c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b52f0:	68e3      	ldr	r3, [r4, #12]
   b52f2:	f24f 6218 	movw	r2, #63000	; 0xf618
   b52f6:	1aeb      	subs	r3, r5, r3
   b52f8:	4293      	cmp	r3, r2
   b52fa:	d8f5      	bhi.n	b52e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x70>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b52fc:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b5300:	4293      	cmp	r3, r2
   b5302:	d803      	bhi.n	b530c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x94>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b5304:	6923      	ldr	r3, [r4, #16]
   b5306:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b5308:	4293      	cmp	r3, r2
   b530a:	d9db      	bls.n	b52c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b530c:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b530e:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b5312:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b5314:	4293      	cmp	r3, r2
   b5316:	d9d5      	bls.n	b52c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
            sendCmd(BLYNK_CMD_PING);
   b5318:	2300      	movs	r3, #0
   b531a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b531e:	9300      	str	r3, [sp, #0]
   b5320:	461a      	mov	r2, r3
   b5322:	2106      	movs	r1, #6
   b5324:	4620      	mov	r0, r4
   b5326:	f000 fbe5 	bl	b5af4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b532a:	6165      	str	r5, [r4, #20]
                return false;
   b532c:	e7ca      	b.n	b52c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    } else if (state == CONNECTING) {
   b532e:	2f00      	cmp	r7, #0
   b5330:	d1c8      	bne.n	b52c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b5332:	6963      	ldr	r3, [r4, #20]
   b5334:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b5336:	b140      	cbz	r0, b534a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xd2>
   b5338:	f241 7270 	movw	r2, #6000	; 0x1770
   b533c:	4293      	cmp	r3, r2
   b533e:	d9c1      	bls.n	b52c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    void disconnect() { client.stop(); }
   b5340:	6820      	ldr	r0, [r4, #0]
   b5342:	f002 fee9 	bl	b8118 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b5346:	7767      	strb	r7, [r4, #29]
            return false;
   b5348:	e7bc      	b.n	b52c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b534a:	f241 3288 	movw	r2, #5000	; 0x1388
   b534e:	4293      	cmp	r3, r2
   b5350:	d9b8      	bls.n	b52c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b5352:	6820      	ldr	r0, [r4, #0]
   b5354:	f002 fee0 	bl	b8118 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b5358:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   b535c:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   b5360:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   b5364:	f1be 0f00 	cmp.w	lr, #0
   b5368:	d01b      	beq.n	b53a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x12a>
            return (1 == client.connect(domain, port));
   b536a:	4633      	mov	r3, r6
   b536c:	4642      	mov	r2, r8
   b536e:	4671      	mov	r1, lr
   b5370:	4660      	mov	r0, ip
   b5372:	f002 fd1b 	bl	b7dac <_ZN9TCPClient7connectEPKctm>
   b5376:	2801      	cmp	r0, #1
   b5378:	d1d7      	bne.n	b532a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb2>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b537a:	6863      	ldr	r3, [r4, #4]
   b537c:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b537e:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b5380:	4618      	mov	r0, r3
            msgIdOut = 1;
   b5382:	8325      	strh	r5, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b5384:	f7ff fb0a 	bl	b499c <strlen>
   b5388:	2200      	movs	r2, #0
   b538a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b538e:	9b05      	ldr	r3, [sp, #20]
   b5390:	9000      	str	r0, [sp, #0]
   b5392:	462a      	mov	r2, r5
   b5394:	211d      	movs	r1, #29
   b5396:	4620      	mov	r0, r4
   b5398:	f000 fbac 	bl	b5af4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b539c:	6923      	ldr	r3, [r4, #16]
   b539e:	6163      	str	r3, [r4, #20]
            return true;
   b53a0:	e790      	b.n	b52c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b53a2:	4b08      	ldr	r3, [pc, #32]	; (b53c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x14c>)
   b53a4:	9306      	str	r3, [sp, #24]
   b53a6:	f10c 0720 	add.w	r7, ip, #32
   b53aa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b53ac:	ae07      	add	r6, sp, #28
   b53ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b53b0:	683b      	ldr	r3, [r7, #0]
   b53b2:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   b53b4:	4642      	mov	r2, r8
   b53b6:	4673      	mov	r3, lr
   b53b8:	a906      	add	r1, sp, #24
   b53ba:	4660      	mov	r0, ip
   b53bc:	f002 fdd6 	bl	b7f6c <_ZN9TCPClient7connectE9IPAddresstm>
   b53c0:	e7d9      	b.n	b5376 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>
   b53c2:	bf00      	nop
   b53c4:	000b93b4 	.word	0x000b93b4

000b53c8 <loop>:
{
   b53c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b53cc:	ed2d 8b04 	vpush	{d8-d9}
  if (client.isConnected())
   b53d0:	48bf      	ldr	r0, [pc, #764]	; (b56d0 <loop+0x308>)
{
   b53d2:	b08b      	sub	sp, #44	; 0x2c
  if (client.isConnected())
   b53d4:	f001 f8aa 	bl	b652c <_ZN4MQTT11isConnectedEv>
   b53d8:	2800      	cmp	r0, #0
   b53da:	f000 828e 	beq.w	b58fa <loop+0x532>
    client.loop();
   b53de:	48bc      	ldr	r0, [pc, #752]	; (b56d0 <loop+0x308>)
   b53e0:	f001 fa7b 	bl	b68da <_ZN4MQTT4loopEv>
  Blynk.run();
   b53e4:	48bb      	ldr	r0, [pc, #748]	; (b56d4 <loop+0x30c>)
   b53e6:	2100      	movs	r1, #0
   b53e8:	f7ff ff46 	bl	b5278 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
  if (allowRun)
   b53ec:	4bba      	ldr	r3, [pc, #744]	; (b56d8 <loop+0x310>)
   b53ee:	781b      	ldrb	r3, [r3, #0]
   b53f0:	2b00      	cmp	r3, #0
   b53f2:	f000 8376 	beq.w	b5ae2 <loop+0x71a>
    if (readyToPublish)
   b53f6:	4db9      	ldr	r5, [pc, #740]	; (b56dc <loop+0x314>)
   b53f8:	782b      	ldrb	r3, [r5, #0]
   b53fa:	2b00      	cmp	r3, #0
   b53fc:	d031      	beq.n	b5462 <loop+0x9a>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b53fe:	49b8      	ldr	r1, [pc, #736]	; (b56e0 <loop+0x318>)
   b5400:	a802      	add	r0, sp, #8
   b5402:	f002 fb8a 	bl	b7b1a <_ZN6StringC1ERKS_>
      data = strRed + strGreen + strBlue + strBrightness + (String)(isLightOn + (changingBrightness || changingColor) * 2);
   b5406:	49b7      	ldr	r1, [pc, #732]	; (b56e4 <loop+0x31c>)
   b5408:	a802      	add	r0, sp, #8
   b540a:	f002 fbd5 	bl	b7bb8 <_ZplRK15StringSumHelperRK6String>
   b540e:	49b6      	ldr	r1, [pc, #728]	; (b56e8 <loop+0x320>)
   b5410:	f002 fbd2 	bl	b7bb8 <_ZplRK15StringSumHelperRK6String>
   b5414:	49b5      	ldr	r1, [pc, #724]	; (b56ec <loop+0x324>)
   b5416:	f002 fbcf 	bl	b7bb8 <_ZplRK15StringSumHelperRK6String>
   b541a:	4bb5      	ldr	r3, [pc, #724]	; (b56f0 <loop+0x328>)
   b541c:	7819      	ldrb	r1, [r3, #0]
   b541e:	4bb5      	ldr	r3, [pc, #724]	; (b56f4 <loop+0x32c>)
   b5420:	781b      	ldrb	r3, [r3, #0]
   b5422:	4604      	mov	r4, r0
   b5424:	b90b      	cbnz	r3, b542a <loop+0x62>
   b5426:	4bb4      	ldr	r3, [pc, #720]	; (b56f8 <loop+0x330>)
   b5428:	781b      	ldrb	r3, [r3, #0]
   b542a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   b542e:	220a      	movs	r2, #10
   b5430:	a806      	add	r0, sp, #24
   b5432:	f002 fb97 	bl	b7b64 <_ZN6StringC1Eih>
   b5436:	a906      	add	r1, sp, #24
   b5438:	4620      	mov	r0, r4
   b543a:	f002 fbbd 	bl	b7bb8 <_ZplRK15StringSumHelperRK6String>
   b543e:	4caf      	ldr	r4, [pc, #700]	; (b56fc <loop+0x334>)
   b5440:	4601      	mov	r1, r0
   b5442:	4620      	mov	r0, r4
   b5444:	f002 fb5a 	bl	b7afc <_ZN6StringaSERKS_>
   b5448:	a806      	add	r0, sp, #24
   b544a:	f002 fadb 	bl	b7a04 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b544e:	a802      	add	r0, sp, #8
   b5450:	f002 fad8 	bl	b7a04 <_ZN6StringD1Ev>
      client.publish("gestureLamp", data);
   b5454:	6822      	ldr	r2, [r4, #0]
   b5456:	49aa      	ldr	r1, [pc, #680]	; (b5700 <loop+0x338>)
   b5458:	489d      	ldr	r0, [pc, #628]	; (b56d0 <loop+0x308>)
   b545a:	f001 f9e2 	bl	b6822 <_ZN4MQTT7publishEPKcS1_>
      readyToPublish = false;
   b545e:	2300      	movs	r3, #0
   b5460:	702b      	strb	r3, [r5, #0]
    if (accel.getSample(sample))
   b5462:	f8df 82d0 	ldr.w	r8, [pc, #720]	; b5734 <loop+0x36c>
   b5466:	48a7      	ldr	r0, [pc, #668]	; (b5704 <loop+0x33c>)
   b5468:	4fa7      	ldr	r7, [pc, #668]	; (b5708 <loop+0x340>)
   b546a:	4ca8      	ldr	r4, [pc, #672]	; (b570c <loop+0x344>)
   b546c:	4641      	mov	r1, r8
   b546e:	f000 feb7 	bl	b61e0 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
   b5472:	2800      	cmp	r0, #0
   b5474:	f000 80c1 	beq.w	b55fa <loop+0x232>
        previousAxisData[i] = movementAxis[i];
   b5478:	4626      	mov	r6, r4
   b547a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b547c:	463d      	mov	r5, r7
   b547e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5480:	e896 0003 	ldmia.w	r6, {r0, r1}
   b5484:	e885 0003 	stmia.w	r5, {r0, r1}
      movementAxis[0] = round(sample.x / (32768.0 / 2.0) * 10.0) / 10.0;
   b5488:	f9b8 0000 	ldrsh.w	r0, [r8]
   b548c:	f7fe ff1a 	bl	b42c4 <__aeabi_i2d>
   b5490:	4b9f      	ldr	r3, [pc, #636]	; (b5710 <loop+0x348>)
   b5492:	2200      	movs	r2, #0
   b5494:	f7fe ff80 	bl	b4398 <__aeabi_dmul>
   b5498:	4b9e      	ldr	r3, [pc, #632]	; (b5714 <loop+0x34c>)
   b549a:	2200      	movs	r2, #0
   b549c:	f7fe ff7c 	bl	b4398 <__aeabi_dmul>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }

template <typename T>
static inline
T round (T x) { return ((x)>=0?(long)((x)+0.5):(long)((x)-0.5)); }
   b54a0:	2200      	movs	r2, #0
   b54a2:	2300      	movs	r3, #0
   b54a4:	4682      	mov	sl, r0
   b54a6:	468b      	mov	fp, r1
   b54a8:	f7ff f9fc 	bl	b48a4 <__aeabi_dcmpge>
   b54ac:	4b9a      	ldr	r3, [pc, #616]	; (b5718 <loop+0x350>)
   b54ae:	2200      	movs	r2, #0
   b54b0:	2800      	cmp	r0, #0
   b54b2:	f000 8231 	beq.w	b5918 <loop+0x550>
   b54b6:	4650      	mov	r0, sl
   b54b8:	4659      	mov	r1, fp
   b54ba:	f7fe fdb7 	bl	b402c <__adddf3>
   b54be:	f7ff fa1b 	bl	b48f8 <__aeabi_d2iz>
   b54c2:	f7fe feff 	bl	b42c4 <__aeabi_i2d>
   b54c6:	4b93      	ldr	r3, [pc, #588]	; (b5714 <loop+0x34c>)
   b54c8:	2200      	movs	r2, #0
   b54ca:	f7ff f88f 	bl	b45ec <__aeabi_ddiv>
   b54ce:	e9c4 0100 	strd	r0, r1, [r4]
      movementAxis[1] = round(sample.y / (32768.0 / 2.0) * 10.0) / 10.0;
   b54d2:	f9b8 0002 	ldrsh.w	r0, [r8, #2]
   b54d6:	f7fe fef5 	bl	b42c4 <__aeabi_i2d>
   b54da:	4b8d      	ldr	r3, [pc, #564]	; (b5710 <loop+0x348>)
   b54dc:	2200      	movs	r2, #0
   b54de:	f7fe ff5b 	bl	b4398 <__aeabi_dmul>
   b54e2:	4b8c      	ldr	r3, [pc, #560]	; (b5714 <loop+0x34c>)
   b54e4:	2200      	movs	r2, #0
   b54e6:	f7fe ff57 	bl	b4398 <__aeabi_dmul>
   b54ea:	2200      	movs	r2, #0
   b54ec:	2300      	movs	r3, #0
   b54ee:	4682      	mov	sl, r0
   b54f0:	468b      	mov	fp, r1
   b54f2:	f7ff f9d7 	bl	b48a4 <__aeabi_dcmpge>
   b54f6:	4b88      	ldr	r3, [pc, #544]	; (b5718 <loop+0x350>)
   b54f8:	2200      	movs	r2, #0
   b54fa:	2800      	cmp	r0, #0
   b54fc:	f000 8211 	beq.w	b5922 <loop+0x55a>
   b5500:	4650      	mov	r0, sl
   b5502:	4659      	mov	r1, fp
   b5504:	f7fe fd92 	bl	b402c <__adddf3>
   b5508:	f7ff f9f6 	bl	b48f8 <__aeabi_d2iz>
   b550c:	f7fe feda 	bl	b42c4 <__aeabi_i2d>
   b5510:	4b80      	ldr	r3, [pc, #512]	; (b5714 <loop+0x34c>)
   b5512:	2200      	movs	r2, #0
   b5514:	f7ff f86a 	bl	b45ec <__aeabi_ddiv>
   b5518:	e9c4 0102 	strd	r0, r1, [r4, #8]
      movementAxis[2] = round(sample.z / (32768.0 / 2.0) * 10.0) / 10.0;
   b551c:	f9b8 0004 	ldrsh.w	r0, [r8, #4]
   b5520:	f7fe fed0 	bl	b42c4 <__aeabi_i2d>
   b5524:	4b7a      	ldr	r3, [pc, #488]	; (b5710 <loop+0x348>)
   b5526:	2200      	movs	r2, #0
   b5528:	f7fe ff36 	bl	b4398 <__aeabi_dmul>
   b552c:	4b79      	ldr	r3, [pc, #484]	; (b5714 <loop+0x34c>)
   b552e:	2200      	movs	r2, #0
   b5530:	f7fe ff32 	bl	b4398 <__aeabi_dmul>
   b5534:	2200      	movs	r2, #0
   b5536:	2300      	movs	r3, #0
   b5538:	4680      	mov	r8, r0
   b553a:	4689      	mov	r9, r1
   b553c:	f7ff f9b2 	bl	b48a4 <__aeabi_dcmpge>
   b5540:	4b75      	ldr	r3, [pc, #468]	; (b5718 <loop+0x350>)
   b5542:	2200      	movs	r2, #0
   b5544:	2800      	cmp	r0, #0
   b5546:	f000 81f1 	beq.w	b592c <loop+0x564>
   b554a:	4640      	mov	r0, r8
   b554c:	4649      	mov	r1, r9
   b554e:	f7fe fd6d 	bl	b402c <__adddf3>
   b5552:	f7ff f9d1 	bl	b48f8 <__aeabi_d2iz>
   b5556:	f7fe feb5 	bl	b42c4 <__aeabi_i2d>
   b555a:	4b6e      	ldr	r3, [pc, #440]	; (b5714 <loop+0x34c>)
   b555c:	2200      	movs	r2, #0
   b555e:	f7ff f845 	bl	b45ec <__aeabi_ddiv>
   b5562:	e9c4 0104 	strd	r0, r1, [r4, #16]
      Serial.println(movementAxis[1]);
   b5566:	f002 feef 	bl	b8348 <_Z16_fetch_usbserialv>
   b556a:	ed94 0b02 	vldr	d0, [r4, #8]
   b556e:	2102      	movs	r1, #2
   b5570:	f002 f92a 	bl	b77c8 <_ZN5Print7printlnEdi>
      if (abs(movementAxis[1] - previousAxisData[1]) > 0.1 && lookForBump && (changingBrightness || changingColor))
   b5574:	e9d4 8902 	ldrd	r8, r9, [r4, #8]
   b5578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   b557c:	4640      	mov	r0, r8
   b557e:	4649      	mov	r1, r9
   b5580:	f7fe fd52 	bl	b4028 <__aeabi_dsub>
   b5584:	a350      	add	r3, pc, #320	; (adr r3, b56c8 <loop+0x300>)
   b5586:	e9d3 2300 	ldrd	r2, r3, [r3]
   b558a:	460f      	mov	r7, r1
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
   b558c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b5590:	4606      	mov	r6, r0
   b5592:	f7ff f991 	bl	b48b8 <__aeabi_dcmpgt>
   b5596:	b1f8      	cbz	r0, b55d8 <loop+0x210>
   b5598:	4d60      	ldr	r5, [pc, #384]	; (b571c <loop+0x354>)
   b559a:	782b      	ldrb	r3, [r5, #0]
   b559c:	b1e3      	cbz	r3, b55d8 <loop+0x210>
   b559e:	4b55      	ldr	r3, [pc, #340]	; (b56f4 <loop+0x32c>)
   b55a0:	781b      	ldrb	r3, [r3, #0]
   b55a2:	b913      	cbnz	r3, b55aa <loop+0x1e2>
   b55a4:	4b54      	ldr	r3, [pc, #336]	; (b56f8 <loop+0x330>)
   b55a6:	781b      	ldrb	r3, [r3, #0]
   b55a8:	b1b3      	cbz	r3, b55d8 <loop+0x210>
        if (!isHigh)
   b55aa:	4a5d      	ldr	r2, [pc, #372]	; (b5720 <loop+0x358>)
   b55ac:	f8df a188 	ldr.w	sl, [pc, #392]	; b5738 <loop+0x370>
   b55b0:	f892 b000 	ldrb.w	fp, [r2]
   b55b4:	2301      	movs	r3, #1
   b55b6:	f1bb 0f00 	cmp.w	fp, #0
   b55ba:	f040 81bc 	bne.w	b5936 <loop+0x56e>
          isHigh = true;
   b55be:	7013      	strb	r3, [r2, #0]
          highVal = (movementAxis[1] - previousAxisData[1]) * 10;
   b55c0:	4630      	mov	r0, r6
   b55c2:	4b54      	ldr	r3, [pc, #336]	; (b5714 <loop+0x34c>)
   b55c4:	2200      	movs	r2, #0
   b55c6:	4639      	mov	r1, r7
   b55c8:	f7fe fee6 	bl	b4398 <__aeabi_dmul>
   b55cc:	f7ff f994 	bl	b48f8 <__aeabi_d2iz>
          lookForBump = false;
   b55d0:	f885 b000 	strb.w	fp, [r5]
          highVal = (movementAxis[1] - previousAxisData[1]) * 10;
   b55d4:	f8ca 0000 	str.w	r0, [sl]
      if (movementAxis[1] == 0)
   b55d8:	2200      	movs	r2, #0
   b55da:	2300      	movs	r3, #0
   b55dc:	4640      	mov	r0, r8
   b55de:	4649      	mov	r1, r9
   b55e0:	f7ff f942 	bl	b4868 <__aeabi_dcmpeq>
   b55e4:	b148      	cbz	r0, b55fa <loop+0x232>
        lookForBump = true;
   b55e6:	4b4d      	ldr	r3, [pc, #308]	; (b571c <loop+0x354>)
   b55e8:	2201      	movs	r2, #1
   b55ea:	701a      	strb	r2, [r3, #0]
        if (isLow)
   b55ec:	4b4d      	ldr	r3, [pc, #308]	; (b5724 <loop+0x35c>)
   b55ee:	781a      	ldrb	r2, [r3, #0]
   b55f0:	b11a      	cbz	r2, b55fa <loop+0x232>
          isHigh = false;
   b55f2:	494b      	ldr	r1, [pc, #300]	; (b5720 <loop+0x358>)
   b55f4:	2200      	movs	r2, #0
   b55f6:	700a      	strb	r2, [r1, #0]
          isLow = false;
   b55f8:	701a      	strb	r2, [r3, #0]
   b55fa:	4f43      	ldr	r7, [pc, #268]	; (b5708 <loop+0x340>)
   b55fc:	4e43      	ldr	r6, [pc, #268]	; (b570c <loop+0x344>)
      if ((previousAxisData[i] - shakingSensitivity >= movementAxis[i] || previousAxisData[i] + shakingSensitivity <= movementAxis[i]) && !previouslyShakedBool)
   b55fe:	f8df b13c 	ldr.w	fp, [pc, #316]	; b573c <loop+0x374>
   b5602:	f8df a13c 	ldr.w	sl, [pc, #316]	; b5740 <loop+0x378>
{
   b5606:	2503      	movs	r5, #3
      if ((previousAxisData[i] - shakingSensitivity >= movementAxis[i] || previousAxisData[i] + shakingSensitivity <= movementAxis[i]) && !previouslyShakedBool)
   b5608:	ecb7 7b02 	vldmia	r7!, {d7}
   b560c:	e9db 8900 	ldrd	r8, r9, [fp]
   b5610:	eeb0 8a47 	vmov.f32	s16, s14
   b5614:	eef0 8a67 	vmov.f32	s17, s15
   b5618:	ecb6 7b02 	vldmia	r6!, {d7}
   b561c:	4642      	mov	r2, r8
   b561e:	464b      	mov	r3, r9
   b5620:	ec51 0b18 	vmov	r0, r1, d8
   b5624:	eeb0 9a47 	vmov.f32	s18, s14
   b5628:	eef0 9a67 	vmov.f32	s19, s15
   b562c:	f7fe fcfc 	bl	b4028 <__aeabi_dsub>
   b5630:	ec53 2b19 	vmov	r2, r3, d9
   b5634:	f7ff f936 	bl	b48a4 <__aeabi_dcmpge>
   b5638:	b970      	cbnz	r0, b5658 <loop+0x290>
   b563a:	4642      	mov	r2, r8
   b563c:	464b      	mov	r3, r9
   b563e:	ec51 0b18 	vmov	r0, r1, d8
   b5642:	f7fe fcf3 	bl	b402c <__adddf3>
   b5646:	4602      	mov	r2, r0
   b5648:	460b      	mov	r3, r1
   b564a:	ec51 0b19 	vmov	r0, r1, d9
   b564e:	f7ff f929 	bl	b48a4 <__aeabi_dcmpge>
   b5652:	2800      	cmp	r0, #0
   b5654:	f000 8084 	beq.w	b5760 <loop+0x398>
   b5658:	f89a 1000 	ldrb.w	r1, [sl]
   b565c:	2900      	cmp	r1, #0
   b565e:	d17f      	bne.n	b5760 <loop+0x398>
        timesShaked++;
   b5660:	4a31      	ldr	r2, [pc, #196]	; (b5728 <loop+0x360>)
   b5662:	6813      	ldr	r3, [r2, #0]
   b5664:	3301      	adds	r3, #1
   b5666:	6013      	str	r3, [r2, #0]
        switch (timesShaked % 4)
   b5668:	425a      	negs	r2, r3
   b566a:	f003 0803 	and.w	r8, r3, #3
   b566e:	f002 0303 	and.w	r3, r2, #3
   b5672:	bf58      	it	pl
   b5674:	f1c3 0800 	rsbpl	r8, r3, #0
   b5678:	f1b8 0f02 	cmp.w	r8, #2
   b567c:	f000 8162 	beq.w	b5944 <loop+0x57c>
   b5680:	f1b8 0f03 	cmp.w	r8, #3
   b5684:	f000 8164 	beq.w	b5950 <loop+0x588>
   b5688:	f1b8 0f01 	cmp.w	r8, #1
   b568c:	d10c      	bne.n	b56a8 <loop+0x2e0>
          digitalWrite(redLedPin, isLightOn);
   b568e:	4b18      	ldr	r3, [pc, #96]	; (b56f0 <loop+0x328>)
   b5690:	2003      	movs	r0, #3
   b5692:	7819      	ldrb	r1, [r3, #0]
   b5694:	f002 fff3 	bl	b867e <digitalWrite>
          digitalWrite(greenLedPin, HIGH);
   b5698:	4641      	mov	r1, r8
   b569a:	2004      	movs	r0, #4
          digitalWrite(redLedPin, HIGH);
   b569c:	f002 ffef 	bl	b867e <digitalWrite>
          digitalWrite(blueLedPin, HIGH);
   b56a0:	2101      	movs	r1, #1
   b56a2:	2005      	movs	r0, #5
          digitalWrite(redLedPin, HIGH);
   b56a4:	f002 ffeb 	bl	b867e <digitalWrite>
        ledOFF.start();
   b56a8:	4820      	ldr	r0, [pc, #128]	; (b572c <loop+0x364>)
        previouslyShakedBool = true;
   b56aa:	f04f 0801 	mov.w	r8, #1
        ledOFF.start();
   b56ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
        previouslyShakedBool = true;
   b56b2:	f88a 8000 	strb.w	r8, [sl]
        ledOFF.start();
   b56b6:	f7ff fa37 	bl	b4b28 <_ZN5Timer5startEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_RESET, fromISR, 0, block, nullptr) : false;
   b56ba:	4b1d      	ldr	r3, [pc, #116]	; (b5730 <loop+0x368>)
   b56bc:	6898      	ldr	r0, [r3, #8]
   b56be:	2800      	cmp	r0, #0
   b56c0:	d049      	beq.n	b5756 <loop+0x38e>
   b56c2:	e03f      	b.n	b5744 <loop+0x37c>
   b56c4:	f3af 8000 	nop.w
   b56c8:	9999999a 	.word	0x9999999a
   b56cc:	3fb99999 	.word	0x3fb99999
   b56d0:	2003e53c 	.word	0x2003e53c
   b56d4:	2003e48c 	.word	0x2003e48c
   b56d8:	2003e510 	.word	0x2003e510
   b56dc:	2003e638 	.word	0x2003e638
   b56e0:	2003e6b8 	.word	0x2003e6b8
   b56e4:	2003e6a8 	.word	0x2003e6a8
   b56e8:	2003e688 	.word	0x2003e688
   b56ec:	2003e698 	.word	0x2003e698
   b56f0:	2003e5c5 	.word	0x2003e5c5
   b56f4:	2003e538 	.word	0x2003e538
   b56f8:	2003e539 	.word	0x2003e539
   b56fc:	2003e5ac 	.word	0x2003e5ac
   b5700:	000b8dda 	.word	0x000b8dda
   b5704:	2003e4e8 	.word	0x2003e4e8
   b5708:	2003e600 	.word	0x2003e600
   b570c:	2003e5e8 	.word	0x2003e5e8
   b5710:	3f100000 	.word	0x3f100000
   b5714:	40240000 	.word	0x40240000
   b5718:	3fe00000 	.word	0x3fe00000
   b571c:	2003e3fc 	.word	0x2003e3fc
   b5720:	2003e5c4 	.word	0x2003e5c4
   b5724:	2003e5c6 	.word	0x2003e5c6
   b5728:	2003e6c8 	.word	0x2003e6c8
   b572c:	2003e5c8 	.word	0x2003e5c8
   b5730:	2003e658 	.word	0x2003e658
   b5734:	2003e674 	.word	0x2003e674
   b5738:	2003e5c0 	.word	0x2003e5c0
   b573c:	2003e408 	.word	0x2003e408
   b5740:	2003e618 	.word	0x2003e618
   b5744:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b5748:	2300      	movs	r3, #0
   b574a:	e9cd 2300 	strd	r2, r3, [sp]
   b574e:	4641      	mov	r1, r8
   b5750:	461a      	mov	r2, r3
   b5752:	f001 fa51 	bl	b6bf8 <os_timer_change>
        resettimesShaked.start();
   b5756:	48ae      	ldr	r0, [pc, #696]	; (b5a10 <loop+0x648>)
   b5758:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b575c:	f7ff f9e4 	bl	b4b28 <_ZN5Timer5startEj.isra.0>
    for (int i = 0; i < 3; i++)
   b5760:	3d01      	subs	r5, #1
   b5762:	f47f af51 	bne.w	b5608 <loop+0x240>
    if (readyToUpdate)
   b5766:	4eab      	ldr	r6, [pc, #684]	; (b5a14 <loop+0x64c>)
   b5768:	7833      	ldrb	r3, [r6, #0]
   b576a:	2b00      	cmp	r3, #0
   b576c:	f000 81b9 	beq.w	b5ae2 <loop+0x71a>
      Serial.println(movementAxis[1]);
   b5770:	f002 fdea 	bl	b8348 <_Z16_fetch_usbserialv>
   b5774:	ed94 0b02 	vldr	d0, [r4, #8]
   b5778:	2102      	movs	r1, #2
   b577a:	f002 f825 	bl	b77c8 <_ZN5Print7printlnEdi>
      readyToUpdateTimer.start();
   b577e:	48a6      	ldr	r0, [pc, #664]	; (b5a18 <loop+0x650>)
      readyToUpdate = false;
   b5780:	7035      	strb	r5, [r6, #0]
      readyToUpdateTimer.start();
   b5782:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5786:	f7ff f9cf 	bl	b4b28 <_ZN5Timer5startEj.isra.0>
      if (changingColor)
   b578a:	4ba4      	ldr	r3, [pc, #656]	; (b5a1c <loop+0x654>)
   b578c:	781b      	ldrb	r3, [r3, #0]
   b578e:	2b00      	cmp	r3, #0
   b5790:	f000 8119 	beq.w	b59c6 <loop+0x5fe>
        colorIndex += movementAxis[1] * 10;
   b5794:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   b5798:	4ba1      	ldr	r3, [pc, #644]	; (b5a20 <loop+0x658>)
   b579a:	f8df 82b8 	ldr.w	r8, [pc, #696]	; b5a54 <loop+0x68c>
   b579e:	2200      	movs	r2, #0
   b57a0:	f7fe fdfa 	bl	b4398 <__aeabi_dmul>
   b57a4:	4606      	mov	r6, r0
   b57a6:	f8d8 0000 	ldr.w	r0, [r8]
   b57aa:	460f      	mov	r7, r1
   b57ac:	f7fe fd8a 	bl	b42c4 <__aeabi_i2d>
   b57b0:	4602      	mov	r2, r0
   b57b2:	460b      	mov	r3, r1
   b57b4:	4630      	mov	r0, r6
   b57b6:	4639      	mov	r1, r7
   b57b8:	f7fe fc38 	bl	b402c <__adddf3>
   b57bc:	f7ff f89c 	bl	b48f8 <__aeabi_d2iz>
        mappedColorIndex = map(colorIndex, -128, 128, 0, 7 * 255);
   b57c0:	f240 63f9 	movw	r3, #1785	; 0x6f9
        colorIndex += movementAxis[1] * 10;
   b57c4:	f8c8 0000 	str.w	r0, [r8]
        mappedColorIndex = map(colorIndex, -128, 128, 0, 7 * 255);
   b57c8:	2280      	movs	r2, #128	; 0x80
   b57ca:	9300      	str	r3, [sp, #0]
   b57cc:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   b57d0:	462b      	mov	r3, r5
   b57d2:	f001 fce5 	bl	b71a0 <_Z3mapiiiii>
   b57d6:	4b93      	ldr	r3, [pc, #588]	; (b5a24 <loop+0x65c>)
        green = -abs(mappedColorIndex - (255 * 1.5)) + (255 * 1.5);
   b57d8:	4e93      	ldr	r6, [pc, #588]	; (b5a28 <loop+0x660>)
        mappedColorIndex = map(colorIndex, -128, 128, 0, 7 * 255);
   b57da:	6018      	str	r0, [r3, #0]
   b57dc:	4682      	mov	sl, r0
        green = -abs(mappedColorIndex - (255 * 1.5)) + (255 * 1.5);
   b57de:	f7fe fd71 	bl	b42c4 <__aeabi_i2d>
   b57e2:	a389      	add	r3, pc, #548	; (adr r3, b5a08 <loop+0x640>)
   b57e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b57e8:	4680      	mov	r8, r0
   b57ea:	4689      	mov	r9, r1
   b57ec:	f7fe fc1c 	bl	b4028 <__aeabi_dsub>
   b57f0:	4602      	mov	r2, r0
   b57f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b57f6:	a184      	add	r1, pc, #528	; (adr r1, b5a08 <loop+0x640>)
   b57f8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b57fc:	f7fe fc14 	bl	b4028 <__aeabi_dsub>
   b5800:	f7ff f87a 	bl	b48f8 <__aeabi_d2iz>
        blue = -abs(mappedColorIndex - (255 * 2.5)) + (255 * 1.5);
   b5804:	4b89      	ldr	r3, [pc, #548]	; (b5a2c <loop+0x664>)
        green = -abs(mappedColorIndex - (255 * 1.5)) + (255 * 1.5);
   b5806:	6030      	str	r0, [r6, #0]
        blue = -abs(mappedColorIndex - (255 * 2.5)) + (255 * 1.5);
   b5808:	2200      	movs	r2, #0
   b580a:	4649      	mov	r1, r9
        green = -abs(mappedColorIndex - (255 * 1.5)) + (255 * 1.5);
   b580c:	4607      	mov	r7, r0
        blue = -abs(mappedColorIndex - (255 * 2.5)) + (255 * 1.5);
   b580e:	4640      	mov	r0, r8
   b5810:	f7fe fc0a 	bl	b4028 <__aeabi_dsub>
   b5814:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b5818:	4602      	mov	r2, r0
   b581a:	a17b      	add	r1, pc, #492	; (adr r1, b5a08 <loop+0x640>)
   b581c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b5820:	f7fe fc02 	bl	b4028 <__aeabi_dsub>
   b5824:	f7ff f868 	bl	b48f8 <__aeabi_d2iz>
        red = abs(mappedColorIndex - (255 * 2)) - 255;
   b5828:	f5aa 73ff 	sub.w	r3, sl, #510	; 0x1fe
   b582c:	2b00      	cmp	r3, #0
   b582e:	bfb8      	it	lt
   b5830:	425b      	neglt	r3, r3
        blue = -abs(mappedColorIndex - (255 * 2.5)) + (255 * 1.5);
   b5832:	f8df 8224 	ldr.w	r8, [pc, #548]	; b5a58 <loop+0x690>
   b5836:	f8df 9224 	ldr.w	r9, [pc, #548]	; b5a5c <loop+0x694>
   b583a:	f8c8 0000 	str.w	r0, [r8]
        red = abs(mappedColorIndex - (255 * 2)) - 255;
   b583e:	3bff      	subs	r3, #255	; 0xff
        if (red > 255)
   b5840:	2bff      	cmp	r3, #255	; 0xff
   b5842:	f340 808f 	ble.w	b5964 <loop+0x59c>
          red = 255;
   b5846:	23ff      	movs	r3, #255	; 0xff
   b5848:	f8c9 3000 	str.w	r3, [r9]
        if (green > 255)
   b584c:	2fff      	cmp	r7, #255	; 0xff
   b584e:	f340 8090 	ble.w	b5972 <loop+0x5aa>
          green = 255;
   b5852:	23ff      	movs	r3, #255	; 0xff
          green = 0;
   b5854:	6033      	str	r3, [r6, #0]
        if (blue > 255)
   b5856:	28ff      	cmp	r0, #255	; 0xff
   b5858:	f340 8090 	ble.w	b597c <loop+0x5b4>
          blue = 255;
   b585c:	23ff      	movs	r3, #255	; 0xff
          blue = 0;
   b585e:	f8c8 3000 	str.w	r3, [r8]
        setColor(red, green, blue);
   b5862:	6831      	ldr	r1, [r6, #0]
   b5864:	f8d8 2000 	ldr.w	r2, [r8]
   b5868:	f8d9 0000 	ldr.w	r0, [r9]
	inline unsigned int length(void) const {return len;}
   b586c:	4d70      	ldr	r5, [pc, #448]	; (b5a30 <loop+0x668>)
   b586e:	f7ff fa7f 	bl	b4d70 <_Z8setColoriii>
        strRed = (String)red;
   b5872:	220a      	movs	r2, #10
   b5874:	f8d9 1000 	ldr.w	r1, [r9]
   b5878:	a806      	add	r0, sp, #24
   b587a:	f002 f973 	bl	b7b64 <_ZN6StringC1Eih>
   b587e:	a906      	add	r1, sp, #24
   b5880:	486b      	ldr	r0, [pc, #428]	; (b5a30 <loop+0x668>)
   b5882:	f002 f955 	bl	b7b30 <_ZN6StringaSEOS_>
   b5886:	a806      	add	r0, sp, #24
   b5888:	f002 f8bc 	bl	b7a04 <_ZN6StringD1Ev>
        strGreen = (String)green;
   b588c:	220a      	movs	r2, #10
   b588e:	6831      	ldr	r1, [r6, #0]
	StringSumHelper(const char *p) : String(p) {}
   b5890:	4e68      	ldr	r6, [pc, #416]	; (b5a34 <loop+0x66c>)
   b5892:	a806      	add	r0, sp, #24
   b5894:	f002 f966 	bl	b7b64 <_ZN6StringC1Eih>
   b5898:	a906      	add	r1, sp, #24
   b589a:	4867      	ldr	r0, [pc, #412]	; (b5a38 <loop+0x670>)
   b589c:	f002 f948 	bl	b7b30 <_ZN6StringaSEOS_>
   b58a0:	a806      	add	r0, sp, #24
   b58a2:	f002 f8af 	bl	b7a04 <_ZN6StringD1Ev>
        strBlue = (String)blue;
   b58a6:	220a      	movs	r2, #10
   b58a8:	f8d8 1000 	ldr.w	r1, [r8]
   b58ac:	a806      	add	r0, sp, #24
   b58ae:	f002 f959 	bl	b7b64 <_ZN6StringC1Eih>
   b58b2:	a906      	add	r1, sp, #24
   b58b4:	4861      	ldr	r0, [pc, #388]	; (b5a3c <loop+0x674>)
   b58b6:	f002 f93b 	bl	b7b30 <_ZN6StringaSEOS_>
   b58ba:	a806      	add	r0, sp, #24
   b58bc:	f002 f8a2 	bl	b7a04 <_ZN6StringD1Ev>
        for (int i = 0; i < 3 - strRed.length(); i += 0)
   b58c0:	68ab      	ldr	r3, [r5, #8]
   b58c2:	2b03      	cmp	r3, #3
   b58c4:	d15f      	bne.n	b5986 <loop+0x5be>
	inline unsigned int length(void) const {return len;}
   b58c6:	4d5c      	ldr	r5, [pc, #368]	; (b5a38 <loop+0x670>)
	StringSumHelper(const char *p) : String(p) {}
   b58c8:	4e5a      	ldr	r6, [pc, #360]	; (b5a34 <loop+0x66c>)
        for (int i = 0; i < 3 - strGreen.length(); i += 0)
   b58ca:	68ab      	ldr	r3, [r5, #8]
   b58cc:	2b03      	cmp	r3, #3
   b58ce:	d16a      	bne.n	b59a6 <loop+0x5de>
	inline unsigned int length(void) const {return len;}
   b58d0:	4d5a      	ldr	r5, [pc, #360]	; (b5a3c <loop+0x674>)
	StringSumHelper(const char *p) : String(p) {}
   b58d2:	4e58      	ldr	r6, [pc, #352]	; (b5a34 <loop+0x66c>)
        for (int i = 0; i < 3 - strBlue.length(); i += 0)
   b58d4:	68ab      	ldr	r3, [r5, #8]
   b58d6:	2b03      	cmp	r3, #3
   b58d8:	d075      	beq.n	b59c6 <loop+0x5fe>
   b58da:	4631      	mov	r1, r6
   b58dc:	a806      	add	r0, sp, #24
   b58de:	f002 f8dc 	bl	b7a9a <_ZN6StringC1EPK19__FlashStringHelper>
          strBlue = "0" + strBlue;
   b58e2:	4629      	mov	r1, r5
   b58e4:	a806      	add	r0, sp, #24
   b58e6:	f002 f967 	bl	b7bb8 <_ZplRK15StringSumHelperRK6String>
   b58ea:	4601      	mov	r1, r0
   b58ec:	4628      	mov	r0, r5
   b58ee:	f002 f905 	bl	b7afc <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b58f2:	a806      	add	r0, sp, #24
   b58f4:	f002 f886 	bl	b7a04 <_ZN6StringD1Ev>
        for (int i = 0; i < 3 - strBlue.length(); i += 0)
   b58f8:	e7ec      	b.n	b58d4 <loop+0x50c>
    inline static SleepResult sleep(const hal_pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b58fa:	a806      	add	r0, sp, #24
   b58fc:	f001 fba0 	bl	b7040 <spark_deviceID>
    client.connect(System.deviceID());
   b5900:	9906      	ldr	r1, [sp, #24]
   b5902:	484f      	ldr	r0, [pc, #316]	; (b5a40 <loop+0x678>)
   b5904:	f000 ff02 	bl	b670c <_ZN4MQTT7connectEPKc>
   b5908:	a806      	add	r0, sp, #24
   b590a:	f002 f87b 	bl	b7a04 <_ZN6StringD1Ev>
    client.subscribe("gestureLamp2");
   b590e:	494d      	ldr	r1, [pc, #308]	; (b5a44 <loop+0x67c>)
   b5910:	484b      	ldr	r0, [pc, #300]	; (b5a40 <loop+0x678>)
   b5912:	f001 f92a 	bl	b6b6a <_ZN4MQTT9subscribeEPKc>
   b5916:	e565      	b.n	b53e4 <loop+0x1c>
   b5918:	4650      	mov	r0, sl
   b591a:	4659      	mov	r1, fp
   b591c:	f7fe fb84 	bl	b4028 <__aeabi_dsub>
   b5920:	e5cd      	b.n	b54be <loop+0xf6>
   b5922:	4650      	mov	r0, sl
   b5924:	4659      	mov	r1, fp
   b5926:	f7fe fb7f 	bl	b4028 <__aeabi_dsub>
   b592a:	e5ed      	b.n	b5508 <loop+0x140>
   b592c:	4640      	mov	r0, r8
   b592e:	4649      	mov	r1, r9
   b5930:	f7fe fb7a 	bl	b4028 <__aeabi_dsub>
   b5934:	e60d      	b.n	b5552 <loop+0x18a>
          isLow = true;
   b5936:	4a44      	ldr	r2, [pc, #272]	; (b5a48 <loop+0x680>)
   b5938:	7013      	strb	r3, [r2, #0]
          highVal = 0;
   b593a:	2300      	movs	r3, #0
   b593c:	f8ca 3000 	str.w	r3, [sl]
          lookForBump = false;
   b5940:	702b      	strb	r3, [r5, #0]
   b5942:	e649      	b.n	b55d8 <loop+0x210>
          digitalWrite(greenLedPin, LOW);
   b5944:	2004      	movs	r0, #4
   b5946:	f002 fe9a 	bl	b867e <digitalWrite>
          digitalWrite(redLedPin, HIGH);
   b594a:	2101      	movs	r1, #1
   b594c:	2003      	movs	r0, #3
   b594e:	e6a5      	b.n	b569c <loop+0x2d4>
          digitalWrite(blueLedPin, LOW);
   b5950:	2005      	movs	r0, #5
   b5952:	f002 fe94 	bl	b867e <digitalWrite>
          digitalWrite(greenLedPin, HIGH);
   b5956:	2101      	movs	r1, #1
   b5958:	2004      	movs	r0, #4
   b595a:	f002 fe90 	bl	b867e <digitalWrite>
          digitalWrite(redLedPin, HIGH);
   b595e:	2101      	movs	r1, #1
   b5960:	4640      	mov	r0, r8
   b5962:	e69f      	b.n	b56a4 <loop+0x2dc>
        red = abs(mappedColorIndex - (255 * 2)) - 255;
   b5964:	ea15 0523 	ands.w	r5, r5, r3, asr #32
   b5968:	bf38      	it	cc
   b596a:	461d      	movcc	r5, r3
   b596c:	f8c9 5000 	str.w	r5, [r9]
   b5970:	e76c      	b.n	b584c <loop+0x484>
        else if (green < 0)
   b5972:	2f00      	cmp	r7, #0
   b5974:	f6bf af6f 	bge.w	b5856 <loop+0x48e>
          green = 0;
   b5978:	2300      	movs	r3, #0
   b597a:	e76b      	b.n	b5854 <loop+0x48c>
        else if (blue < 0)
   b597c:	2800      	cmp	r0, #0
   b597e:	f6bf af70 	bge.w	b5862 <loop+0x49a>
          blue = 0;
   b5982:	2300      	movs	r3, #0
   b5984:	e76b      	b.n	b585e <loop+0x496>
	StringSumHelper(const char *p) : String(p) {}
   b5986:	4631      	mov	r1, r6
   b5988:	a806      	add	r0, sp, #24
   b598a:	f002 f886 	bl	b7a9a <_ZN6StringC1EPK19__FlashStringHelper>
          strRed = "0" + strRed;
   b598e:	4629      	mov	r1, r5
   b5990:	a806      	add	r0, sp, #24
   b5992:	f002 f911 	bl	b7bb8 <_ZplRK15StringSumHelperRK6String>
   b5996:	4601      	mov	r1, r0
   b5998:	4628      	mov	r0, r5
   b599a:	f002 f8af 	bl	b7afc <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b599e:	a806      	add	r0, sp, #24
   b59a0:	f002 f830 	bl	b7a04 <_ZN6StringD1Ev>
        for (int i = 0; i < 3 - strRed.length(); i += 0)
   b59a4:	e78c      	b.n	b58c0 <loop+0x4f8>
	StringSumHelper(const char *p) : String(p) {}
   b59a6:	4631      	mov	r1, r6
   b59a8:	a806      	add	r0, sp, #24
   b59aa:	f002 f876 	bl	b7a9a <_ZN6StringC1EPK19__FlashStringHelper>
          strGreen = "0" + strGreen;
   b59ae:	4629      	mov	r1, r5
   b59b0:	a806      	add	r0, sp, #24
   b59b2:	f002 f901 	bl	b7bb8 <_ZplRK15StringSumHelperRK6String>
   b59b6:	4601      	mov	r1, r0
   b59b8:	4628      	mov	r0, r5
   b59ba:	f002 f89f 	bl	b7afc <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b59be:	a806      	add	r0, sp, #24
   b59c0:	f002 f820 	bl	b7a04 <_ZN6StringD1Ev>
        for (int i = 0; i < 3 - strGreen.length(); i += 0)
   b59c4:	e781      	b.n	b58ca <loop+0x502>
      if (changingBrightness)
   b59c6:	4b21      	ldr	r3, [pc, #132]	; (b5a4c <loop+0x684>)
   b59c8:	781b      	ldrb	r3, [r3, #0]
   b59ca:	2b00      	cmp	r3, #0
   b59cc:	f000 8089 	beq.w	b5ae2 <loop+0x71a>
        brightness += movementAxis[1] * 10;
   b59d0:	4b13      	ldr	r3, [pc, #76]	; (b5a20 <loop+0x658>)
   b59d2:	2200      	movs	r2, #0
   b59d4:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   b59d8:	f7fe fcde 	bl	b4398 <__aeabi_dmul>
   b59dc:	4c1c      	ldr	r4, [pc, #112]	; (b5a50 <loop+0x688>)
   b59de:	4606      	mov	r6, r0
   b59e0:	6820      	ldr	r0, [r4, #0]
   b59e2:	460f      	mov	r7, r1
   b59e4:	f7fe fc6e 	bl	b42c4 <__aeabi_i2d>
   b59e8:	4602      	mov	r2, r0
   b59ea:	460b      	mov	r3, r1
   b59ec:	4630      	mov	r0, r6
   b59ee:	4639      	mov	r1, r7
   b59f0:	f7fe fb1c 	bl	b402c <__adddf3>
   b59f4:	f7fe ff80 	bl	b48f8 <__aeabi_d2iz>
        if (brightness < -64)
   b59f8:	f110 0f40 	cmn.w	r0, #64	; 0x40
   b59fc:	da30      	bge.n	b5a60 <loop+0x698>
          brightness = -64;
   b59fe:	f06f 033f 	mvn.w	r3, #63	; 0x3f
          brightness = 64;
   b5a02:	6023      	str	r3, [r4, #0]
   b5a04:	e02f      	b.n	b5a66 <loop+0x69e>
   b5a06:	bf00      	nop
   b5a08:	00000000 	.word	0x00000000
   b5a0c:	4077e800 	.word	0x4077e800
   b5a10:	2003e658 	.word	0x2003e658
   b5a14:	2003e3fd 	.word	0x2003e3fd
   b5a18:	2003e63c 	.word	0x2003e63c
   b5a1c:	2003e539 	.word	0x2003e539
   b5a20:	40240000 	.word	0x40240000
   b5a24:	2003e5e4 	.word	0x2003e5e4
   b5a28:	2003e5bc 	.word	0x2003e5bc
   b5a2c:	4083ec00 	.word	0x4083ec00
   b5a30:	2003e6b8 	.word	0x2003e6b8
   b5a34:	000b8e56 	.word	0x000b8e56
   b5a38:	2003e6a8 	.word	0x2003e6a8
   b5a3c:	2003e688 	.word	0x2003e688
   b5a40:	2003e53c 	.word	0x2003e53c
   b5a44:	000b8dcd 	.word	0x000b8dcd
   b5a48:	2003e5c6 	.word	0x2003e5c6
   b5a4c:	2003e538 	.word	0x2003e538
   b5a50:	2003e3f8 	.word	0x2003e3f8
   b5a54:	2003e59c 	.word	0x2003e59c
   b5a58:	2003e514 	.word	0x2003e514
   b5a5c:	2003e400 	.word	0x2003e400
        else if (brightness > 64)
   b5a60:	2840      	cmp	r0, #64	; 0x40
   b5a62:	dc2a      	bgt.n	b5aba <loop+0x6f2>
        brightness += movementAxis[1] * 10;
   b5a64:	6020      	str	r0, [r4, #0]
        strBrightness = (String)map(brightness, -64, 64, 0, 255);
   b5a66:	23ff      	movs	r3, #255	; 0xff
   b5a68:	9300      	str	r3, [sp, #0]
   b5a6a:	2240      	movs	r2, #64	; 0x40
   b5a6c:	2300      	movs	r3, #0
   b5a6e:	f06f 013f 	mvn.w	r1, #63	; 0x3f
   b5a72:	6820      	ldr	r0, [r4, #0]
	inline unsigned int length(void) const {return len;}
   b5a74:	4d1d      	ldr	r5, [pc, #116]	; (b5aec <loop+0x724>)
	StringSumHelper(const char *p) : String(p) {}
   b5a76:	4e1e      	ldr	r6, [pc, #120]	; (b5af0 <loop+0x728>)
   b5a78:	f001 fb92 	bl	b71a0 <_Z3mapiiiii>
   b5a7c:	220a      	movs	r2, #10
   b5a7e:	4601      	mov	r1, r0
   b5a80:	a806      	add	r0, sp, #24
   b5a82:	f002 f86f 	bl	b7b64 <_ZN6StringC1Eih>
   b5a86:	a906      	add	r1, sp, #24
   b5a88:	4818      	ldr	r0, [pc, #96]	; (b5aec <loop+0x724>)
   b5a8a:	f002 f851 	bl	b7b30 <_ZN6StringaSEOS_>
   b5a8e:	a806      	add	r0, sp, #24
   b5a90:	f001 ffb8 	bl	b7a04 <_ZN6StringD1Ev>
        for (int i = 0; i < 3 - strBrightness.length(); i += 0)
   b5a94:	68ab      	ldr	r3, [r5, #8]
   b5a96:	2b03      	cmp	r3, #3
   b5a98:	d011      	beq.n	b5abe <loop+0x6f6>
   b5a9a:	4631      	mov	r1, r6
   b5a9c:	a806      	add	r0, sp, #24
   b5a9e:	f001 fffc 	bl	b7a9a <_ZN6StringC1EPK19__FlashStringHelper>
          strBrightness = "0" + strBrightness;
   b5aa2:	4629      	mov	r1, r5
   b5aa4:	a806      	add	r0, sp, #24
   b5aa6:	f002 f887 	bl	b7bb8 <_ZplRK15StringSumHelperRK6String>
   b5aaa:	4601      	mov	r1, r0
   b5aac:	4628      	mov	r0, r5
   b5aae:	f002 f825 	bl	b7afc <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b5ab2:	a806      	add	r0, sp, #24
   b5ab4:	f001 ffa6 	bl	b7a04 <_ZN6StringD1Ev>
        for (int i = 0; i < 3 - strBrightness.length(); i += 0)
   b5ab8:	e7ec      	b.n	b5a94 <loop+0x6cc>
          brightness = 64;
   b5aba:	2340      	movs	r3, #64	; 0x40
   b5abc:	e7a1      	b.n	b5a02 <loop+0x63a>
        analogWrite(generalPower, map(brightness, -64, 64, 0, 255));
   b5abe:	23ff      	movs	r3, #255	; 0xff
   b5ac0:	9300      	str	r3, [sp, #0]
   b5ac2:	6820      	ldr	r0, [r4, #0]
   b5ac4:	2300      	movs	r3, #0
   b5ac6:	2240      	movs	r2, #64	; 0x40
   b5ac8:	f06f 013f 	mvn.w	r1, #63	; 0x3f
   b5acc:	f001 fb68 	bl	b71a0 <_Z3mapiiiii>
   b5ad0:	4601      	mov	r1, r0
   b5ad2:	2006      	movs	r0, #6
}
   b5ad4:	b00b      	add	sp, #44	; 0x2c
   b5ad6:	ecbd 8b04 	vpop	{d8-d9}
   b5ada:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        analogWrite(generalPower, map(brightness, -64, 64, 0, 255));
   b5ade:	f002 be11 	b.w	b8704 <_Z11analogWritetm>
}
   b5ae2:	b00b      	add	sp, #44	; 0x2c
   b5ae4:	ecbd 8b04 	vpop	{d8-d9}
   b5ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5aec:	2003e698 	.word	0x2003e698
   b5af0:	000b8e56 	.word	0x000b8e56

000b5af4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b5af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5af8:	b083      	sub	sp, #12
   b5afa:	af00      	add	r7, sp, #0
   b5afc:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b5afe:	6800      	ldr	r0, [r0, #0]
   b5b00:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   b5b02:	4688      	mov	r8, r1
   b5b04:	4616      	mov	r6, r2
   b5b06:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b5b08:	46eb      	mov	fp, sp
   b5b0a:	f002 f9cd 	bl	b7ea8 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b5b0e:	2800      	cmp	r0, #0
   b5b10:	f000 8081 	beq.w	b5c16 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
   b5b14:	f1b8 0f1d 	cmp.w	r8, #29
   b5b18:	d804      	bhi.n	b5b24 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x30>
   b5b1a:	4b4d      	ldr	r3, [pc, #308]	; (b5c50 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15c>)
   b5b1c:	fa23 f308 	lsr.w	r3, r3, r8
   b5b20:	07db      	lsls	r3, r3, #31
   b5b22:	d402      	bmi.n	b5b2a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x36>
   b5b24:	7f63      	ldrb	r3, [r4, #29]
   b5b26:	2b01      	cmp	r3, #1
   b5b28:	d175      	bne.n	b5c16 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
    if (0 == id) {
   b5b2a:	b946      	cbnz	r6, b5b3e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x4a>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b5b2c:	8b66      	ldrh	r6, [r4, #26]
   b5b2e:	b936      	cbnz	r6, b5b3e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x4a>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b5b30:	8b23      	ldrh	r3, [r4, #24]
   b5b32:	3301      	adds	r3, #1
   b5b34:	b29b      	uxth	r3, r3
   b5b36:	2b00      	cmp	r3, #0
   b5b38:	d072      	beq.n	b5c20 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
        msgIdOut = 1;
   b5b3a:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   b5b3c:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   b5b3e:	f1a8 030c 	sub.w	r3, r8, #12
   b5b42:	2b08      	cmp	r3, #8
   b5b44:	d816      	bhi.n	b5b74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b5b46:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   b5b4a:	4293      	cmp	r3, r2
   b5b4c:	bf38      	it	cc
   b5b4e:	4613      	movcc	r3, r2
   b5b50:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b5b54:	f001 f80e 	bl	b6b74 <_Z11BlynkMillisv>
   b5b58:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   b5b5c:	2800      	cmp	r0, #0
   b5b5e:	db61      	blt.n	b5c24 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x130>
                run();
   b5b60:	2100      	movs	r1, #0
   b5b62:	4620      	mov	r0, r4
   b5b64:	f7ff fb88 	bl	b5278 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b5b68:	f001 f804 	bl	b6b74 <_Z11BlynkMillisv>
   b5b6c:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   b5b70:	2800      	cmp	r0, #0
   b5b72:	daf5      	bge.n	b5b60 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6c>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b5b74:	f1b9 0f00 	cmp.w	r9, #0
   b5b78:	d05b      	beq.n	b5c32 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   b5b7a:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
   b5b7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   b5b7e:	2a00      	cmp	r2, #0
   b5b80:	6bba      	ldr	r2, [r7, #56]	; 0x38
   b5b82:	bf08      	it	eq
   b5b84:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b5b86:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   b5b8a:	f10a 0307 	add.w	r3, sl, #7
   b5b8e:	f023 0307 	bic.w	r3, r3, #7
   b5b92:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->msg_id = htons(id);
   b5b96:	4630      	mov	r0, r6
    hdr->type = cmd;
   b5b98:	f88d 8000 	strb.w	r8, [sp]
    uint8_t buff[full_length];
   b5b9c:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->msg_id = htons(id);
   b5ba0:	f001 f90a 	bl	b6db8 <inet_htons>
    hdr->length = htons(length+length2);
   b5ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    hdr->msg_id = htons(id);
   b5ba6:	f8ad 0001 	strh.w	r0, [sp, #1]
    hdr->length = htons(length+length2);
   b5baa:	18e8      	adds	r0, r5, r3
   b5bac:	b280      	uxth	r0, r0
   b5bae:	f001 f903 	bl	b6db8 <inet_htons>
   b5bb2:	f8ad 0003 	strh.w	r0, [sp, #3]
    if (data && length) {
   b5bb6:	f1b9 0f00 	cmp.w	r9, #0
   b5bba:	d03c      	beq.n	b5c36 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
   b5bbc:	2d00      	cmp	r5, #0
   b5bbe:	d03a      	beq.n	b5c36 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
        memcpy(buff + pos, data, length);
   b5bc0:	462a      	mov	r2, r5
   b5bc2:	4649      	mov	r1, r9
   b5bc4:	f10d 0005 	add.w	r0, sp, #5
   b5bc8:	f002 ff64 	bl	b8a94 <memcpy>
        pos += length;
   b5bcc:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b5bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   b5bd0:	b13b      	cbz	r3, b5be2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
   b5bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   b5bd4:	b12b      	cbz	r3, b5be2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
        memcpy(buff + pos, data2, length2);
   b5bd6:	461a      	mov	r2, r3
   b5bd8:	687b      	ldr	r3, [r7, #4]
   b5bda:	6b79      	ldr	r1, [r7, #52]	; 0x34
   b5bdc:	4418      	add	r0, r3
   b5bde:	f002 ff59 	bl	b8a94 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b5be2:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b5be4:	4555      	cmp	r5, sl
   b5be6:	d22a      	bcs.n	b5c3e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x14a>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b5be8:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   b5bec:	687b      	ldr	r3, [r7, #4]
   b5bee:	6820      	ldr	r0, [r4, #0]
   b5bf0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b5bf4:	bf28      	it	cs
   b5bf6:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b5bfa:	1959      	adds	r1, r3, r5
   b5bfc:	f002 f807 	bl	b7c0e <_ZN9TCPClient5writeEPKhj>
   b5c00:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b5c02:	2000      	movs	r0, #0
   b5c04:	f000 ffb4 	bl	b6b70 <_Z10BlynkDelaym>
        if (w == 0) {
   b5c08:	b9be      	cbnz	r6, b5c3a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
    void disconnect() { client.stop(); }
   b5c0a:	6820      	ldr	r0, [r4, #0]
   b5c0c:	f002 fa84 	bl	b8118 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b5c10:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   b5c12:	f000 ffb3 	bl	b6b7c <BlynkNoOpCbk>
}
   b5c16:	370c      	adds	r7, #12
   b5c18:	46dd      	mov	sp, fp
   b5c1a:	46bd      	mov	sp, r7
   b5c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   b5c20:	2301      	movs	r3, #1
   b5c22:	e78a      	b.n	b5b3a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
        } else if (nesting == 0) {
   b5c24:	7f21      	ldrb	r1, [r4, #28]
   b5c26:	2900      	cmp	r1, #0
   b5c28:	d1a4      	bne.n	b5b74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
            run();
   b5c2a:	4620      	mov	r0, r4
   b5c2c:	f7ff fb24 	bl	b5278 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b5c30:	e7a0      	b.n	b5b74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b5c32:	2305      	movs	r3, #5
   b5c34:	e7a2      	b.n	b5b7c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x88>
    size_t pos = sizeof(BlynkHeader);
   b5c36:	2005      	movs	r0, #5
   b5c38:	e7c9      	b.n	b5bce <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xda>
        wlen += w;
   b5c3a:	4435      	add	r5, r6
    while (wlen < full_length) {
   b5c3c:	e7d2      	b.n	b5be4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf0>
    if (wlen != full_length) {
   b5c3e:	d003      	beq.n	b5c48 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
        internalReconnect();
   b5c40:	4620      	mov	r0, r4
   b5c42:	f7ff f8a9 	bl	b4d98 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b5c46:	e7e6      	b.n	b5c16 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
    lastActivityOut = BlynkMillis();
   b5c48:	f000 ff94 	bl	b6b74 <_Z11BlynkMillisv>
   b5c4c:	6120      	str	r0, [r4, #16]
   b5c4e:	e7e2      	b.n	b5c16 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
   b5c50:	20000045 	.word	0x20000045

000b5c54 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b5c54:	b530      	push	{r4, r5, lr}
   b5c56:	b099      	sub	sp, #100	; 0x64
        : buff((char*)addr), len(length), buff_size(buffsize)
   b5c58:	ab08      	add	r3, sp, #32
   b5c5a:	4604      	mov	r4, r0
   b5c5c:	9305      	str	r3, [sp, #20]
   b5c5e:	2500      	movs	r5, #0
   b5c60:	2340      	movs	r3, #64	; 0x40
        add(key);
   b5c62:	a805      	add	r0, sp, #20
   b5c64:	490b      	ldr	r1, [pc, #44]	; (b5c94 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x40>)
        : buff((char*)addr), len(length), buff_size(buffsize)
   b5c66:	e9cd 5306 	strd	r5, r3, [sp, #24]
        add(key);
   b5c6a:	f7ff f840 	bl	b4cee <_ZN10BlynkParam3addEPKc>
        add(val);
   b5c6e:	a805      	add	r0, sp, #20
   b5c70:	4909      	ldr	r1, [pc, #36]	; (b5c98 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x44>)
   b5c72:	f7ff f83c 	bl	b4cee <_ZN10BlynkParam3addEPKc>
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   b5c76:	9b06      	ldr	r3, [sp, #24]
   b5c78:	9302      	str	r3, [sp, #8]
   b5c7a:	9b05      	ldr	r3, [sp, #20]
   b5c7c:	9301      	str	r3, [sp, #4]
   b5c7e:	2365      	movs	r3, #101	; 0x65
   b5c80:	9300      	str	r3, [sp, #0]
   b5c82:	462a      	mov	r2, r5
   b5c84:	4b05      	ldr	r3, [pc, #20]	; (b5c9c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x48>)
   b5c86:	2111      	movs	r1, #17
   b5c88:	4620      	mov	r0, r4
   b5c8a:	f7ff ff33 	bl	b5af4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b5c8e:	b019      	add	sp, #100	; 0x64
   b5c90:	bd30      	pop	{r4, r5, pc}
   b5c92:	bf00      	nop
   b5c94:	000b8de6 	.word	0x000b8de6
   b5c98:	000b8deb 	.word	0x000b8deb
   b5c9c:	000b8e88 	.word	0x000b8e88

000b5ca0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventI6StringEEvRKT_>:
        cmd.add(property);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_PROPERTY, 0, cmd.getBuffer(), cmd.getLength(), param.getBuffer(), param.getLength());
    }

    template <typename NAME>
    void logEvent(const NAME& event_name) {
   b5ca0:	b530      	push	{r4, r5, lr}
   b5ca2:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   b5ca6:	ab08      	add	r3, sp, #32
   b5ca8:	2400      	movs	r4, #0
   b5caa:	4605      	mov	r5, r0
   b5cac:	9305      	str	r3, [sp, #20]
    add(str.c_str());
   b5cae:	a805      	add	r0, sp, #20
        : buff((char*)addr), len(length), buff_size(buffsize)
   b5cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    add(str.c_str());
   b5cb4:	6809      	ldr	r1, [r1, #0]
        : buff((char*)addr), len(length), buff_size(buffsize)
   b5cb6:	e9cd 4306 	strd	r4, r3, [sp, #24]
    add(str.c_str());
   b5cba:	f7ff f818 	bl	b4cee <_ZN10BlynkParam3addEPKc>
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(event_name);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_EVENT_LOG, 0, cmd.getBuffer(), cmd.getLength()-1);
   b5cbe:	9b06      	ldr	r3, [sp, #24]
   b5cc0:	3b01      	subs	r3, #1
   b5cc2:	9300      	str	r3, [sp, #0]
   b5cc4:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5cc8:	9b05      	ldr	r3, [sp, #20]
   b5cca:	4622      	mov	r2, r4
   b5ccc:	2140      	movs	r1, #64	; 0x40
   b5cce:	4628      	mov	r0, r5
   b5cd0:	f7ff ff10 	bl	b5af4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b5cd4:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   b5cd8:	bd30      	pop	{r4, r5, pc}
	...

000b5cdc <_Z24updateAfterShakesCountedv>:
{
   b5cdc:	b538      	push	{r3, r4, r5, lr}
  if (!changingColor)
   b5cde:	4c2b      	ldr	r4, [pc, #172]	; (b5d8c <_Z24updateAfterShakesCountedv+0xb0>)
   b5ce0:	4d2b      	ldr	r5, [pc, #172]	; (b5d90 <_Z24updateAfterShakesCountedv+0xb4>)
   b5ce2:	7822      	ldrb	r2, [r4, #0]
   b5ce4:	2a00      	cmp	r2, #0
   b5ce6:	d145      	bne.n	b5d74 <_Z24updateAfterShakesCountedv+0x98>
    switch (timesShaked % 4)
   b5ce8:	682b      	ldr	r3, [r5, #0]
   b5cea:	4259      	negs	r1, r3
   b5cec:	f001 0103 	and.w	r1, r1, #3
   b5cf0:	f003 0303 	and.w	r3, r3, #3
   b5cf4:	bf58      	it	pl
   b5cf6:	424b      	negpl	r3, r1
   b5cf8:	2b03      	cmp	r3, #3
   b5cfa:	d81c      	bhi.n	b5d36 <_Z24updateAfterShakesCountedv+0x5a>
   b5cfc:	e8df f003 	tbb	[pc, r3]
   b5d00:	2a1e022a 	.word	0x2a1e022a
      isLightOn = !isLightOn;
   b5d04:	4c23      	ldr	r4, [pc, #140]	; (b5d94 <_Z24updateAfterShakesCountedv+0xb8>)
      changingBrightness = false;
   b5d06:	4b24      	ldr	r3, [pc, #144]	; (b5d98 <_Z24updateAfterShakesCountedv+0xbc>)
      Blynk.logEvent(blynkEvents[isLightOn]);
   b5d08:	4924      	ldr	r1, [pc, #144]	; (b5d9c <_Z24updateAfterShakesCountedv+0xc0>)
      changingBrightness = false;
   b5d0a:	701a      	strb	r2, [r3, #0]
      isLightOn = !isLightOn;
   b5d0c:	7823      	ldrb	r3, [r4, #0]
      Blynk.logEvent(blynkEvents[isLightOn]);
   b5d0e:	4824      	ldr	r0, [pc, #144]	; (b5da0 <_Z24updateAfterShakesCountedv+0xc4>)
      isLightOn = !isLightOn;
   b5d10:	f083 0301 	eor.w	r3, r3, #1
      Blynk.logEvent(blynkEvents[isLightOn]);
   b5d14:	eb01 1103 	add.w	r1, r1, r3, lsl #4
      isLightOn = !isLightOn;
   b5d18:	7023      	strb	r3, [r4, #0]
      Blynk.logEvent(blynkEvents[isLightOn]);
   b5d1a:	f7ff ffc1 	bl	b5ca0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventI6StringEEvRKT_>
      digitalWrite(redLedPin, isLightOn);
   b5d1e:	7821      	ldrb	r1, [r4, #0]
   b5d20:	2003      	movs	r0, #3
   b5d22:	f002 fcac 	bl	b867e <digitalWrite>
      digitalWrite(greenLedPin, HIGH);
   b5d26:	2101      	movs	r1, #1
   b5d28:	2004      	movs	r0, #4
   b5d2a:	f002 fca8 	bl	b867e <digitalWrite>
      digitalWrite(blueLedPin, HIGH);
   b5d2e:	2101      	movs	r1, #1
   b5d30:	2005      	movs	r0, #5
   b5d32:	f002 fca4 	bl	b867e <digitalWrite>
  timesShaked = 0;
   b5d36:	2300      	movs	r3, #0
   b5d38:	602b      	str	r3, [r5, #0]
}
   b5d3a:	bd38      	pop	{r3, r4, r5, pc}
      changingBrightness = false;
   b5d3c:	4b16      	ldr	r3, [pc, #88]	; (b5d98 <_Z24updateAfterShakesCountedv+0xbc>)
   b5d3e:	701a      	strb	r2, [r3, #0]
      changingColor = true;
   b5d40:	2301      	movs	r3, #1
   b5d42:	7023      	strb	r3, [r4, #0]
      colorIndex = 0;
   b5d44:	4b17      	ldr	r3, [pc, #92]	; (b5da4 <_Z24updateAfterShakesCountedv+0xc8>)
   b5d46:	601a      	str	r2, [r3, #0]
      speedOfArgon[0] = 0.0;
   b5d48:	4b17      	ldr	r3, [pc, #92]	; (b5da8 <_Z24updateAfterShakesCountedv+0xcc>)
   b5d4a:	2200      	movs	r2, #0
   b5d4c:	601a      	str	r2, [r3, #0]
      speedOfArgon[1] = 0.0;
   b5d4e:	605a      	str	r2, [r3, #4]
      speedOfArgon[2] = 0.0;
   b5d50:	609a      	str	r2, [r3, #8]
      break;
   b5d52:	e7f0      	b.n	b5d36 <_Z24updateAfterShakesCountedv+0x5a>
      digitalWrite(blueLedPin, LOW);
   b5d54:	2100      	movs	r1, #0
   b5d56:	2005      	movs	r0, #5
   b5d58:	f002 fc91 	bl	b867e <digitalWrite>
      digitalWrite(greenLedPin, HIGH);
   b5d5c:	2101      	movs	r1, #1
   b5d5e:	2004      	movs	r0, #4
   b5d60:	f002 fc8d 	bl	b867e <digitalWrite>
      digitalWrite(redLedPin, HIGH);
   b5d64:	2101      	movs	r1, #1
   b5d66:	2003      	movs	r0, #3
   b5d68:	f002 fc89 	bl	b867e <digitalWrite>
      changingBrightness = true;
   b5d6c:	4b0a      	ldr	r3, [pc, #40]	; (b5d98 <_Z24updateAfterShakesCountedv+0xbc>)
   b5d6e:	2201      	movs	r2, #1
   b5d70:	701a      	strb	r2, [r3, #0]
      break;
   b5d72:	e7e0      	b.n	b5d36 <_Z24updateAfterShakesCountedv+0x5a>
    setColor(red, green, blue);
   b5d74:	4b0d      	ldr	r3, [pc, #52]	; (b5dac <_Z24updateAfterShakesCountedv+0xd0>)
   b5d76:	681a      	ldr	r2, [r3, #0]
   b5d78:	4b0d      	ldr	r3, [pc, #52]	; (b5db0 <_Z24updateAfterShakesCountedv+0xd4>)
   b5d7a:	6819      	ldr	r1, [r3, #0]
   b5d7c:	4b0d      	ldr	r3, [pc, #52]	; (b5db4 <_Z24updateAfterShakesCountedv+0xd8>)
   b5d7e:	6818      	ldr	r0, [r3, #0]
   b5d80:	f7fe fff6 	bl	b4d70 <_Z8setColoriii>
    changingColor = false;
   b5d84:	2300      	movs	r3, #0
   b5d86:	7023      	strb	r3, [r4, #0]
   b5d88:	e7d5      	b.n	b5d36 <_Z24updateAfterShakesCountedv+0x5a>
   b5d8a:	bf00      	nop
   b5d8c:	2003e539 	.word	0x2003e539
   b5d90:	2003e6c8 	.word	0x2003e6c8
   b5d94:	2003e5c5 	.word	0x2003e5c5
   b5d98:	2003e538 	.word	0x2003e538
   b5d9c:	2003e518 	.word	0x2003e518
   b5da0:	2003e48c 	.word	0x2003e48c
   b5da4:	2003e59c 	.word	0x2003e59c
   b5da8:	2003e67c 	.word	0x2003e67c
   b5dac:	2003e514 	.word	0x2003e514
   b5db0:	2003e5bc 	.word	0x2003e5bc
   b5db4:	2003e400 	.word	0x2003e400

000b5db8 <setup>:
{
   b5db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  Serial.begin(9600);
   b5dba:	f002 fac5 	bl	b8348 <_Z16_fetch_usbserialv>
   b5dbe:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5dc2:	f002 fab5 	bl	b8330 <_ZN9USBSerial5beginEl>
  config.setAccelMode(LIS3DH::RATE_100_HZ);
   b5dc6:	2150      	movs	r1, #80	; 0x50
   b5dc8:	4835      	ldr	r0, [pc, #212]	; (b5ea0 <setup+0xe8>)
        this->authkey = auth;
   b5dca:	4c36      	ldr	r4, [pc, #216]	; (b5ea4 <setup+0xec>)
   b5dcc:	f000 f9cf 	bl	b616e <_ZN12LIS3DHConfig12setAccelModeEh>
  accel.setup(config);
   b5dd0:	4933      	ldr	r1, [pc, #204]	; (b5ea0 <setup+0xe8>)
   b5dd2:	4835      	ldr	r0, [pc, #212]	; (b5ea8 <setup+0xf0>)
   b5dd4:	f000 fa2e 	bl	b6234 <_ZN6LIS3DH5setupER12LIS3DHConfig>
  pinMode(redLedPin, OUTPUT);
   b5dd8:	2101      	movs	r1, #1
   b5dda:	2003      	movs	r0, #3
   b5ddc:	f002 fc3e 	bl	b865c <pinMode>
  pinMode(greenLedPin, OUTPUT);
   b5de0:	2101      	movs	r1, #1
   b5de2:	2004      	movs	r0, #4
   b5de4:	f002 fc3a 	bl	b865c <pinMode>
  pinMode(blueLedPin, OUTPUT);
   b5de8:	2101      	movs	r1, #1
   b5dea:	2005      	movs	r0, #5
   b5dec:	f002 fc36 	bl	b865c <pinMode>
  pinMode(generalPower, OUTPUT);
   b5df0:	2101      	movs	r1, #1
   b5df2:	2006      	movs	r0, #6
   b5df4:	f002 fc32 	bl	b865c <pinMode>
  analogWrite(generalPower, map(brightness, -64, 64, 0, 255));
   b5df8:	23ff      	movs	r3, #255	; 0xff
   b5dfa:	482c      	ldr	r0, [pc, #176]	; (b5eac <setup+0xf4>)
   b5dfc:	9300      	str	r3, [sp, #0]
   b5dfe:	2240      	movs	r2, #64	; 0x40
   b5e00:	2300      	movs	r3, #0
   b5e02:	f06f 013f 	mvn.w	r1, #63	; 0x3f
   b5e06:	6800      	ldr	r0, [r0, #0]
   b5e08:	f001 f9ca 	bl	b71a0 <_Z3mapiiiii>
   b5e0c:	4601      	mov	r1, r0
   b5e0e:	2006      	movs	r0, #6
   b5e10:	f002 fc78 	bl	b8704 <_Z11analogWritetm>
  digitalWrite(redLedPin, HIGH);
   b5e14:	2101      	movs	r1, #1
   b5e16:	2003      	movs	r0, #3
   b5e18:	f002 fc31 	bl	b867e <digitalWrite>
  digitalWrite(greenLedPin, HIGH);
   b5e1c:	2101      	movs	r1, #1
   b5e1e:	2004      	movs	r0, #4
   b5e20:	f002 fc2d 	bl	b867e <digitalWrite>
  digitalWrite(blueLedPin, HIGH);
   b5e24:	2101      	movs	r1, #1
   b5e26:	2005      	movs	r0, #5
   b5e28:	f002 fc29 	bl	b867e <digitalWrite>
  publishMQTT.start();
   b5e2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b5e30:	481f      	ldr	r0, [pc, #124]	; (b5eb0 <setup+0xf8>)
   b5e32:	f7fe fe79 	bl	b4b28 <_ZN5Timer5startEj.isra.0>

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b5e36:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5e3a:	f000 fe99 	bl	b6b70 <_Z10BlynkDelaym>
   b5e3e:	4b1d      	ldr	r3, [pc, #116]	; (b5eb4 <setup+0xfc>)
   b5e40:	6063      	str	r3, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b5e42:	f000 fe97 	bl	b6b74 <_Z11BlynkMillisv>
   b5e46:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
        this->conn.begin(domain, port);
   b5e4a:	6823      	ldr	r3, [r4, #0]
        domain = d;
   b5e4c:	4a1a      	ldr	r2, [pc, #104]	; (b5eb8 <setup+0x100>)
   b5e4e:	635a      	str	r2, [r3, #52]	; 0x34
   b5e50:	3808      	subs	r0, #8
   b5e52:	e9c4 0003 	strd	r0, r0, [r4, #12]
        port = p;
   b5e56:	2250      	movs	r2, #80	; 0x50
   b5e58:	6160      	str	r0, [r4, #20]
   b5e5a:	871a      	strh	r2, [r3, #56]	; 0x38
        state = CONNECTING;
   b5e5c:	2600      	movs	r6, #0
        while ((state != CONNECTED) &&
   b5e5e:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b5e62:	6820      	ldr	r0, [r4, #0]
   b5e64:	f002 f958 	bl	b8118 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b5e68:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   b5e6a:	f000 fe83 	bl	b6b74 <_Z11BlynkMillisv>
   b5e6e:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   b5e70:	7f63      	ldrb	r3, [r4, #29]
   b5e72:	2b01      	cmp	r3, #1
   b5e74:	d00c      	beq.n	b5e90 <setup+0xd8>
               (BlynkMillis() - started < timeout))
   b5e76:	f000 fe7d 	bl	b6b74 <_Z11BlynkMillisv>
   b5e7a:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   b5e7c:	42b8      	cmp	r0, r7
   b5e7e:	d804      	bhi.n	b5e8a <setup+0xd2>
            run();
   b5e80:	2100      	movs	r1, #0
   b5e82:	4620      	mov	r0, r4
   b5e84:	f7ff f9f8 	bl	b5278 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b5e88:	e7f2      	b.n	b5e70 <setup+0xb8>
        config(auth, domain, port);
        while(this->connect() != true) {}
   b5e8a:	7f63      	ldrb	r3, [r4, #29]
   b5e8c:	2b01      	cmp	r3, #1
   b5e8e:	d1e8      	bne.n	b5e62 <setup+0xaa>
  client.subscribe("gestureLamp2");
   b5e90:	490a      	ldr	r1, [pc, #40]	; (b5ebc <setup+0x104>)
   b5e92:	480b      	ldr	r0, [pc, #44]	; (b5ec0 <setup+0x108>)
}
   b5e94:	b003      	add	sp, #12
   b5e96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  client.subscribe("gestureLamp2");
   b5e9a:	f000 be66 	b.w	b6b6a <_ZN4MQTT9subscribeEPKc>
   b5e9e:	bf00      	nop
   b5ea0:	2003e5a0 	.word	0x2003e5a0
   b5ea4:	2003e48c 	.word	0x2003e48c
   b5ea8:	2003e4e8 	.word	0x2003e4e8
   b5eac:	2003e3f8 	.word	0x2003e3f8
   b5eb0:	2003e61c 	.word	0x2003e61c
   b5eb4:	000b8df9 	.word	0x000b8df9
   b5eb8:	000b8e1a 	.word	0x000b8e1a
   b5ebc:	000b8dcd 	.word	0x000b8dcd
   b5ec0:	2003e53c 	.word	0x2003e53c

000b5ec4 <_GLOBAL__sub_I_Blynk>:
   b5ec4:	b570      	push	{r4, r5, r6, lr}
        : domain(NULL), port(0)
   b5ec6:	4d51      	ldr	r5, [pc, #324]	; (b600c <_GLOBAL__sub_I_Blynk+0x148>)
   b5ec8:	b088      	sub	sp, #32
   b5eca:	4628      	mov	r0, r5
   b5ecc:	f002 f96e 	bl	b81ac <_ZN9TCPClientC1Ev>
   b5ed0:	f105 001c 	add.w	r0, r5, #28
   b5ed4:	f001 fa3e 	bl	b7354 <_ZN9IPAddressC1Ev>
        , state(CONNECTING)
   b5ed8:	4b4d      	ldr	r3, [pc, #308]	; (b6010 <_GLOBAL__sub_I_Blynk+0x14c>)
   b5eda:	2400      	movs	r4, #0
   b5edc:	e9c3 5400 	strd	r5, r4, [r3]
   b5ee0:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b5ee4:	e9c3 4404 	strd	r4, r4, [r3, #16]
   b5ee8:	619c      	str	r4, [r3, #24]
   b5eea:	839c      	strh	r4, [r3, #28]
   b5eec:	636c      	str	r4, [r5, #52]	; 0x34
   b5eee:	872c      	strh	r4, [r5, #56]	; 0x38
SYSTEM_THREAD(ENABLED);
   b5ef0:	4621      	mov	r1, r4
   b5ef2:	2001      	movs	r0, #1
   b5ef4:	f001 f880 	bl	b6ff8 <system_thread_set_state>
String blynkEvents[2] = {"lighton", "lightoff"};
   b5ef8:	4946      	ldr	r1, [pc, #280]	; (b6014 <_GLOBAL__sub_I_Blynk+0x150>)
   b5efa:	4847      	ldr	r0, [pc, #284]	; (b6018 <_GLOBAL__sub_I_Blynk+0x154>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5efc:	4d47      	ldr	r5, [pc, #284]	; (b601c <_GLOBAL__sub_I_Blynk+0x158>)
   b5efe:	f001 fdcc 	bl	b7a9a <_ZN6StringC1EPK19__FlashStringHelper>
   b5f02:	4947      	ldr	r1, [pc, #284]	; (b6020 <_GLOBAL__sub_I_Blynk+0x15c>)
   b5f04:	4847      	ldr	r0, [pc, #284]	; (b6024 <_GLOBAL__sub_I_Blynk+0x160>)
   b5f06:	f001 fdc8 	bl	b7a9a <_ZN6StringC1EPK19__FlashStringHelper>
MQTT client("lab.thewcl.com", 1883, callback);
   b5f0a:	4b47      	ldr	r3, [pc, #284]	; (b6028 <_GLOBAL__sub_I_Blynk+0x164>)
   b5f0c:	4947      	ldr	r1, [pc, #284]	; (b602c <_GLOBAL__sub_I_Blynk+0x168>)
   b5f0e:	9400      	str	r4, [sp, #0]
   b5f10:	f240 725b 	movw	r2, #1883	; 0x75b

#ifdef SYSTEM_VERSION_v151RC1
	// In 1.5.0-rc.1, SPI interfaces are handled differently. You can still pass in SPI, SPI1, etc.
	// but the code to handle it varies
	LIS3DHSPI(::particle::SpiProxy<HAL_SPI_INTERFACE1> &spiProxy, int ss = A2, int intPin = -1) : 
		LIS3DH(intPin), spi(spiProxy.instance()), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0){};
   b5f14:	4c46      	ldr	r4, [pc, #280]	; (b6030 <_GLOBAL__sub_I_Blynk+0x16c>)
   b5f16:	4847      	ldr	r0, [pc, #284]	; (b6034 <_GLOBAL__sub_I_Blynk+0x170>)
   b5f18:	f000 fa2c 	bl	b6374 <_ZN4MQTTC1EPKctPFvPcPhjEb>
LIS3DHConfig config;
   b5f1c:	4846      	ldr	r0, [pc, #280]	; (b6038 <_GLOBAL__sub_I_Blynk+0x174>)
   b5f1e:	f000 f919 	bl	b6154 <_ZN12LIS3DHConfigC1Ev>
   b5f22:	2108      	movs	r1, #8
   b5f24:	4620      	mov	r0, r4
   b5f26:	f000 f92d 	bl	b6184 <_ZN6LIS3DHC1Ei>
   b5f2a:	4b44      	ldr	r3, [pc, #272]	; (b603c <_GLOBAL__sub_I_Blynk+0x178>)
   b5f2c:	6023      	str	r3, [r4, #0]
   b5f2e:	7829      	ldrb	r1, [r5, #0]
   b5f30:	f3bf 8f5b 	dmb	ish
   b5f34:	f011 0101 	ands.w	r1, r1, #1
   b5f38:	d10b      	bne.n	b5f52 <_GLOBAL__sub_I_Blynk+0x8e>
   b5f3a:	4628      	mov	r0, r5
   b5f3c:	9103      	str	r1, [sp, #12]
   b5f3e:	f7fe fd85 	bl	b4a4c <__cxa_guard_acquire>
   b5f42:	9903      	ldr	r1, [sp, #12]
   b5f44:	b128      	cbz	r0, b5f52 <_GLOBAL__sub_I_Blynk+0x8e>
   b5f46:	483e      	ldr	r0, [pc, #248]	; (b6040 <_GLOBAL__sub_I_Blynk+0x17c>)
   b5f48:	f001 fc86 	bl	b7858 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5f4c:	4628      	mov	r0, r5
   b5f4e:	f7fe fd82 	bl	b4a56 <__cxa_guard_release>
   b5f52:	4b3b      	ldr	r3, [pc, #236]	; (b6040 <_GLOBAL__sub_I_Blynk+0x17c>)
   b5f54:	60e3      	str	r3, [r4, #12]
   b5f56:	2302      	movs	r3, #2
   b5f58:	6123      	str	r3, [r4, #16]
      dataMode_{dataMode}
   b5f5a:	4b3a      	ldr	r3, [pc, #232]	; (b6044 <_GLOBAL__sub_I_Blynk+0x180>)
   b5f5c:	61a3      	str	r3, [r4, #24]
   b5f5e:	4b3a      	ldr	r3, [pc, #232]	; (b6048 <_GLOBAL__sub_I_Blynk+0x184>)
   b5f60:	6223      	str	r3, [r4, #32]
   b5f62:	2600      	movs	r6, #0
   b5f64:	2301      	movs	r3, #1
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5f66:	4a39      	ldr	r2, [pc, #228]	; (b604c <_GLOBAL__sub_I_Blynk+0x188>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5f68:	4d39      	ldr	r5, [pc, #228]	; (b6050 <_GLOBAL__sub_I_Blynk+0x18c>)
   b5f6a:	84a3      	strh	r3, [r4, #36]	; 0x24
   b5f6c:	7526      	strb	r6, [r4, #20]
   b5f6e:	7726      	strb	r6, [r4, #28]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5f70:	9204      	str	r2, [sp, #16]
	    _M_manager = &_My_handler::_M_manager;
   b5f72:	4c38      	ldr	r4, [pc, #224]	; (b6054 <_GLOBAL__sub_I_Blynk+0x190>)
Timer readyToUpdateTimer(500, readyToUpdateFunc, true);
   b5f74:	4838      	ldr	r0, [pc, #224]	; (b6058 <_GLOBAL__sub_I_Blynk+0x194>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5f76:	9507      	str	r5, [sp, #28]
   b5f78:	aa04      	add	r2, sp, #16
   b5f7a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	    _M_manager = &_My_handler::_M_manager;
   b5f7e:	9406      	str	r4, [sp, #24]
   b5f80:	f7fe fe6c 	bl	b4c5c <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5f84:	a804      	add	r0, sp, #16
   b5f86:	f7fe fe2b 	bl	b4be0 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5f8a:	4a34      	ldr	r2, [pc, #208]	; (b605c <_GLOBAL__sub_I_Blynk+0x198>)
   b5f8c:	9204      	str	r2, [sp, #16]
Timer ledOFF(500, previouslyShakedTrue, true);
   b5f8e:	2301      	movs	r3, #1
   b5f90:	aa04      	add	r2, sp, #16
   b5f92:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   b5f96:	4832      	ldr	r0, [pc, #200]	; (b6060 <_GLOBAL__sub_I_Blynk+0x19c>)
	    _M_manager = &_My_handler::_M_manager;
   b5f98:	e9cd 4506 	strd	r4, r5, [sp, #24]
   b5f9c:	f7fe fe5e 	bl	b4c5c <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5fa0:	a804      	add	r0, sp, #16
   b5fa2:	f7fe fe1d 	bl	b4be0 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5fa6:	4a2f      	ldr	r2, [pc, #188]	; (b6064 <_GLOBAL__sub_I_Blynk+0x1a0>)
   b5fa8:	9204      	str	r2, [sp, #16]
Timer resettimesShaked(1000, updateAfterShakesCounted, true);
   b5faa:	2301      	movs	r3, #1
   b5fac:	aa04      	add	r2, sp, #16
   b5fae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5fb2:	482d      	ldr	r0, [pc, #180]	; (b6068 <_GLOBAL__sub_I_Blynk+0x1a4>)
	    _M_manager = &_My_handler::_M_manager;
   b5fb4:	e9cd 4506 	strd	r4, r5, [sp, #24]
   b5fb8:	f7fe fe50 	bl	b4c5c <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5fbc:	a804      	add	r0, sp, #16
   b5fbe:	f7fe fe0f 	bl	b4be0 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5fc2:	4b2a      	ldr	r3, [pc, #168]	; (b606c <_GLOBAL__sub_I_Blynk+0x1a8>)
   b5fc4:	9304      	str	r3, [sp, #16]
Timer publishMQTT(2000, publishToMQTT, false);
   b5fc6:	aa04      	add	r2, sp, #16
   b5fc8:	4633      	mov	r3, r6
   b5fca:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b5fce:	4828      	ldr	r0, [pc, #160]	; (b6070 <_GLOBAL__sub_I_Blynk+0x1ac>)
	    _M_manager = &_My_handler::_M_manager;
   b5fd0:	e9cd 4506 	strd	r4, r5, [sp, #24]
   b5fd4:	f7fe fe42 	bl	b4c5c <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5fd8:	a804      	add	r0, sp, #16
   b5fda:	f7fe fe01 	bl	b4be0 <_ZNSt14_Function_baseD1Ev>
String strRed = "255";
   b5fde:	4925      	ldr	r1, [pc, #148]	; (b6074 <_GLOBAL__sub_I_Blynk+0x1b0>)
   b5fe0:	4825      	ldr	r0, [pc, #148]	; (b6078 <_GLOBAL__sub_I_Blynk+0x1b4>)
   b5fe2:	f001 fd5a 	bl	b7a9a <_ZN6StringC1EPK19__FlashStringHelper>
String strGreen = "000";
   b5fe6:	4925      	ldr	r1, [pc, #148]	; (b607c <_GLOBAL__sub_I_Blynk+0x1b8>)
   b5fe8:	4825      	ldr	r0, [pc, #148]	; (b6080 <_GLOBAL__sub_I_Blynk+0x1bc>)
   b5fea:	f001 fd56 	bl	b7a9a <_ZN6StringC1EPK19__FlashStringHelper>
String strBlue = "000";
   b5fee:	4923      	ldr	r1, [pc, #140]	; (b607c <_GLOBAL__sub_I_Blynk+0x1b8>)
   b5ff0:	4824      	ldr	r0, [pc, #144]	; (b6084 <_GLOBAL__sub_I_Blynk+0x1c0>)
   b5ff2:	f001 fd52 	bl	b7a9a <_ZN6StringC1EPK19__FlashStringHelper>
String strBrightness = "255";
   b5ff6:	491f      	ldr	r1, [pc, #124]	; (b6074 <_GLOBAL__sub_I_Blynk+0x1b0>)
   b5ff8:	4823      	ldr	r0, [pc, #140]	; (b6088 <_GLOBAL__sub_I_Blynk+0x1c4>)
   b5ffa:	f001 fd4e 	bl	b7a9a <_ZN6StringC1EPK19__FlashStringHelper>
String data = "0000000000000";
   b5ffe:	4923      	ldr	r1, [pc, #140]	; (b608c <_GLOBAL__sub_I_Blynk+0x1c8>)
   b6000:	4823      	ldr	r0, [pc, #140]	; (b6090 <_GLOBAL__sub_I_Blynk+0x1cc>)
   b6002:	b008      	add	sp, #32
   b6004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
String data = "0000000000000";
   b6008:	f001 bd47 	b.w	b7a9a <_ZN6StringC1EPK19__FlashStringHelper>
   b600c:	2003e4ac 	.word	0x2003e4ac
   b6010:	2003e48c 	.word	0x2003e48c
   b6014:	000b8e26 	.word	0x000b8e26
   b6018:	2003e518 	.word	0x2003e518
   b601c:	2003e480 	.word	0x2003e480
   b6020:	000b8e2e 	.word	0x000b8e2e
   b6024:	2003e528 	.word	0x2003e528
   b6028:	000b4a85 	.word	0x000b4a85
   b602c:	000b8e37 	.word	0x000b8e37
   b6030:	2003e4e8 	.word	0x2003e4e8
   b6034:	2003e53c 	.word	0x2003e53c
   b6038:	2003e5a0 	.word	0x2003e5a0
   b603c:	000b8f24 	.word	0x000b8f24
   b6040:	2003e484 	.word	0x2003e484
   b6044:	000b8e60 	.word	0x000b8e60
   b6048:	00989680 	.word	0x00989680
   b604c:	000b4a61 	.word	0x000b4a61
   b6050:	000b4b25 	.word	0x000b4b25
   b6054:	000b4b11 	.word	0x000b4b11
   b6058:	2003e63c 	.word	0x2003e63c
   b605c:	000b4a6d 	.word	0x000b4a6d
   b6060:	2003e5c8 	.word	0x2003e5c8
   b6064:	000b5cdd 	.word	0x000b5cdd
   b6068:	2003e658 	.word	0x2003e658
   b606c:	000b4a79 	.word	0x000b4a79
   b6070:	2003e61c 	.word	0x2003e61c
   b6074:	000b8e46 	.word	0x000b8e46
   b6078:	2003e6b8 	.word	0x2003e6b8
   b607c:	000b8e54 	.word	0x000b8e54
   b6080:	2003e6a8 	.word	0x2003e6a8
   b6084:	2003e688 	.word	0x2003e688
   b6088:	2003e698 	.word	0x2003e698
   b608c:	000b8e4a 	.word	0x000b8e4a
   b6090:	2003e5ac 	.word	0x2003e5ac

000b6094 <_ZN9LIS3DHSPID1Ev>:

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
}
   b6094:	4770      	bx	lr

000b6096 <_ZN9LIS3DHSPID0Ev>:
LIS3DHSPI::~LIS3DHSPI() {
   b6096:	b510      	push	{r4, lr}
}
   b6098:	2128      	movs	r1, #40	; 0x28
LIS3DHSPI::~LIS3DHSPI() {
   b609a:	4604      	mov	r4, r0
}
   b609c:	f7fe fcc7 	bl	b4a2e <_ZdlPvj>
   b60a0:	4620      	mov	r0, r4
   b60a2:	bd10      	pop	{r4, pc}

000b60a4 <_ZN9LIS3DHSPI16beginTransactionEv>:

void LIS3DHSPI::spiSetup() {
	// No longer used; SPI transactions are always used now
}

void LIS3DHSPI::beginTransaction() {
   b60a4:	b510      	push	{r4, lr}
   b60a6:	4604      	mov	r4, r0
	spi.beginTransaction(spiSettings);
   b60a8:	f100 0118 	add.w	r1, r0, #24
   b60ac:	68c0      	ldr	r0, [r0, #12]
   b60ae:	f001 fc0b 	bl	b78c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

	digitalWrite(ss, LOW);
   b60b2:	8a20      	ldrh	r0, [r4, #16]
   b60b4:	2100      	movs	r1, #0
}
   b60b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(ss, LOW);
   b60ba:	f002 bae0 	b.w	b867e <digitalWrite>

000b60be <_ZN9LIS3DHSPI14endTransactionEv>:

void LIS3DHSPI::endTransaction() {
   b60be:	b510      	push	{r4, lr}
   b60c0:	4604      	mov	r4, r0
	digitalWrite(ss, HIGH);
   b60c2:	2101      	movs	r1, #1
   b60c4:	8a00      	ldrh	r0, [r0, #16]
   b60c6:	f002 fada 	bl	b867e <digitalWrite>

	spi.endTransaction();
   b60ca:	68e0      	ldr	r0, [r4, #12]
}
   b60cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi.endTransaction();
   b60d0:	f001 bbe0 	b.w	b7894 <_ZN8SPIClass14endTransactionEv>

000b60d4 <_ZN9LIS3DHSPI8readDataEhPhj>:

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   b60d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b60d6:	461e      	mov	r6, r3
	beginTransaction();
   b60d8:	6803      	ldr	r3, [r0, #0]
   b60da:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   b60dc:	460f      	mov	r7, r1
   b60de:	4614      	mov	r4, r2
   b60e0:	4605      	mov	r5, r0
	beginTransaction();
   b60e2:	4798      	blx	r3

	if (numBytes > 1) {
   b60e4:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   b60e6:	bf88      	it	hi
   b60e8:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(SPI_READ | addr);
   b60ec:	68e8      	ldr	r0, [r5, #12]
   b60ee:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b60f2:	f001 fc57 	bl	b79a4 <_ZN8SPIClass8transferEh>

	for(size_t ii = 0; ii < numBytes; ii++) {
   b60f6:	4426      	add	r6, r4
   b60f8:	42b4      	cmp	r4, r6
   b60fa:	d006      	beq.n	b610a <_ZN9LIS3DHSPI8readDataEhPhj+0x36>
		buf[ii] = spi.transfer(0);
   b60fc:	68e8      	ldr	r0, [r5, #12]
   b60fe:	2100      	movs	r1, #0
   b6100:	f001 fc50 	bl	b79a4 <_ZN8SPIClass8transferEh>
   b6104:	f804 0b01 	strb.w	r0, [r4], #1
	for(size_t ii = 0; ii < numBytes; ii++) {
   b6108:	e7f6      	b.n	b60f8 <_ZN9LIS3DHSPI8readDataEhPhj+0x24>
	}

	endTransaction();
   b610a:	682b      	ldr	r3, [r5, #0]
   b610c:	4628      	mov	r0, r5
   b610e:	699b      	ldr	r3, [r3, #24]
   b6110:	4798      	blx	r3

	return true;
}
   b6112:	2001      	movs	r0, #1
   b6114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6116 <_ZN9LIS3DHSPI9writeDataEhPKhj>:

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   b6116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6118:	461e      	mov	r6, r3
	beginTransaction();
   b611a:	6803      	ldr	r3, [r0, #0]
   b611c:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   b611e:	460f      	mov	r7, r1
   b6120:	4614      	mov	r4, r2
   b6122:	4605      	mov	r5, r0
	beginTransaction();
   b6124:	4798      	blx	r3

	if (numBytes > 1) {
   b6126:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   b6128:	bf88      	it	hi
   b612a:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(addr);
   b612e:	68e8      	ldr	r0, [r5, #12]
   b6130:	4639      	mov	r1, r7
   b6132:	f001 fc37 	bl	b79a4 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   b6136:	4426      	add	r6, r4
   b6138:	42b4      	cmp	r4, r6
   b613a:	d005      	beq.n	b6148 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x32>
		spi.transfer(buf[ii]);
   b613c:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6140:	68e8      	ldr	r0, [r5, #12]
   b6142:	f001 fc2f 	bl	b79a4 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   b6146:	e7f7      	b.n	b6138 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x22>
	}

	endTransaction();
   b6148:	682b      	ldr	r3, [r5, #0]
   b614a:	4628      	mov	r0, r5
   b614c:	699b      	ldr	r3, [r3, #24]
   b614e:	4798      	blx	r3

	return true;
}
   b6150:	2001      	movs	r0, #1
   b6152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6154 <_ZN12LIS3DHConfigC1Ev>:
LIS3DHConfig::LIS3DHConfig() {
   b6154:	2200      	movs	r2, #0
   b6156:	7002      	strb	r2, [r0, #0]
   b6158:	7042      	strb	r2, [r0, #1]
   b615a:	7082      	strb	r2, [r0, #2]
   b615c:	70c2      	strb	r2, [r0, #3]
   b615e:	7102      	strb	r2, [r0, #4]
   b6160:	7142      	strb	r2, [r0, #5]
   b6162:	7182      	strb	r2, [r0, #6]
   b6164:	71c2      	strb	r2, [r0, #7]
   b6166:	7202      	strb	r2, [r0, #8]
   b6168:	7242      	strb	r2, [r0, #9]
   b616a:	7282      	strb	r2, [r0, #10]
}
   b616c:	4770      	bx	lr

000b616e <_ZN12LIS3DHConfig12setAccelModeEh>:
	reg2 = reg3 = reg5 = 0;
   b616e:	2200      	movs	r2, #0
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
   b6170:	f041 0107 	orr.w	r1, r1, #7
   b6174:	7001      	strb	r1, [r0, #0]
	reg2 = reg3 = reg5 = 0;
   b6176:	7102      	strb	r2, [r0, #4]
   b6178:	7082      	strb	r2, [r0, #2]
   b617a:	7042      	strb	r2, [r0, #1]
	int1_ths = 0;
   b617c:	71c2      	strb	r2, [r0, #7]
	int1_cfg = 0;
   b617e:	7242      	strb	r2, [r0, #9]
}
   b6180:	4770      	bx	lr
	...

000b6184 <_ZN6LIS3DHC1Ei>:
LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   b6184:	4a02      	ldr	r2, [pc, #8]	; (b6190 <_ZN6LIS3DHC1Ei+0xc>)
   b6186:	e9c0 2100 	strd	r2, r1, [r0]
   b618a:	2200      	movs	r2, #0
   b618c:	7202      	strb	r2, [r0, #8]
}
   b618e:	4770      	bx	lr
   b6190:	000b8f08 	.word	0x000b8f08

000b6194 <_ZN6LIS3DH13readRegister8Eh>:
uint8_t LIS3DH::readRegister8(uint8_t addr) {
   b6194:	b513      	push	{r0, r1, r4, lr}
	readData(addr, resp, sizeof(resp));
   b6196:	6803      	ldr	r3, [r0, #0]
   b6198:	aa01      	add	r2, sp, #4
   b619a:	68dc      	ldr	r4, [r3, #12]
   b619c:	2301      	movs	r3, #1
   b619e:	47a0      	blx	r4
}
   b61a0:	f89d 0004 	ldrb.w	r0, [sp, #4]
   b61a4:	b002      	add	sp, #8
   b61a6:	bd10      	pop	{r4, pc}

000b61a8 <_ZN6LIS3DH9hasDeviceEv>:
bool LIS3DH::hasDevice() {
   b61a8:	b538      	push	{r3, r4, r5, lr}
   b61aa:	4605      	mov	r5, r0
   b61ac:	240a      	movs	r4, #10
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   b61ae:	210f      	movs	r1, #15
   b61b0:	4628      	mov	r0, r5
   b61b2:	f7ff ffef 	bl	b6194 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   b61b6:	2833      	cmp	r0, #51	; 0x33
			found = true;
   b61b8:	f04f 0001 	mov.w	r0, #1
		if (whoami == WHO_AM_I) {
   b61bc:	d004      	beq.n	b61c8 <_ZN6LIS3DH9hasDeviceEv+0x20>
		delay(1);
   b61be:	f000 fffb 	bl	b71b8 <delay>
	for(int tries = 0; tries < 10; tries++) {
   b61c2:	3c01      	subs	r4, #1
   b61c4:	d1f3      	bne.n	b61ae <_ZN6LIS3DH9hasDeviceEv+0x6>
	bool found = false;
   b61c6:	4620      	mov	r0, r4
}
   b61c8:	bd38      	pop	{r3, r4, r5, pc}

000b61ca <_ZN9LIS3DHSPI9hasDeviceEv>:
bool LIS3DHSPI::hasDevice() {
   b61ca:	b510      	push	{r4, lr}
   b61cc:	4604      	mov	r4, r0
	spi.begin(ss);
   b61ce:	8a01      	ldrh	r1, [r0, #16]
   b61d0:	68c0      	ldr	r0, [r0, #12]
   b61d2:	f001 fb4b 	bl	b786c <_ZN8SPIClass5beginEt>
	return LIS3DH::hasDevice();
   b61d6:	4620      	mov	r0, r4
}
   b61d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LIS3DH::hasDevice();
   b61dc:	f7ff bfe4 	b.w	b61a8 <_ZN6LIS3DH9hasDeviceEv>

000b61e0 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:
bool LIS3DH::getSample(LIS3DHSample &sample) {
   b61e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b61e2:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   b61e4:	2127      	movs	r1, #39	; 0x27
bool LIS3DH::getSample(LIS3DHSample &sample) {
   b61e6:	4605      	mov	r5, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   b61e8:	f7ff ffd4 	bl	b6194 <_ZN6LIS3DH13readRegister8Eh>
	bool hasData = ((statusAuxReg & STATUS_ZYXDA) != 0);
   b61ec:	f000 0008 	and.w	r0, r0, #8
   b61f0:	2800      	cmp	r0, #0
   b61f2:	bf14      	ite	ne
   b61f4:	2601      	movne	r6, #1
   b61f6:	2600      	moveq	r6, #0
	if (hasData) {
   b61f8:	d00f      	beq.n	b621a <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x3a>
		readData(REG_OUT_X_L, resp, sizeof(resp));
   b61fa:	682b      	ldr	r3, [r5, #0]
   b61fc:	466a      	mov	r2, sp
   b61fe:	68df      	ldr	r7, [r3, #12]
   b6200:	2128      	movs	r1, #40	; 0x28
   b6202:	2306      	movs	r3, #6
   b6204:	4628      	mov	r0, r5
   b6206:	47b8      	blx	r7
		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
   b6208:	f8bd 3000 	ldrh.w	r3, [sp]
   b620c:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
   b620e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   b6212:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
   b6214:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b6218:	80a3      	strh	r3, [r4, #4]
}
   b621a:	4630      	mov	r0, r6
   b621c:	b003      	add	sp, #12
   b621e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6220 <_ZN6LIS3DH14writeRegister8Ehh>:
void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
   b6220:	b513      	push	{r0, r1, r4, lr}
	writeData(addr, req, sizeof(req));
   b6222:	6803      	ldr	r3, [r0, #0]
	req[0] = value;
   b6224:	f88d 2004 	strb.w	r2, [sp, #4]
	writeData(addr, req, sizeof(req));
   b6228:	691c      	ldr	r4, [r3, #16]
   b622a:	aa01      	add	r2, sp, #4
   b622c:	2301      	movs	r3, #1
   b622e:	47a0      	blx	r4
}
   b6230:	b002      	add	sp, #8
   b6232:	bd10      	pop	{r4, pc}

000b6234 <_ZN6LIS3DH5setupER12LIS3DHConfig>:
bool LIS3DH::setup(LIS3DHConfig &config) {
   b6234:	b570      	push	{r4, r5, r6, lr}
	if (!hasDevice()) {
   b6236:	6803      	ldr	r3, [r0, #0]
   b6238:	689b      	ldr	r3, [r3, #8]
bool LIS3DH::setup(LIS3DHConfig &config) {
   b623a:	4604      	mov	r4, r0
   b623c:	460d      	mov	r5, r1
	if (!hasDevice()) {
   b623e:	4798      	blx	r3
   b6240:	4606      	mov	r6, r0
   b6242:	b930      	cbnz	r0, b6252 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1e>
		Serial.println("device not found");
   b6244:	f002 f880 	bl	b8348 <_Z16_fetch_usbserialv>
   b6248:	4927      	ldr	r1, [pc, #156]	; (b62e8 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
   b624a:	f001 f9cc 	bl	b75e6 <_ZN5Print7printlnEPKc>
}
   b624e:	4630      	mov	r0, r6
   b6250:	bd70      	pop	{r4, r5, r6, pc}
	writeRegister8(REG_CTRL_REG1, config.reg1);
   b6252:	782a      	ldrb	r2, [r5, #0]
   b6254:	2120      	movs	r1, #32
   b6256:	4620      	mov	r0, r4
   b6258:	f7ff ffe2 	bl	b6220 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
   b625c:	786a      	ldrb	r2, [r5, #1]
   b625e:	2121      	movs	r1, #33	; 0x21
   b6260:	4620      	mov	r0, r4
   b6262:	f7ff ffdd 	bl	b6220 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
   b6266:	78aa      	ldrb	r2, [r5, #2]
   b6268:	2122      	movs	r1, #34	; 0x22
   b626a:	4620      	mov	r0, r4
   b626c:	f7ff ffd8 	bl	b6220 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
   b6270:	78ea      	ldrb	r2, [r5, #3]
   b6272:	2123      	movs	r1, #35	; 0x23
   b6274:	4620      	mov	r0, r4
   b6276:	f7ff ffd3 	bl	b6220 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
   b627a:	792a      	ldrb	r2, [r5, #4]
   b627c:	2124      	movs	r1, #36	; 0x24
   b627e:	4620      	mov	r0, r4
   b6280:	f7ff ffce 	bl	b6220 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
   b6284:	796a      	ldrb	r2, [r5, #5]
   b6286:	2125      	movs	r1, #37	; 0x25
   b6288:	4620      	mov	r0, r4
   b628a:	f7ff ffc9 	bl	b6220 <_ZN6LIS3DH14writeRegister8Ehh>
	if (config.setReference) {
   b628e:	79ab      	ldrb	r3, [r5, #6]
   b6290:	b11b      	cbz	r3, b629a <_ZN6LIS3DH5setupER12LIS3DHConfig+0x66>
		readRegister8(REG_REFERENCE);
   b6292:	2126      	movs	r1, #38	; 0x26
   b6294:	4620      	mov	r0, r4
   b6296:	f7ff ff7d 	bl	b6194 <_ZN6LIS3DH13readRegister8Eh>
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
   b629a:	7aaa      	ldrb	r2, [r5, #10]
   b629c:	212e      	movs	r1, #46	; 0x2e
   b629e:	4620      	mov	r0, r4
   b62a0:	f7ff ffbe 	bl	b6220 <_ZN6LIS3DH14writeRegister8Ehh>
	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
   b62a4:	78ab      	ldrb	r3, [r5, #2]
   b62a6:	065b      	lsls	r3, r3, #25
   b62a8:	d5d1      	bpl.n	b624e <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		writeRegister8(REG_INT1_THS, config.int1_ths);
   b62aa:	79ea      	ldrb	r2, [r5, #7]
   b62ac:	2132      	movs	r1, #50	; 0x32
   b62ae:	4620      	mov	r0, r4
   b62b0:	f7ff ffb6 	bl	b6220 <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
   b62b4:	7a2a      	ldrb	r2, [r5, #8]
   b62b6:	2133      	movs	r1, #51	; 0x33
   b62b8:	4620      	mov	r0, r4
   b62ba:	f7ff ffb1 	bl	b6220 <_ZN6LIS3DH14writeRegister8Ehh>
		if (intPin >= 0) {
   b62be:	6863      	ldr	r3, [r4, #4]
   b62c0:	2b00      	cmp	r3, #0
   b62c2:	db0a      	blt.n	b62da <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa6>
			int1_cfg = config.int1_cfg;
   b62c4:	7a6a      	ldrb	r2, [r5, #9]
   b62c6:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
   b62c8:	4620      	mov	r0, r4
   b62ca:	2130      	movs	r1, #48	; 0x30
   b62cc:	f7ff ffa8 	bl	b6220 <_ZN6LIS3DH14writeRegister8Ehh>
			readRegister8(REG_INT1_SRC);
   b62d0:	2131      	movs	r1, #49	; 0x31
   b62d2:	4620      	mov	r0, r4
   b62d4:	f7ff ff5e 	bl	b6194 <_ZN6LIS3DH13readRegister8Eh>
   b62d8:	e7b9      	b.n	b624e <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
			int1_cfg = 0;
   b62da:	2200      	movs	r2, #0
   b62dc:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
   b62de:	2130      	movs	r1, #48	; 0x30
   b62e0:	4620      	mov	r0, r4
   b62e2:	f7ff ff9d 	bl	b6220 <_ZN6LIS3DH14writeRegister8Ehh>
   b62e6:	e7b2      	b.n	b624e <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
   b62e8:	000b8eef 	.word	0x000b8eef

000b62ec <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b62ec:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b62f0:	b510      	push	{r4, lr}
   b62f2:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b62f4:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b62f6:	b113      	cbz	r3, b62fe <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b62f8:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b62fa:	f000 fc8d 	bl	b6c18 <os_mutex_lock>
#endif
#endif
#endif
        }
   b62fe:	4620      	mov	r0, r4
   b6300:	bd10      	pop	{r4, pc}

000b6302 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b6302:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b6304:	6803      	ldr	r3, [r0, #0]
   b6306:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b630a:	4604      	mov	r4, r0
            if (mqtt->thread)
   b630c:	b112      	cbz	r2, b6314 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b630e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b6310:	f000 fc8a 	bl	b6c28 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b6314:	4620      	mov	r0, r4
   b6316:	bd10      	pop	{r4, pc}

000b6318 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b6318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b631a:	461f      	mov	r7, r3
   b631c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b6320:	4604      	mov	r4, r0
   b6322:	460d      	mov	r5, r1
   b6324:	4616      	mov	r6, r2
    if (thread) {
   b6326:	b12b      	cbz	r3, b6334 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b6328:	2301      	movs	r3, #1
   b632a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b632e:	3058      	adds	r0, #88	; 0x58
   b6330:	f000 fc6a 	bl	b6c08 <os_mutex_create>
    }
    this->callback = callback;
   b6334:	9b08      	ldr	r3, [sp, #32]
   b6336:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b6338:	2300      	movs	r3, #0
   b633a:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b633c:	b106      	cbz	r6, b6340 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b633e:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b6340:	b125      	cbz	r5, b634c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b6342:	4629      	mov	r1, r5
   b6344:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b6348:	f001 fbfa 	bl	b7b40 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b634c:	9b06      	ldr	r3, [sp, #24]
   b634e:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b6350:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b6352:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b6354:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b6358:	2bff      	cmp	r3, #255	; 0xff
   b635a:	bfb8      	it	lt
   b635c:	23ff      	movlt	r3, #255	; 0xff
   b635e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b6362:	b108      	cbz	r0, b6368 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b6364:	f7fe fb61 	bl	b4a2a <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b6368:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b636c:	f7fe fb5b 	bl	b4a26 <_Znaj>
   b6370:	61e0      	str	r0, [r4, #28]
}
   b6372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6374 <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b6374:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b6378:	4604      	mov	r4, r0
            bool thread) {
   b637a:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b637c:	4617      	mov	r7, r2
   b637e:	4698      	mov	r8, r3
   b6380:	460e      	mov	r6, r1
            bool thread) {
   b6382:	f001 ff13 	bl	b81ac <_ZN9TCPClientC1Ev>
   b6386:	490d      	ldr	r1, [pc, #52]	; (b63bc <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b6388:	61e5      	str	r5, [r4, #28]
   b638a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b638e:	f001 fb84 	bl	b7a9a <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b6392:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b6396:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b6398:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b639c:	22ff      	movs	r2, #255	; 0xff
   b639e:	230f      	movs	r3, #15
   b63a0:	e9cd 3200 	strd	r3, r2, [sp]
   b63a4:	4620      	mov	r0, r4
            bool thread) {
   b63a6:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b63aa:	463b      	mov	r3, r7
   b63ac:	462a      	mov	r2, r5
   b63ae:	4631      	mov	r1, r6
   b63b0:	f7ff ffb2 	bl	b6318 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b63b4:	4620      	mov	r0, r4
   b63b6:	b004      	add	sp, #16
   b63b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b63bc:	000b8d79 	.word	0x000b8d79

000b63c0 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b63c0:	b510      	push	{r4, lr}
   b63c2:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b63c4:	4620      	mov	r0, r4
   b63c6:	f001 fe4d 	bl	b8064 <_ZN9TCPClient9availableEv>
   b63ca:	2800      	cmp	r0, #0
   b63cc:	d0fa      	beq.n	b63c4 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b63ce:	4620      	mov	r0, r4
   b63d0:	f001 fc32 	bl	b7c38 <_ZN9TCPClient4readEv>
}
   b63d4:	b2c0      	uxtb	r0, r0
   b63d6:	bd10      	pop	{r4, pc}

000b63d8 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b63d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b63dc:	4605      	mov	r5, r0
   b63de:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b63e0:	f7ff ffee 	bl	b63c0 <_ZN4MQTT8readByteEv>
   b63e4:	69eb      	ldr	r3, [r5, #28]
   b63e6:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b63e8:	69eb      	ldr	r3, [r5, #28]
   b63ea:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b63ee:	f04f 0901 	mov.w	r9, #1
   b63f2:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b63f6:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b63f8:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b63fa:	4628      	mov	r0, r5
   b63fc:	f7ff ffe0 	bl	b63c0 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b6400:	4626      	mov	r6, r4
   b6402:	69eb      	ldr	r3, [r5, #28]
   b6404:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b6406:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b640a:	fb13 f309 	smulbb	r3, r3, r9
   b640e:	441f      	add	r7, r3
        buffer[len++] = digit;
   b6410:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b6412:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b6414:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b6416:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b6418:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b641c:	d4ed      	bmi.n	b63fa <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b641e:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b6420:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b6424:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b6428:	d11e      	bne.n	b6468 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b642a:	4628      	mov	r0, r5
   b642c:	f7ff ffc8 	bl	b63c0 <_ZN4MQTT8readByteEv>
   b6430:	69eb      	ldr	r3, [r5, #28]
   b6432:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b6434:	4628      	mov	r0, r5
   b6436:	f7ff ffc3 	bl	b63c0 <_ZN4MQTT8readByteEv>
   b643a:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b643c:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b643e:	b2b6      	uxth	r6, r6
   b6440:	69eb      	ldr	r3, [r5, #28]
   b6442:	b2a4      	uxth	r4, r4
   b6444:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b6446:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b6448:	b2b6      	uxth	r6, r6
   b644a:	42be      	cmp	r6, r7
   b644c:	d20e      	bcs.n	b646c <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b644e:	4628      	mov	r0, r5
   b6450:	f7ff ffb6 	bl	b63c0 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b6454:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b6458:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b645a:	bf84      	itt	hi
   b645c:	69eb      	ldrhi	r3, [r5, #28]
   b645e:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b6460:	3401      	adds	r4, #1
   b6462:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b6464:	3601      	adds	r6, #1
   b6466:	e7ef      	b.n	b6448 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b6468:	2600      	movs	r6, #0
   b646a:	e7ed      	b.n	b6448 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b646c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b6470:	42a3      	cmp	r3, r4
   b6472:	bf2c      	ite	cs
   b6474:	4620      	movcs	r0, r4
   b6476:	2000      	movcc	r0, #0
   b6478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b647c <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b647c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6480:	4615      	mov	r5, r2
   b6482:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b6484:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b6486:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b6488:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b648a:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b648c:	a802      	add	r0, sp, #8
        digit = len % 128;
   b648e:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b6492:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b6496:	f103 0401 	add.w	r4, r3, #1
   b649a:	4403      	add	r3, r0
            digit |= 0x80;
   b649c:	bf88      	it	hi
   b649e:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b64a2:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b64a6:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b64aa:	b2e4      	uxtb	r4, r4
   b64ac:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b64b0:	d81e      	bhi.n	b64f0 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b64b2:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b64b6:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b64ba:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b64bc:	4622      	mov	r2, r4
   b64be:	a901      	add	r1, sp, #4
   b64c0:	4428      	add	r0, r5
    buf[4-llen] = header;
   b64c2:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b64c6:	f002 fae5 	bl	b8a94 <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b64ca:	1c72      	adds	r2, r6, #1
   b64cc:	4422      	add	r2, r4
   b64ce:	4641      	mov	r1, r8
   b64d0:	4638      	mov	r0, r7
   b64d2:	f001 fb9c 	bl	b7c0e <_ZN9TCPClient5writeEPKhj>
   b64d6:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b64d8:	f000 fbce 	bl	b6c78 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b64dc:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b64de:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b64e0:	4432      	add	r2, r6
   b64e2:	b2a8      	uxth	r0, r5
}
   b64e4:	1a13      	subs	r3, r2, r0
   b64e6:	4258      	negs	r0, r3
   b64e8:	4158      	adcs	r0, r3
   b64ea:	b002      	add	sp, #8
   b64ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b64f0:	4623      	mov	r3, r4
   b64f2:	e7ca      	b.n	b648a <_ZN4MQTT5writeEhPht+0xe>

000b64f4 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b64f4:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b64f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   b64f8:	4605      	mov	r5, r0
    pos += 2;
   b64fa:	b298      	uxth	r0, r3
   b64fc:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b64fe:	5cce      	ldrb	r6, [r1, r3]
   b6500:	b29c      	uxth	r4, r3
   b6502:	b156      	cbz	r6, b651a <_ZN4MQTT11writeStringEPKcPht+0x26>
   b6504:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b6508:	4584      	cmp	ip, r0
   b650a:	f103 0701 	add.w	r7, r3, #1
   b650e:	d904      	bls.n	b651a <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b6510:	1c44      	adds	r4, r0, #1
   b6512:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b6514:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b6516:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b6518:	e7f1      	b.n	b64fe <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b651a:	b299      	uxth	r1, r3
   b651c:	1a41      	subs	r1, r0, r1
   b651e:	440a      	add	r2, r1
   b6520:	0a21      	lsrs	r1, r4, #8
   b6522:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b6526:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b652a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b652c <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b652c:	b538      	push	{r3, r4, r5, lr}
   b652e:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b6530:	f001 fcba 	bl	b7ea8 <_ZN9TCPClient9connectedEv>
   b6534:	2800      	cmp	r0, #0
   b6536:	bf14      	ite	ne
   b6538:	2501      	movne	r5, #1
   b653a:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b653c:	d102      	bne.n	b6544 <_ZN4MQTT11isConnectedEv+0x18>
   b653e:	4620      	mov	r0, r4
   b6540:	f001 fdea 	bl	b8118 <_ZN9TCPClient4stopEv>
    return rc;
}
   b6544:	4628      	mov	r0, r5
   b6546:	bd38      	pop	{r3, r4, r5, pc}

000b6548 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b6548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b654c:	b088      	sub	sp, #32
   b654e:	4604      	mov	r4, r0
   b6550:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b6554:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6558:	4689      	mov	r9, r1
   b655a:	4617      	mov	r7, r2
   b655c:	461e      	mov	r6, r3
    if (!isConnected()) {
   b655e:	f7ff ffe5 	bl	b652c <_ZN4MQTT11isConnectedEv>
   b6562:	4605      	mov	r5, r0
   b6564:	2800      	cmp	r0, #0
   b6566:	f040 80cd 	bne.w	b6704 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b656a:	4621      	mov	r1, r4
   b656c:	a801      	add	r0, sp, #4
   b656e:	f7ff febd 	bl	b62ec <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b6572:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6574:	2900      	cmp	r1, #0
   b6576:	f040 8088 	bne.w	b668a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b657a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b657e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b6580:	462b      	mov	r3, r5
   b6582:	4620      	mov	r0, r4
   b6584:	f001 fc12 	bl	b7dac <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b6588:	2800      	cmp	r0, #0
   b658a:	d07a      	beq.n	b6682 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b658c:	2301      	movs	r3, #1
   b658e:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b6590:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b6594:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b6596:	2b04      	cmp	r3, #4
   b6598:	4b5b      	ldr	r3, [pc, #364]	; (b6708 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b659a:	f040 8081 	bne.w	b66a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b659e:	6818      	ldr	r0, [r3, #0]
   b65a0:	8899      	ldrh	r1, [r3, #4]
   b65a2:	799b      	ldrb	r3, [r3, #6]
   b65a4:	f8ad 100c 	strh.w	r1, [sp, #12]
   b65a8:	f88d 300e 	strb.w	r3, [sp, #14]
   b65ac:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b65ae:	f8c2 0005 	str.w	r0, [r2, #5]
   b65b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b65b6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b65ba:	f8a2 1009 	strh.w	r1, [r2, #9]
   b65be:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b65c0:	230c      	movs	r3, #12
            if (willTopic) {
   b65c2:	f1b8 0f00 	cmp.w	r8, #0
   b65c6:	f000 8081 	beq.w	b66cc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b65ca:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b65ce:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b65d2:	0140      	lsls	r0, r0, #5
   b65d4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b65d8:	f040 0006 	orr.w	r0, r0, #6
   b65dc:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b65de:	f1ba 0f00 	cmp.w	sl, #0
   b65e2:	d101      	bne.n	b65e8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b65e4:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b65e8:	b11f      	cbz	r7, b65f2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b65ea:	2e00      	cmp	r6, #0
   b65ec:	d170      	bne.n	b66d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b65ee:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b65f2:	69e2      	ldr	r2, [r4, #28]
   b65f4:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b65f6:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b65f8:	69e1      	ldr	r1, [r4, #28]
   b65fa:	1c58      	adds	r0, r3, #1
   b65fc:	1212      	asrs	r2, r2, #8
   b65fe:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b6600:	1c9a      	adds	r2, r3, #2
   b6602:	69e1      	ldr	r1, [r4, #28]
   b6604:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b6606:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b6608:	3303      	adds	r3, #3
   b660a:	69e2      	ldr	r2, [r4, #28]
   b660c:	4649      	mov	r1, r9
   b660e:	4620      	mov	r0, r4
   b6610:	f7ff ff70 	bl	b64f4 <_ZN4MQTT11writeStringEPKcPht>
   b6614:	4603      	mov	r3, r0
            if (willTopic) {
   b6616:	f1b8 0f00 	cmp.w	r8, #0
   b661a:	d00b      	beq.n	b6634 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b661c:	69e2      	ldr	r2, [r4, #28]
   b661e:	4641      	mov	r1, r8
   b6620:	4620      	mov	r0, r4
   b6622:	f7ff ff67 	bl	b64f4 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b6626:	69e2      	ldr	r2, [r4, #28]
   b6628:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b662a:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b662c:	4620      	mov	r0, r4
   b662e:	f7ff ff61 	bl	b64f4 <_ZN4MQTT11writeStringEPKcPht>
   b6632:	4603      	mov	r3, r0
            if(user != NULL) {
   b6634:	b167      	cbz	r7, b6650 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b6636:	69e2      	ldr	r2, [r4, #28]
   b6638:	4639      	mov	r1, r7
   b663a:	4620      	mov	r0, r4
   b663c:	f7ff ff5a 	bl	b64f4 <_ZN4MQTT11writeStringEPKcPht>
   b6640:	4603      	mov	r3, r0
                if(pass != NULL) {
   b6642:	b12e      	cbz	r6, b6650 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b6644:	69e2      	ldr	r2, [r4, #28]
   b6646:	4631      	mov	r1, r6
   b6648:	4620      	mov	r0, r4
   b664a:	f7ff ff53 	bl	b64f4 <_ZN4MQTT11writeStringEPKcPht>
   b664e:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b6650:	3b05      	subs	r3, #5
   b6652:	69e2      	ldr	r2, [r4, #28]
   b6654:	b29b      	uxth	r3, r3
   b6656:	2110      	movs	r1, #16
   b6658:	4620      	mov	r0, r4
   b665a:	f7ff ff0f 	bl	b647c <_ZN4MQTT5writeEhPht>
   b665e:	f000 fb0b 	bl	b6c78 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b6662:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b6666:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b666a:	4620      	mov	r0, r4
   b666c:	f001 fcfa 	bl	b8064 <_ZN9TCPClient9availableEv>
   b6670:	bb88      	cbnz	r0, b66d6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b6672:	f000 fb01 	bl	b6c78 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b6676:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b6678:	1ac0      	subs	r0, r0, r3
   b667a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b667c:	4373      	muls	r3, r6
   b667e:	4298      	cmp	r0, r3
   b6680:	d9f3      	bls.n	b666a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b6682:	4620      	mov	r0, r4
   b6684:	f001 fd48 	bl	b8118 <_ZN9TCPClient4stopEv>
   b6688:	e035      	b.n	b66f6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b668a:	a802      	add	r0, sp, #8
   b668c:	f000 fea6 	bl	b73dc <_ZN9IPAddressC1EPKh>
   b6690:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b6694:	462b      	mov	r3, r5
   b6696:	a902      	add	r1, sp, #8
   b6698:	4620      	mov	r0, r4
   b669a:	f001 fc67 	bl	b7f6c <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b669e:	e773      	b.n	b6588 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b66a0:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b66a4:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b66a8:	7bdb      	ldrb	r3, [r3, #15]
   b66aa:	f10d 0c08 	add.w	ip, sp, #8
   b66ae:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b66b2:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b66b6:	ab02      	add	r3, sp, #8
   b66b8:	cb03      	ldmia	r3!, {r0, r1}
   b66ba:	f8c2 0005 	str.w	r0, [r2, #5]
   b66be:	f8c2 1009 	str.w	r1, [r2, #9]
   b66c2:	f89c 3000 	ldrb.w	r3, [ip]
   b66c6:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b66c8:	230e      	movs	r3, #14
   b66ca:	e77a      	b.n	b65c2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b66cc:	2002      	movs	r0, #2
   b66ce:	e786      	b.n	b65de <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b66d0:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b66d4:	e78d      	b.n	b65f2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b66d6:	a902      	add	r1, sp, #8
   b66d8:	4620      	mov	r0, r4
   b66da:	f7ff fe7d 	bl	b63d8 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b66de:	2804      	cmp	r0, #4
   b66e0:	d1cf      	bne.n	b6682 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b66e2:	69e3      	ldr	r3, [r4, #28]
   b66e4:	78de      	ldrb	r6, [r3, #3]
   b66e6:	2e00      	cmp	r6, #0
   b66e8:	d1cb      	bne.n	b6682 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b66ea:	f000 fac5 	bl	b6c78 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b66ee:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b66f0:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b66f2:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b66f6:	a801      	add	r0, sp, #4
   b66f8:	f7ff fe03 	bl	b6302 <_ZN4MQTT11MutexLockerD1Ev>
}
   b66fc:	4628      	mov	r0, r5
   b66fe:	b008      	add	sp, #32
   b6700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b6704:	2500      	movs	r5, #0
   b6706:	e7f9      	b.n	b66fc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b6708:	000b8d38 	.word	0x000b8d38

000b670c <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b670c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b670e:	2301      	movs	r3, #1
   b6710:	2204      	movs	r2, #4
   b6712:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b6716:	2300      	movs	r3, #0
   b6718:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b671c:	e9cd 3300 	strd	r3, r3, [sp]
   b6720:	461a      	mov	r2, r3
   b6722:	f7ff ff11 	bl	b6548 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b6726:	b007      	add	sp, #28
   b6728:	f85d fb04 	ldr.w	pc, [sp], #4

000b672c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b672c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6730:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b6734:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b6738:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b673c:	4604      	mov	r4, r0
   b673e:	468b      	mov	fp, r1
   b6740:	4616      	mov	r6, r2
   b6742:	461f      	mov	r7, r3
    if (isConnected()) {
   b6744:	f7ff fef2 	bl	b652c <_ZN4MQTT11isConnectedEv>
   b6748:	4682      	mov	sl, r0
   b674a:	2800      	cmp	r0, #0
   b674c:	d051      	beq.n	b67f2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b674e:	4621      	mov	r1, r4
   b6750:	a801      	add	r0, sp, #4
   b6752:	f7ff fdcb 	bl	b62ec <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b6756:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b675a:	69e0      	ldr	r0, [r4, #28]
   b675c:	2100      	movs	r1, #0
   b675e:	f002 f9a7 	bl	b8ab0 <memset>
        length = writeString(topic, buffer, length);
   b6762:	2305      	movs	r3, #5
   b6764:	69e2      	ldr	r2, [r4, #28]
   b6766:	4659      	mov	r1, fp
   b6768:	4620      	mov	r0, r4
   b676a:	f7ff fec3 	bl	b64f4 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b676e:	1e6b      	subs	r3, r5, #1
   b6770:	2b01      	cmp	r3, #1
   b6772:	d815      	bhi.n	b67a0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b6774:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b6776:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b6778:	3101      	adds	r1, #1
   b677a:	b289      	uxth	r1, r1
   b677c:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b677e:	0a09      	lsrs	r1, r1, #8
   b6780:	5419      	strb	r1, [r3, r0]
   b6782:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b6784:	69e3      	ldr	r3, [r4, #28]
   b6786:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b6788:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b678a:	3002      	adds	r0, #2
   b678c:	5499      	strb	r1, [r3, r2]
   b678e:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b6790:	f1b8 0f00 	cmp.w	r8, #0
   b6794:	d004      	beq.n	b67a0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b6796:	8c23      	ldrh	r3, [r4, #32]
   b6798:	1c5a      	adds	r2, r3, #1
   b679a:	8422      	strh	r2, [r4, #32]
   b679c:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b67a0:	2100      	movs	r1, #0
   b67a2:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b67a4:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b67a6:	69e2      	ldr	r2, [r4, #28]
   b67a8:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b67aa:	d90a      	bls.n	b67c2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b67ac:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b67b0:	459c      	cmp	ip, r3
   b67b2:	d906      	bls.n	b67c2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b67b4:	f816 c001 	ldrb.w	ip, [r6, r1]
   b67b8:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b67bc:	3101      	adds	r1, #1
   b67be:	b289      	uxth	r1, r1
   b67c0:	e7ef      	b.n	b67a2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b67c2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b67c6:	2900      	cmp	r1, #0
   b67c8:	bf0c      	ite	eq
   b67ca:	2130      	moveq	r1, #48	; 0x30
   b67cc:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b67ce:	f1b9 0f00 	cmp.w	r9, #0
   b67d2:	d001      	beq.n	b67d8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b67d4:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b67d8:	2d02      	cmp	r5, #2
   b67da:	d10e      	bne.n	b67fa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b67dc:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b67e0:	3b05      	subs	r3, #5
   b67e2:	b29b      	uxth	r3, r3
   b67e4:	4620      	mov	r0, r4
   b67e6:	f7ff fe49 	bl	b647c <_ZN4MQTT5writeEhPht>
   b67ea:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b67ec:	a801      	add	r0, sp, #4
   b67ee:	f7ff fd88 	bl	b6302 <_ZN4MQTT11MutexLockerD1Ev>
}
   b67f2:	4650      	mov	r0, sl
   b67f4:	b003      	add	sp, #12
   b67f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b67fa:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b67fc:	bf08      	it	eq
   b67fe:	f041 0102 	orreq.w	r1, r1, #2
   b6802:	e7ed      	b.n	b67e0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b6804 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b6804:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b6806:	9c08      	ldr	r4, [sp, #32]
   b6808:	9403      	str	r4, [sp, #12]
   b680a:	2400      	movs	r4, #0
   b680c:	9402      	str	r4, [sp, #8]
   b680e:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b6812:	9401      	str	r4, [sp, #4]
   b6814:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b6818:	9400      	str	r4, [sp, #0]
   b681a:	f7ff ff87 	bl	b672c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b681e:	b004      	add	sp, #16
   b6820:	bd10      	pop	{r4, pc}

000b6822 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b6822:	b530      	push	{r4, r5, lr}
   b6824:	b087      	sub	sp, #28
   b6826:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b6828:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b682a:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b682c:	9204      	str	r2, [sp, #16]
   b682e:	f7fe f8b5 	bl	b499c <strlen>
   b6832:	2500      	movs	r5, #0
   b6834:	4603      	mov	r3, r0
   b6836:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b683a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b683e:	9500      	str	r5, [sp, #0]
   b6840:	4620      	mov	r0, r4
   b6842:	f7ff ffdf 	bl	b6804 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b6846:	b007      	add	sp, #28
   b6848:	bd30      	pop	{r4, r5, pc}

000b684a <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b684a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b684c:	4604      	mov	r4, r0
   b684e:	460e      	mov	r6, r1
    if (isConnected()) {
   b6850:	f7ff fe6c 	bl	b652c <_ZN4MQTT11isConnectedEv>
   b6854:	4605      	mov	r5, r0
   b6856:	b1c8      	cbz	r0, b688c <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b6858:	4621      	mov	r1, r4
   b685a:	a801      	add	r0, sp, #4
   b685c:	f7ff fd46 	bl	b62ec <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b6860:	69e3      	ldr	r3, [r4, #28]
   b6862:	2262      	movs	r2, #98	; 0x62
   b6864:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b6866:	69e3      	ldr	r3, [r4, #28]
   b6868:	2202      	movs	r2, #2
   b686a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b686c:	69e3      	ldr	r3, [r4, #28]
   b686e:	0a32      	lsrs	r2, r6, #8
   b6870:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b6872:	69e3      	ldr	r3, [r4, #28]
   b6874:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b6876:	69e1      	ldr	r1, [r4, #28]
   b6878:	2204      	movs	r2, #4
   b687a:	4620      	mov	r0, r4
   b687c:	f001 f9c7 	bl	b7c0e <_ZN9TCPClient5writeEPKhj>
   b6880:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b6882:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b6884:	bf18      	it	ne
   b6886:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b6888:	f7ff fd3b 	bl	b6302 <_ZN4MQTT11MutexLockerD1Ev>
}
   b688c:	4628      	mov	r0, r5
   b688e:	b002      	add	sp, #8
   b6890:	bd70      	pop	{r4, r5, r6, pc}

000b6892 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b6892:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6894:	4604      	mov	r4, r0
   b6896:	460e      	mov	r6, r1
    if (isConnected()) {
   b6898:	f7ff fe48 	bl	b652c <_ZN4MQTT11isConnectedEv>
   b689c:	4605      	mov	r5, r0
   b689e:	b1c8      	cbz	r0, b68d4 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b68a0:	4621      	mov	r1, r4
   b68a2:	a801      	add	r0, sp, #4
   b68a4:	f7ff fd22 	bl	b62ec <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b68a8:	69e3      	ldr	r3, [r4, #28]
   b68aa:	2272      	movs	r2, #114	; 0x72
   b68ac:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b68ae:	69e3      	ldr	r3, [r4, #28]
   b68b0:	2202      	movs	r2, #2
   b68b2:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b68b4:	69e3      	ldr	r3, [r4, #28]
   b68b6:	0a32      	lsrs	r2, r6, #8
   b68b8:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b68ba:	69e3      	ldr	r3, [r4, #28]
   b68bc:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b68be:	69e1      	ldr	r1, [r4, #28]
   b68c0:	2204      	movs	r2, #4
   b68c2:	4620      	mov	r0, r4
   b68c4:	f001 f9a3 	bl	b7c0e <_ZN9TCPClient5writeEPKhj>
   b68c8:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b68ca:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b68cc:	bf18      	it	ne
   b68ce:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b68d0:	f7ff fd17 	bl	b6302 <_ZN4MQTT11MutexLockerD1Ev>
}
   b68d4:	4628      	mov	r0, r5
   b68d6:	b002      	add	sp, #8
   b68d8:	bd70      	pop	{r4, r5, r6, pc}

000b68da <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b68da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b68de:	ed2d 8b02 	vpush	{d8}
   b68e2:	b087      	sub	sp, #28
   b68e4:	af00      	add	r7, sp, #0
   b68e6:	4604      	mov	r4, r0
    if (isConnected()) {
   b68e8:	f7ff fe20 	bl	b652c <_ZN4MQTT11isConnectedEv>
   b68ec:	4681      	mov	r9, r0
   b68ee:	b1f8      	cbz	r0, b6930 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b68f0:	4621      	mov	r1, r4
   b68f2:	f107 0014 	add.w	r0, r7, #20
   b68f6:	f7ff fcf9 	bl	b62ec <_ZN4MQTT11MutexLockerC1EPS_>
   b68fa:	f000 f9bd 	bl	b6c78 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b68fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6900:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6904:	4353      	muls	r3, r2
   b6906:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b6908:	1a82      	subs	r2, r0, r2
   b690a:	429a      	cmp	r2, r3
   b690c:	4606      	mov	r6, r0
   b690e:	d803      	bhi.n	b6918 <_ZN4MQTT4loopEv+0x3e>
   b6910:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b6912:	1a82      	subs	r2, r0, r2
   b6914:	4293      	cmp	r3, r2
   b6916:	d221      	bcs.n	b695c <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b6918:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b691c:	b17b      	cbz	r3, b693e <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b691e:	4620      	mov	r0, r4
   b6920:	f001 fbfa 	bl	b8118 <_ZN9TCPClient4stopEv>
                return false;
   b6924:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b6928:	f107 0014 	add.w	r0, r7, #20
   b692c:	f7ff fce9 	bl	b6302 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6930:	4648      	mov	r0, r9
   b6932:	371c      	adds	r7, #28
   b6934:	46bd      	mov	sp, r7
   b6936:	ecbd 8b02 	vpop	{d8}
   b693a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b693e:	69e2      	ldr	r2, [r4, #28]
   b6940:	21c0      	movs	r1, #192	; 0xc0
   b6942:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b6944:	69e2      	ldr	r2, [r4, #28]
   b6946:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b6948:	69e1      	ldr	r1, [r4, #28]
   b694a:	2202      	movs	r2, #2
   b694c:	4620      	mov	r0, r4
   b694e:	f001 f95e 	bl	b7c0e <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b6952:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b6956:	2301      	movs	r3, #1
   b6958:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b695c:	4620      	mov	r0, r4
   b695e:	f001 fb81 	bl	b8064 <_ZN9TCPClient9availableEv>
   b6962:	2800      	cmp	r0, #0
   b6964:	d0e0      	beq.n	b6928 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b6966:	f107 0113 	add.w	r1, r7, #19
   b696a:	4620      	mov	r0, r4
   b696c:	f7ff fd34 	bl	b63d8 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b6970:	4683      	mov	fp, r0
   b6972:	2800      	cmp	r0, #0
   b6974:	d0d8      	beq.n	b6928 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b6976:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b6978:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b697a:	7819      	ldrb	r1, [r3, #0]
   b697c:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b6980:	2a30      	cmp	r2, #48	; 0x30
   b6982:	d17f      	bne.n	b6a84 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b6984:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b6988:	f1ba 0f00 	cmp.w	sl, #0
   b698c:	d0cc      	beq.n	b6928 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b698e:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b6992:	466a      	mov	r2, sp
   b6994:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b6998:	eb03 020c 	add.w	r2, r3, ip
   b699c:	7851      	ldrb	r1, [r2, #1]
   b699e:	7895      	ldrb	r5, [r2, #2]
   b69a0:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b69a4:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b69a6:	f105 0208 	add.w	r2, r5, #8
   b69aa:	4669      	mov	r1, sp
   b69ac:	08d2      	lsrs	r2, r2, #3
   b69ae:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b69b2:	4695      	mov	sp, r2
   b69b4:	f10c 0203 	add.w	r2, ip, #3
   b69b8:	60fa      	str	r2, [r7, #12]
   b69ba:	eb03 0e02 	add.w	lr, r3, r2
   b69be:	eb0d 0205 	add.w	r2, sp, r5
   b69c2:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b69c4:	f8c7 d008 	str.w	sp, [r7, #8]
   b69c8:	607a      	str	r2, [r7, #4]
   b69ca:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b69ce:	428a      	cmp	r2, r1
   b69d0:	d006      	beq.n	b69e0 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b69d2:	460a      	mov	r2, r1
   b69d4:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b69d8:	f802 8b01 	strb.w	r8, [r2], #1
   b69dc:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b69de:	e7f4      	b.n	b69ca <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b69e0:	2200      	movs	r2, #0
   b69e2:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b69e4:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b69e8:	68f9      	ldr	r1, [r7, #12]
   b69ea:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b69ee:	ebab 020c 	sub.w	r2, fp, ip
   b69f2:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b69f4:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b69f8:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b69fc:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b69fe:	d125      	bne.n	b6a4c <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6a00:	f813 e001 	ldrb.w	lr, [r3, r1]
   b6a04:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b6a06:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6a08:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b6a0c:	f10c 0105 	add.w	r1, ip, #5
   b6a10:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b6a12:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6a14:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b6a18:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b6a1a:	69e3      	ldr	r3, [r4, #28]
   b6a1c:	2240      	movs	r2, #64	; 0x40
   b6a1e:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b6a20:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6a22:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b6a26:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b6a2a:	69e3      	ldr	r3, [r4, #28]
   b6a2c:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b6a30:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b6a32:	69e3      	ldr	r3, [r4, #28]
   b6a34:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b6a38:	69e1      	ldr	r1, [r4, #28]
   b6a3a:	2204      	movs	r2, #4
   b6a3c:	4620      	mov	r0, r4
   b6a3e:	f001 f8e6 	bl	b7c0e <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b6a42:	6266      	str	r6, [r4, #36]	; 0x24
   b6a44:	ee18 3a10 	vmov	r3, s16
   b6a48:	469d      	mov	sp, r3
   b6a4a:	e76d      	b.n	b6928 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b6a4c:	f1b8 0f04 	cmp.w	r8, #4
   b6a50:	d115      	bne.n	b6a7e <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6a52:	f813 e001 	ldrb.w	lr, [r3, r1]
   b6a56:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6a58:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6a5a:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b6a5e:	f10c 0105 	add.w	r1, ip, #5
   b6a62:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6a64:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6a66:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6a6a:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b6a6c:	69e3      	ldr	r3, [r4, #28]
   b6a6e:	2250      	movs	r2, #80	; 0x50
   b6a70:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b6a72:	69e3      	ldr	r3, [r4, #28]
   b6a74:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6a76:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b6a7a:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b6a7c:	e7d5      	b.n	b6a2a <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b6a7e:	4419      	add	r1, r3
   b6a80:	47d0      	blx	sl
   b6a82:	e7df      	b.n	b6a44 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b6a84:	2a50      	cmp	r2, #80	; 0x50
   b6a86:	d108      	bne.n	b6a9a <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b6a88:	789a      	ldrb	r2, [r3, #2]
   b6a8a:	78d9      	ldrb	r1, [r3, #3]
   b6a8c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b6a90:	b289      	uxth	r1, r1
   b6a92:	4620      	mov	r0, r4
   b6a94:	f7ff fed9 	bl	b684a <_ZN4MQTT14publishReleaseEt>
   b6a98:	e746      	b.n	b6928 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b6a9a:	2a40      	cmp	r2, #64	; 0x40
   b6a9c:	d112      	bne.n	b6ac4 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b6a9e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b6aa0:	2a00      	cmp	r2, #0
   b6aa2:	f43f af41 	beq.w	b6928 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b6aa6:	f1bb 0f04 	cmp.w	fp, #4
   b6aaa:	f47f af3d 	bne.w	b6928 <_ZN4MQTT4loopEv+0x4e>
   b6aae:	f011 0f06 	tst.w	r1, #6
   b6ab2:	f47f af39 	bne.w	b6928 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b6ab6:	7899      	ldrb	r1, [r3, #2]
   b6ab8:	78d8      	ldrb	r0, [r3, #3]
   b6aba:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b6abe:	b280      	uxth	r0, r0
   b6ac0:	4790      	blx	r2
   b6ac2:	e731      	b.n	b6928 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b6ac4:	2a60      	cmp	r2, #96	; 0x60
   b6ac6:	d108      	bne.n	b6ada <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b6ac8:	789a      	ldrb	r2, [r3, #2]
   b6aca:	78d9      	ldrb	r1, [r3, #3]
   b6acc:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b6ad0:	b289      	uxth	r1, r1
   b6ad2:	4620      	mov	r0, r4
   b6ad4:	f7ff fedd 	bl	b6892 <_ZN4MQTT15publishCompleteEt>
   b6ad8:	e726      	b.n	b6928 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b6ada:	2a70      	cmp	r2, #112	; 0x70
   b6adc:	d0df      	beq.n	b6a9e <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b6ade:	2a90      	cmp	r2, #144	; 0x90
   b6ae0:	f43f af22 	beq.w	b6928 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b6ae4:	2ac0      	cmp	r2, #192	; 0xc0
   b6ae6:	d10a      	bne.n	b6afe <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b6ae8:	22d0      	movs	r2, #208	; 0xd0
   b6aea:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b6aec:	69e3      	ldr	r3, [r4, #28]
   b6aee:	2200      	movs	r2, #0
   b6af0:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b6af2:	69e1      	ldr	r1, [r4, #28]
   b6af4:	2202      	movs	r2, #2
   b6af6:	4620      	mov	r0, r4
   b6af8:	f001 f889 	bl	b7c0e <_ZN9TCPClient5writeEPKhj>
   b6afc:	e714      	b.n	b6928 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b6afe:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b6b00:	bf04      	itt	eq
   b6b02:	2300      	moveq	r3, #0
   b6b04:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b6b08:	e70e      	b.n	b6928 <_ZN4MQTT4loopEv+0x4e>

000b6b0a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b6b0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6b0c:	4604      	mov	r4, r0
   b6b0e:	460f      	mov	r7, r1
   b6b10:	4616      	mov	r6, r2
    if (isConnected()) {
   b6b12:	f7ff fd0b 	bl	b652c <_ZN4MQTT11isConnectedEv>
   b6b16:	4605      	mov	r5, r0
   b6b18:	b310      	cbz	r0, b6b60 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b6b1a:	4621      	mov	r1, r4
   b6b1c:	a801      	add	r0, sp, #4
   b6b1e:	f7ff fbe5 	bl	b62ec <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b6b22:	8c23      	ldrh	r3, [r4, #32]
   b6b24:	3301      	adds	r3, #1
   b6b26:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b6b28:	b1eb      	cbz	r3, b6b66 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b6b2a:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b6b2c:	8c23      	ldrh	r3, [r4, #32]
   b6b2e:	69e2      	ldr	r2, [r4, #28]
   b6b30:	0a1b      	lsrs	r3, r3, #8
   b6b32:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b6b34:	69e3      	ldr	r3, [r4, #28]
   b6b36:	8c22      	ldrh	r2, [r4, #32]
   b6b38:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b6b3a:	69e2      	ldr	r2, [r4, #28]
   b6b3c:	2307      	movs	r3, #7
   b6b3e:	4639      	mov	r1, r7
   b6b40:	4620      	mov	r0, r4
   b6b42:	f7ff fcd7 	bl	b64f4 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b6b46:	69e3      	ldr	r3, [r4, #28]
   b6b48:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b6b4a:	3804      	subs	r0, #4
   b6b4c:	b283      	uxth	r3, r0
   b6b4e:	69e2      	ldr	r2, [r4, #28]
   b6b50:	2182      	movs	r1, #130	; 0x82
   b6b52:	4620      	mov	r0, r4
   b6b54:	f7ff fc92 	bl	b647c <_ZN4MQTT5writeEhPht>
   b6b58:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b6b5a:	a801      	add	r0, sp, #4
   b6b5c:	f7ff fbd1 	bl	b6302 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6b60:	4628      	mov	r0, r5
   b6b62:	b003      	add	sp, #12
   b6b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b6b66:	2301      	movs	r3, #1
   b6b68:	e7df      	b.n	b6b2a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b6b6a <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b6b6a:	2200      	movs	r2, #0
   b6b6c:	f7ff bfcd 	b.w	b6b0a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b6b70 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b6b70:	f000 bb22 	b.w	b71b8 <delay>

000b6b74 <_Z11BlynkMillisv>:
   b6b74:	f000 b880 	b.w	b6c78 <HAL_Timer_Get_Milli_Seconds>

000b6b78 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b6b78:	4770      	bx	lr

000b6b7a <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b6b7a:	4770      	bx	lr

000b6b7c <BlynkNoOpCbk>:
{}
   b6b7c:	4770      	bx	lr
	...

000b6b80 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b6b80:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b6b82:	bf5a      	itte	pl
   b6b84:	4b02      	ldrpl	r3, [pc, #8]	; (b6b90 <GetReadHandler+0x10>)
   b6b86:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b6b8a:	2000      	movmi	r0, #0
#endif
}
   b6b8c:	4770      	bx	lr
   b6b8e:	bf00      	nop
   b6b90:	000b8f40 	.word	0x000b8f40

000b6b94 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b6b94:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b6b96:	bf5a      	itte	pl
   b6b98:	4b02      	ldrpl	r3, [pc, #8]	; (b6ba4 <GetWriteHandler+0x10>)
   b6b9a:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b6b9e:	2000      	movmi	r0, #0
#endif
}
   b6ba0:	4770      	bx	lr
   b6ba2:	bf00      	nop
   b6ba4:	000b9140 	.word	0x000b9140

000b6ba8 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b6ba8:	b508      	push	{r3, lr}
   b6baa:	4b02      	ldr	r3, [pc, #8]	; (b6bb4 <os_thread_yield+0xc>)
   b6bac:	681b      	ldr	r3, [r3, #0]
   b6bae:	68db      	ldr	r3, [r3, #12]
   b6bb0:	9301      	str	r3, [sp, #4]
   b6bb2:	bd08      	pop	{r3, pc}
   b6bb4:	00030248 	.word	0x00030248

000b6bb8 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b6bb8:	b508      	push	{r3, lr}
   b6bba:	4b02      	ldr	r3, [pc, #8]	; (b6bc4 <os_thread_scheduling+0xc>)
   b6bbc:	681b      	ldr	r3, [r3, #0]
   b6bbe:	69db      	ldr	r3, [r3, #28]
   b6bc0:	9301      	str	r3, [sp, #4]
   b6bc2:	bd08      	pop	{r3, pc}
   b6bc4:	00030248 	.word	0x00030248

000b6bc8 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b6bc8:	b508      	push	{r3, lr}
   b6bca:	4b02      	ldr	r3, [pc, #8]	; (b6bd4 <os_timer_create+0xc>)
   b6bcc:	681b      	ldr	r3, [r3, #0]
   b6bce:	6a1b      	ldr	r3, [r3, #32]
   b6bd0:	9301      	str	r3, [sp, #4]
   b6bd2:	bd08      	pop	{r3, pc}
   b6bd4:	00030248 	.word	0x00030248

000b6bd8 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b6bd8:	b508      	push	{r3, lr}
   b6bda:	4b02      	ldr	r3, [pc, #8]	; (b6be4 <os_timer_destroy+0xc>)
   b6bdc:	681b      	ldr	r3, [r3, #0]
   b6bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6be0:	9301      	str	r3, [sp, #4]
   b6be2:	bd08      	pop	{r3, pc}
   b6be4:	00030248 	.word	0x00030248

000b6be8 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b6be8:	b508      	push	{r3, lr}
   b6bea:	4b02      	ldr	r3, [pc, #8]	; (b6bf4 <os_timer_get_id+0xc>)
   b6bec:	681b      	ldr	r3, [r3, #0]
   b6bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6bf0:	9301      	str	r3, [sp, #4]
   b6bf2:	bd08      	pop	{r3, pc}
   b6bf4:	00030248 	.word	0x00030248

000b6bf8 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b6bf8:	b508      	push	{r3, lr}
   b6bfa:	4b02      	ldr	r3, [pc, #8]	; (b6c04 <os_timer_change+0xc>)
   b6bfc:	681b      	ldr	r3, [r3, #0]
   b6bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6c00:	9301      	str	r3, [sp, #4]
   b6c02:	bd08      	pop	{r3, pc}
   b6c04:	00030248 	.word	0x00030248

000b6c08 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6c08:	b508      	push	{r3, lr}
   b6c0a:	4b02      	ldr	r3, [pc, #8]	; (b6c14 <os_mutex_create+0xc>)
   b6c0c:	681b      	ldr	r3, [r3, #0]
   b6c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6c10:	9301      	str	r3, [sp, #4]
   b6c12:	bd08      	pop	{r3, pc}
   b6c14:	00030248 	.word	0x00030248

000b6c18 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b6c18:	b508      	push	{r3, lr}
   b6c1a:	4b02      	ldr	r3, [pc, #8]	; (b6c24 <os_mutex_lock+0xc>)
   b6c1c:	681b      	ldr	r3, [r3, #0]
   b6c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6c20:	9301      	str	r3, [sp, #4]
   b6c22:	bd08      	pop	{r3, pc}
   b6c24:	00030248 	.word	0x00030248

000b6c28 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b6c28:	b508      	push	{r3, lr}
   b6c2a:	4b02      	ldr	r3, [pc, #8]	; (b6c34 <os_mutex_unlock+0xc>)
   b6c2c:	681b      	ldr	r3, [r3, #0]
   b6c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6c30:	9301      	str	r3, [sp, #4]
   b6c32:	bd08      	pop	{r3, pc}
   b6c34:	00030248 	.word	0x00030248

000b6c38 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6c38:	b508      	push	{r3, lr}
   b6c3a:	4b02      	ldr	r3, [pc, #8]	; (b6c44 <os_mutex_recursive_create+0xc>)
   b6c3c:	681b      	ldr	r3, [r3, #0]
   b6c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6c40:	9301      	str	r3, [sp, #4]
   b6c42:	bd08      	pop	{r3, pc}
   b6c44:	00030248 	.word	0x00030248

000b6c48 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b6c48:	b508      	push	{r3, lr}
   b6c4a:	4b02      	ldr	r3, [pc, #8]	; (b6c54 <os_timer_set_id+0xc>)
   b6c4c:	681b      	ldr	r3, [r3, #0]
   b6c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b6c50:	9301      	str	r3, [sp, #4]
   b6c52:	bd08      	pop	{r3, pc}
   b6c54:	00030248 	.word	0x00030248

000b6c58 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6c58:	b508      	push	{r3, lr}
   b6c5a:	4b02      	ldr	r3, [pc, #8]	; (b6c64 <HAL_RNG_GetRandomNumber+0xc>)
   b6c5c:	681b      	ldr	r3, [r3, #0]
   b6c5e:	685b      	ldr	r3, [r3, #4]
   b6c60:	9301      	str	r3, [sp, #4]
   b6c62:	bd08      	pop	{r3, pc}
   b6c64:	00030218 	.word	0x00030218

000b6c68 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6c68:	b508      	push	{r3, lr}
   b6c6a:	4b02      	ldr	r3, [pc, #8]	; (b6c74 <HAL_Delay_Microseconds+0xc>)
   b6c6c:	681b      	ldr	r3, [r3, #0]
   b6c6e:	68db      	ldr	r3, [r3, #12]
   b6c70:	9301      	str	r3, [sp, #4]
   b6c72:	bd08      	pop	{r3, pc}
   b6c74:	00030218 	.word	0x00030218

000b6c78 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6c78:	b508      	push	{r3, lr}
   b6c7a:	4b02      	ldr	r3, [pc, #8]	; (b6c84 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6c7c:	681b      	ldr	r3, [r3, #0]
   b6c7e:	695b      	ldr	r3, [r3, #20]
   b6c80:	9301      	str	r3, [sp, #4]
   b6c82:	bd08      	pop	{r3, pc}
   b6c84:	00030218 	.word	0x00030218

000b6c88 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b6c88:	b508      	push	{r3, lr}
   b6c8a:	4b02      	ldr	r3, [pc, #8]	; (b6c94 <hal_pin_validate_function+0xc>)
   b6c8c:	681b      	ldr	r3, [r3, #0]
   b6c8e:	685b      	ldr	r3, [r3, #4]
   b6c90:	9301      	str	r3, [sp, #4]
   b6c92:	bd08      	pop	{r3, pc}
   b6c94:	0003022c 	.word	0x0003022c

000b6c98 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b6c98:	b508      	push	{r3, lr}
   b6c9a:	4b02      	ldr	r3, [pc, #8]	; (b6ca4 <hal_gpio_mode+0xc>)
   b6c9c:	681b      	ldr	r3, [r3, #0]
   b6c9e:	689b      	ldr	r3, [r3, #8]
   b6ca0:	9301      	str	r3, [sp, #4]
   b6ca2:	bd08      	pop	{r3, pc}
   b6ca4:	0003022c 	.word	0x0003022c

000b6ca8 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b6ca8:	b508      	push	{r3, lr}
   b6caa:	4b02      	ldr	r3, [pc, #8]	; (b6cb4 <hal_gpio_get_mode+0xc>)
   b6cac:	681b      	ldr	r3, [r3, #0]
   b6cae:	68db      	ldr	r3, [r3, #12]
   b6cb0:	9301      	str	r3, [sp, #4]
   b6cb2:	bd08      	pop	{r3, pc}
   b6cb4:	0003022c 	.word	0x0003022c

000b6cb8 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b6cb8:	b508      	push	{r3, lr}
   b6cba:	4b02      	ldr	r3, [pc, #8]	; (b6cc4 <hal_gpio_write+0xc>)
   b6cbc:	681b      	ldr	r3, [r3, #0]
   b6cbe:	691b      	ldr	r3, [r3, #16]
   b6cc0:	9301      	str	r3, [sp, #4]
   b6cc2:	bd08      	pop	{r3, pc}
   b6cc4:	0003022c 	.word	0x0003022c

000b6cc8 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b6cc8:	b508      	push	{r3, lr}
   b6cca:	4b02      	ldr	r3, [pc, #8]	; (b6cd4 <hal_gpio_read+0xc>)
   b6ccc:	681b      	ldr	r3, [r3, #0]
   b6cce:	695b      	ldr	r3, [r3, #20]
   b6cd0:	9301      	str	r3, [sp, #4]
   b6cd2:	bd08      	pop	{r3, pc}
   b6cd4:	0003022c 	.word	0x0003022c

000b6cd8 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
   b6cd8:	b508      	push	{r3, lr}
   b6cda:	4b02      	ldr	r3, [pc, #8]	; (b6ce4 <HAL_DAC_Write+0xc>)
   b6cdc:	681b      	ldr	r3, [r3, #0]
   b6cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6ce0:	9301      	str	r3, [sp, #4]
   b6ce2:	bd08      	pop	{r3, pc}
   b6ce4:	0003022c 	.word	0x0003022c

000b6ce8 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6ce8:	b508      	push	{r3, lr}
   b6cea:	4b02      	ldr	r3, [pc, #8]	; (b6cf4 <hal_adc_read+0xc>)
   b6cec:	681b      	ldr	r3, [r3, #0]
   b6cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6cf0:	9301      	str	r3, [sp, #4]
   b6cf2:	bd08      	pop	{r3, pc}
   b6cf4:	0003022c 	.word	0x0003022c

000b6cf8 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b6cf8:	b508      	push	{r3, lr}
   b6cfa:	4b02      	ldr	r3, [pc, #8]	; (b6d04 <hal_pwm_write_ext+0xc>)
   b6cfc:	681b      	ldr	r3, [r3, #0]
   b6cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b6d00:	9301      	str	r3, [sp, #4]
   b6d02:	bd08      	pop	{r3, pc}
   b6d04:	0003022c 	.word	0x0003022c

000b6d08 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6d08:	b508      	push	{r3, lr}
   b6d0a:	4b02      	ldr	r3, [pc, #8]	; (b6d14 <hal_i2c_write+0xc>)
   b6d0c:	681b      	ldr	r3, [r3, #0]
   b6d0e:	6a1b      	ldr	r3, [r3, #32]
   b6d10:	9301      	str	r3, [sp, #4]
   b6d12:	bd08      	pop	{r3, pc}
   b6d14:	00030228 	.word	0x00030228

000b6d18 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6d18:	b508      	push	{r3, lr}
   b6d1a:	4b02      	ldr	r3, [pc, #8]	; (b6d24 <hal_i2c_available+0xc>)
   b6d1c:	681b      	ldr	r3, [r3, #0]
   b6d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6d20:	9301      	str	r3, [sp, #4]
   b6d22:	bd08      	pop	{r3, pc}
   b6d24:	00030228 	.word	0x00030228

000b6d28 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6d28:	b508      	push	{r3, lr}
   b6d2a:	4b02      	ldr	r3, [pc, #8]	; (b6d34 <hal_i2c_read+0xc>)
   b6d2c:	681b      	ldr	r3, [r3, #0]
   b6d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6d30:	9301      	str	r3, [sp, #4]
   b6d32:	bd08      	pop	{r3, pc}
   b6d34:	00030228 	.word	0x00030228

000b6d38 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6d38:	b508      	push	{r3, lr}
   b6d3a:	4b02      	ldr	r3, [pc, #8]	; (b6d44 <hal_i2c_peek+0xc>)
   b6d3c:	681b      	ldr	r3, [r3, #0]
   b6d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6d40:	9301      	str	r3, [sp, #4]
   b6d42:	bd08      	pop	{r3, pc}
   b6d44:	00030228 	.word	0x00030228

000b6d48 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6d48:	b508      	push	{r3, lr}
   b6d4a:	4b02      	ldr	r3, [pc, #8]	; (b6d54 <hal_i2c_flush+0xc>)
   b6d4c:	681b      	ldr	r3, [r3, #0]
   b6d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6d50:	9301      	str	r3, [sp, #4]
   b6d52:	bd08      	pop	{r3, pc}
   b6d54:	00030228 	.word	0x00030228

000b6d58 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6d58:	b508      	push	{r3, lr}
   b6d5a:	4b02      	ldr	r3, [pc, #8]	; (b6d64 <hal_i2c_is_enabled+0xc>)
   b6d5c:	681b      	ldr	r3, [r3, #0]
   b6d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6d60:	9301      	str	r3, [sp, #4]
   b6d62:	bd08      	pop	{r3, pc}
   b6d64:	00030228 	.word	0x00030228

000b6d68 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6d68:	b508      	push	{r3, lr}
   b6d6a:	4b02      	ldr	r3, [pc, #8]	; (b6d74 <hal_i2c_init+0xc>)
   b6d6c:	681b      	ldr	r3, [r3, #0]
   b6d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6d70:	9301      	str	r3, [sp, #4]
   b6d72:	bd08      	pop	{r3, pc}
   b6d74:	00030228 	.word	0x00030228

000b6d78 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6d78:	b508      	push	{r3, lr}
   b6d7a:	4b02      	ldr	r3, [pc, #8]	; (b6d84 <if_index_to_name+0xc>)
   b6d7c:	681b      	ldr	r3, [r3, #0]
   b6d7e:	695b      	ldr	r3, [r3, #20]
   b6d80:	9301      	str	r3, [sp, #4]
   b6d82:	bd08      	pop	{r3, pc}
   b6d84:	0003026c 	.word	0x0003026c

000b6d88 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6d88:	b508      	push	{r3, lr}
   b6d8a:	4b02      	ldr	r3, [pc, #8]	; (b6d94 <inet_inet_ntop+0xc>)
   b6d8c:	681b      	ldr	r3, [r3, #0]
   b6d8e:	695b      	ldr	r3, [r3, #20]
   b6d90:	9301      	str	r3, [sp, #4]
   b6d92:	bd08      	pop	{r3, pc}
   b6d94:	00030264 	.word	0x00030264

000b6d98 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6d98:	b508      	push	{r3, lr}
   b6d9a:	4b02      	ldr	r3, [pc, #8]	; (b6da4 <inet_htonl+0xc>)
   b6d9c:	681b      	ldr	r3, [r3, #0]
   b6d9e:	6a1b      	ldr	r3, [r3, #32]
   b6da0:	9301      	str	r3, [sp, #4]
   b6da2:	bd08      	pop	{r3, pc}
   b6da4:	00030264 	.word	0x00030264

000b6da8 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b6da8:	b508      	push	{r3, lr}
   b6daa:	4b02      	ldr	r3, [pc, #8]	; (b6db4 <inet_ntohs+0xc>)
   b6dac:	681b      	ldr	r3, [r3, #0]
   b6dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6db0:	9301      	str	r3, [sp, #4]
   b6db2:	bd08      	pop	{r3, pc}
   b6db4:	00030264 	.word	0x00030264

000b6db8 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6db8:	b508      	push	{r3, lr}
   b6dba:	4b02      	ldr	r3, [pc, #8]	; (b6dc4 <inet_htons+0xc>)
   b6dbc:	681b      	ldr	r3, [r3, #0]
   b6dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6dc0:	9301      	str	r3, [sp, #4]
   b6dc2:	bd08      	pop	{r3, pc}
   b6dc4:	00030264 	.word	0x00030264

000b6dc8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6dc8:	b508      	push	{r3, lr}
   b6dca:	4b02      	ldr	r3, [pc, #8]	; (b6dd4 <netdb_freeaddrinfo+0xc>)
   b6dcc:	681b      	ldr	r3, [r3, #0]
   b6dce:	689b      	ldr	r3, [r3, #8]
   b6dd0:	9301      	str	r3, [sp, #4]
   b6dd2:	bd08      	pop	{r3, pc}
   b6dd4:	00030268 	.word	0x00030268

000b6dd8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6dd8:	b508      	push	{r3, lr}
   b6dda:	4b02      	ldr	r3, [pc, #8]	; (b6de4 <netdb_getaddrinfo+0xc>)
   b6ddc:	681b      	ldr	r3, [r3, #0]
   b6dde:	68db      	ldr	r3, [r3, #12]
   b6de0:	9301      	str	r3, [sp, #4]
   b6de2:	bd08      	pop	{r3, pc}
   b6de4:	00030268 	.word	0x00030268

000b6de8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6de8:	b508      	push	{r3, lr}
   b6dea:	4b02      	ldr	r3, [pc, #8]	; (b6df4 <sock_setsockopt+0xc>)
   b6dec:	681b      	ldr	r3, [r3, #0]
   b6dee:	699b      	ldr	r3, [r3, #24]
   b6df0:	9301      	str	r3, [sp, #4]
   b6df2:	bd08      	pop	{r3, pc}
   b6df4:	00030238 	.word	0x00030238

000b6df8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6df8:	b508      	push	{r3, lr}
   b6dfa:	4b02      	ldr	r3, [pc, #8]	; (b6e04 <sock_close+0xc>)
   b6dfc:	681b      	ldr	r3, [r3, #0]
   b6dfe:	69db      	ldr	r3, [r3, #28]
   b6e00:	9301      	str	r3, [sp, #4]
   b6e02:	bd08      	pop	{r3, pc}
   b6e04:	00030238 	.word	0x00030238

000b6e08 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6e08:	b508      	push	{r3, lr}
   b6e0a:	4b02      	ldr	r3, [pc, #8]	; (b6e14 <sock_connect+0xc>)
   b6e0c:	681b      	ldr	r3, [r3, #0]
   b6e0e:	6a1b      	ldr	r3, [r3, #32]
   b6e10:	9301      	str	r3, [sp, #4]
   b6e12:	bd08      	pop	{r3, pc}
   b6e14:	00030238 	.word	0x00030238

000b6e18 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6e18:	b508      	push	{r3, lr}
   b6e1a:	4b02      	ldr	r3, [pc, #8]	; (b6e24 <sock_recv+0xc>)
   b6e1c:	681b      	ldr	r3, [r3, #0]
   b6e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6e20:	9301      	str	r3, [sp, #4]
   b6e22:	bd08      	pop	{r3, pc}
   b6e24:	00030238 	.word	0x00030238

000b6e28 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6e28:	b508      	push	{r3, lr}
   b6e2a:	4b02      	ldr	r3, [pc, #8]	; (b6e34 <sock_send+0xc>)
   b6e2c:	681b      	ldr	r3, [r3, #0]
   b6e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6e30:	9301      	str	r3, [sp, #4]
   b6e32:	bd08      	pop	{r3, pc}
   b6e34:	00030238 	.word	0x00030238

000b6e38 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6e38:	b508      	push	{r3, lr}
   b6e3a:	4b02      	ldr	r3, [pc, #8]	; (b6e44 <sock_socket+0xc>)
   b6e3c:	681b      	ldr	r3, [r3, #0]
   b6e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6e40:	9301      	str	r3, [sp, #4]
   b6e42:	bd08      	pop	{r3, pc}
   b6e44:	00030238 	.word	0x00030238

000b6e48 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6e48:	b508      	push	{r3, lr}
   b6e4a:	4b02      	ldr	r3, [pc, #8]	; (b6e54 <hal_spi_begin+0xc>)
   b6e4c:	681b      	ldr	r3, [r3, #0]
   b6e4e:	681b      	ldr	r3, [r3, #0]
   b6e50:	9301      	str	r3, [sp, #4]
   b6e52:	bd08      	pop	{r3, pc}
   b6e54:	00030230 	.word	0x00030230

000b6e58 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6e58:	b508      	push	{r3, lr}
   b6e5a:	4b02      	ldr	r3, [pc, #8]	; (b6e64 <hal_spi_transfer+0xc>)
   b6e5c:	681b      	ldr	r3, [r3, #0]
   b6e5e:	695b      	ldr	r3, [r3, #20]
   b6e60:	9301      	str	r3, [sp, #4]
   b6e62:	bd08      	pop	{r3, pc}
   b6e64:	00030230 	.word	0x00030230

000b6e68 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6e68:	b508      	push	{r3, lr}
   b6e6a:	4b02      	ldr	r3, [pc, #8]	; (b6e74 <hal_spi_init+0xc>)
   b6e6c:	681b      	ldr	r3, [r3, #0]
   b6e6e:	69db      	ldr	r3, [r3, #28]
   b6e70:	9301      	str	r3, [sp, #4]
   b6e72:	bd08      	pop	{r3, pc}
   b6e74:	00030230 	.word	0x00030230

000b6e78 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6e78:	b508      	push	{r3, lr}
   b6e7a:	4b02      	ldr	r3, [pc, #8]	; (b6e84 <hal_spi_is_enabled+0xc>)
   b6e7c:	681b      	ldr	r3, [r3, #0]
   b6e7e:	6a1b      	ldr	r3, [r3, #32]
   b6e80:	9301      	str	r3, [sp, #4]
   b6e82:	bd08      	pop	{r3, pc}
   b6e84:	00030230 	.word	0x00030230

000b6e88 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6e88:	b508      	push	{r3, lr}
   b6e8a:	4b02      	ldr	r3, [pc, #8]	; (b6e94 <hal_spi_info+0xc>)
   b6e8c:	681b      	ldr	r3, [r3, #0]
   b6e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6e90:	9301      	str	r3, [sp, #4]
   b6e92:	bd08      	pop	{r3, pc}
   b6e94:	00030230 	.word	0x00030230

000b6e98 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6e98:	b508      	push	{r3, lr}
   b6e9a:	4b02      	ldr	r3, [pc, #8]	; (b6ea4 <hal_spi_set_settings+0xc>)
   b6e9c:	681b      	ldr	r3, [r3, #0]
   b6e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6ea0:	9301      	str	r3, [sp, #4]
   b6ea2:	bd08      	pop	{r3, pc}
   b6ea4:	00030230 	.word	0x00030230

000b6ea8 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6ea8:	b508      	push	{r3, lr}
   b6eaa:	4b02      	ldr	r3, [pc, #8]	; (b6eb4 <hal_spi_acquire+0xc>)
   b6eac:	681b      	ldr	r3, [r3, #0]
   b6eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6eb0:	9301      	str	r3, [sp, #4]
   b6eb2:	bd08      	pop	{r3, pc}
   b6eb4:	00030230 	.word	0x00030230

000b6eb8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6eb8:	b508      	push	{r3, lr}
   b6eba:	4b02      	ldr	r3, [pc, #8]	; (b6ec4 <hal_spi_release+0xc>)
   b6ebc:	681b      	ldr	r3, [r3, #0]
   b6ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6ec0:	9301      	str	r3, [sp, #4]
   b6ec2:	bd08      	pop	{r3, pc}
   b6ec4:	00030230 	.word	0x00030230

000b6ec8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6ec8:	b508      	push	{r3, lr}
   b6eca:	4b02      	ldr	r3, [pc, #8]	; (b6ed4 <hal_usart_write+0xc>)
   b6ecc:	681b      	ldr	r3, [r3, #0]
   b6ece:	68db      	ldr	r3, [r3, #12]
   b6ed0:	9301      	str	r3, [sp, #4]
   b6ed2:	bd08      	pop	{r3, pc}
   b6ed4:	0003023c 	.word	0x0003023c

000b6ed8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6ed8:	b508      	push	{r3, lr}
   b6eda:	4b02      	ldr	r3, [pc, #8]	; (b6ee4 <hal_usart_available+0xc>)
   b6edc:	681b      	ldr	r3, [r3, #0]
   b6ede:	691b      	ldr	r3, [r3, #16]
   b6ee0:	9301      	str	r3, [sp, #4]
   b6ee2:	bd08      	pop	{r3, pc}
   b6ee4:	0003023c 	.word	0x0003023c

000b6ee8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6ee8:	b508      	push	{r3, lr}
   b6eea:	4b02      	ldr	r3, [pc, #8]	; (b6ef4 <hal_usart_read+0xc>)
   b6eec:	681b      	ldr	r3, [r3, #0]
   b6eee:	695b      	ldr	r3, [r3, #20]
   b6ef0:	9301      	str	r3, [sp, #4]
   b6ef2:	bd08      	pop	{r3, pc}
   b6ef4:	0003023c 	.word	0x0003023c

000b6ef8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6ef8:	b508      	push	{r3, lr}
   b6efa:	4b02      	ldr	r3, [pc, #8]	; (b6f04 <hal_usart_peek+0xc>)
   b6efc:	681b      	ldr	r3, [r3, #0]
   b6efe:	699b      	ldr	r3, [r3, #24]
   b6f00:	9301      	str	r3, [sp, #4]
   b6f02:	bd08      	pop	{r3, pc}
   b6f04:	0003023c 	.word	0x0003023c

000b6f08 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6f08:	b508      	push	{r3, lr}
   b6f0a:	4b02      	ldr	r3, [pc, #8]	; (b6f14 <hal_usart_flush+0xc>)
   b6f0c:	681b      	ldr	r3, [r3, #0]
   b6f0e:	69db      	ldr	r3, [r3, #28]
   b6f10:	9301      	str	r3, [sp, #4]
   b6f12:	bd08      	pop	{r3, pc}
   b6f14:	0003023c 	.word	0x0003023c

000b6f18 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6f18:	b508      	push	{r3, lr}
   b6f1a:	4b02      	ldr	r3, [pc, #8]	; (b6f24 <hal_usart_is_enabled+0xc>)
   b6f1c:	681b      	ldr	r3, [r3, #0]
   b6f1e:	6a1b      	ldr	r3, [r3, #32]
   b6f20:	9301      	str	r3, [sp, #4]
   b6f22:	bd08      	pop	{r3, pc}
   b6f24:	0003023c 	.word	0x0003023c

000b6f28 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6f28:	b508      	push	{r3, lr}
   b6f2a:	4b02      	ldr	r3, [pc, #8]	; (b6f34 <hal_usart_available_data_for_write+0xc>)
   b6f2c:	681b      	ldr	r3, [r3, #0]
   b6f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6f30:	9301      	str	r3, [sp, #4]
   b6f32:	bd08      	pop	{r3, pc}
   b6f34:	0003023c 	.word	0x0003023c

000b6f38 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6f38:	b508      	push	{r3, lr}
   b6f3a:	4b02      	ldr	r3, [pc, #8]	; (b6f44 <hal_usart_init_ex+0xc>)
   b6f3c:	681b      	ldr	r3, [r3, #0]
   b6f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6f40:	9301      	str	r3, [sp, #4]
   b6f42:	bd08      	pop	{r3, pc}
   b6f44:	0003023c 	.word	0x0003023c

000b6f48 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6f48:	b508      	push	{r3, lr}
   b6f4a:	4b02      	ldr	r3, [pc, #8]	; (b6f54 <HAL_USB_USART_Init+0xc>)
   b6f4c:	681b      	ldr	r3, [r3, #0]
   b6f4e:	681b      	ldr	r3, [r3, #0]
   b6f50:	9301      	str	r3, [sp, #4]
   b6f52:	bd08      	pop	{r3, pc}
   b6f54:	0003024c 	.word	0x0003024c

000b6f58 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6f58:	b508      	push	{r3, lr}
   b6f5a:	4b02      	ldr	r3, [pc, #8]	; (b6f64 <HAL_USB_USART_Begin+0xc>)
   b6f5c:	681b      	ldr	r3, [r3, #0]
   b6f5e:	685b      	ldr	r3, [r3, #4]
   b6f60:	9301      	str	r3, [sp, #4]
   b6f62:	bd08      	pop	{r3, pc}
   b6f64:	0003024c 	.word	0x0003024c

000b6f68 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6f68:	b508      	push	{r3, lr}
   b6f6a:	4b02      	ldr	r3, [pc, #8]	; (b6f74 <HAL_USB_USART_Available_Data+0xc>)
   b6f6c:	681b      	ldr	r3, [r3, #0]
   b6f6e:	691b      	ldr	r3, [r3, #16]
   b6f70:	9301      	str	r3, [sp, #4]
   b6f72:	bd08      	pop	{r3, pc}
   b6f74:	0003024c 	.word	0x0003024c

000b6f78 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6f78:	b508      	push	{r3, lr}
   b6f7a:	4b02      	ldr	r3, [pc, #8]	; (b6f84 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6f7c:	681b      	ldr	r3, [r3, #0]
   b6f7e:	695b      	ldr	r3, [r3, #20]
   b6f80:	9301      	str	r3, [sp, #4]
   b6f82:	bd08      	pop	{r3, pc}
   b6f84:	0003024c 	.word	0x0003024c

000b6f88 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6f88:	b508      	push	{r3, lr}
   b6f8a:	4b02      	ldr	r3, [pc, #8]	; (b6f94 <HAL_USB_USART_Receive_Data+0xc>)
   b6f8c:	681b      	ldr	r3, [r3, #0]
   b6f8e:	699b      	ldr	r3, [r3, #24]
   b6f90:	9301      	str	r3, [sp, #4]
   b6f92:	bd08      	pop	{r3, pc}
   b6f94:	0003024c 	.word	0x0003024c

000b6f98 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6f98:	b508      	push	{r3, lr}
   b6f9a:	4b02      	ldr	r3, [pc, #8]	; (b6fa4 <HAL_USB_USART_Send_Data+0xc>)
   b6f9c:	681b      	ldr	r3, [r3, #0]
   b6f9e:	69db      	ldr	r3, [r3, #28]
   b6fa0:	9301      	str	r3, [sp, #4]
   b6fa2:	bd08      	pop	{r3, pc}
   b6fa4:	0003024c 	.word	0x0003024c

000b6fa8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6fa8:	b508      	push	{r3, lr}
   b6faa:	4b02      	ldr	r3, [pc, #8]	; (b6fb4 <HAL_USB_USART_Flush_Data+0xc>)
   b6fac:	681b      	ldr	r3, [r3, #0]
   b6fae:	6a1b      	ldr	r3, [r3, #32]
   b6fb0:	9301      	str	r3, [sp, #4]
   b6fb2:	bd08      	pop	{r3, pc}
   b6fb4:	0003024c 	.word	0x0003024c

000b6fb8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6fb8:	b508      	push	{r3, lr}
   b6fba:	4b02      	ldr	r3, [pc, #8]	; (b6fc4 <panic_+0xc>)
   b6fbc:	681b      	ldr	r3, [r3, #0]
   b6fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6fc0:	9301      	str	r3, [sp, #4]
   b6fc2:	bd08      	pop	{r3, pc}
   b6fc4:	00030260 	.word	0x00030260

000b6fc8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6fc8:	b508      	push	{r3, lr}
   b6fca:	4b02      	ldr	r3, [pc, #8]	; (b6fd4 <log_message+0xc>)
   b6fcc:	681b      	ldr	r3, [r3, #0]
   b6fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6fd0:	9301      	str	r3, [sp, #4]
   b6fd2:	bd08      	pop	{r3, pc}
   b6fd4:	00030260 	.word	0x00030260

000b6fd8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6fd8:	b508      	push	{r3, lr}
   b6fda:	4b02      	ldr	r3, [pc, #8]	; (b6fe4 <set_system_mode+0xc>)
   b6fdc:	681b      	ldr	r3, [r3, #0]
   b6fde:	685b      	ldr	r3, [r3, #4]
   b6fe0:	9301      	str	r3, [sp, #4]
   b6fe2:	bd08      	pop	{r3, pc}
   b6fe4:	00030220 	.word	0x00030220

000b6fe8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6fe8:	b508      	push	{r3, lr}
   b6fea:	4b02      	ldr	r3, [pc, #8]	; (b6ff4 <system_delay_ms+0xc>)
   b6fec:	681b      	ldr	r3, [r3, #0]
   b6fee:	695b      	ldr	r3, [r3, #20]
   b6ff0:	9301      	str	r3, [sp, #4]
   b6ff2:	bd08      	pop	{r3, pc}
   b6ff4:	00030220 	.word	0x00030220

000b6ff8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6ff8:	b508      	push	{r3, lr}
   b6ffa:	4b02      	ldr	r3, [pc, #8]	; (b7004 <system_thread_set_state+0xc>)
   b6ffc:	681b      	ldr	r3, [r3, #0]
   b6ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7000:	9301      	str	r3, [sp, #4]
   b7002:	bd08      	pop	{r3, pc}
   b7004:	00030220 	.word	0x00030220

000b7008 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7008:	b508      	push	{r3, lr}
   b700a:	4b03      	ldr	r3, [pc, #12]	; (b7018 <system_ctrl_set_app_request_handler+0x10>)
   b700c:	681b      	ldr	r3, [r3, #0]
   b700e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7012:	9301      	str	r3, [sp, #4]
   b7014:	bd08      	pop	{r3, pc}
   b7016:	0000      	.short	0x0000
   b7018:	00030220 	.word	0x00030220

000b701c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b701c:	b508      	push	{r3, lr}
   b701e:	4b03      	ldr	r3, [pc, #12]	; (b702c <system_ctrl_set_result+0x10>)
   b7020:	681b      	ldr	r3, [r3, #0]
   b7022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7026:	9301      	str	r3, [sp, #4]
   b7028:	bd08      	pop	{r3, pc}
   b702a:	0000      	.short	0x0000
   b702c:	00030220 	.word	0x00030220

000b7030 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b7030:	b508      	push	{r3, lr}
   b7032:	4b02      	ldr	r3, [pc, #8]	; (b703c <spark_process+0xc>)
   b7034:	681b      	ldr	r3, [r3, #0]
   b7036:	689b      	ldr	r3, [r3, #8]
   b7038:	9301      	str	r3, [sp, #4]
   b703a:	bd08      	pop	{r3, pc}
   b703c:	00030244 	.word	0x00030244

000b7040 <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b7040:	b508      	push	{r3, lr}
   b7042:	4b02      	ldr	r3, [pc, #8]	; (b704c <spark_deviceID+0xc>)
   b7044:	681b      	ldr	r3, [r3, #0]
   b7046:	69db      	ldr	r3, [r3, #28]
   b7048:	9301      	str	r3, [sp, #4]
   b704a:	bd08      	pop	{r3, pc}
   b704c:	00030244 	.word	0x00030244

000b7050 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7050:	b508      	push	{r3, lr}
   b7052:	4b02      	ldr	r3, [pc, #8]	; (b705c <spark_set_random_seed_from_cloud_handler+0xc>)
   b7054:	681b      	ldr	r3, [r3, #0]
   b7056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7058:	9301      	str	r3, [sp, #4]
   b705a:	bd08      	pop	{r3, pc}
   b705c:	00030244 	.word	0x00030244

000b7060 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7060:	b508      	push	{r3, lr}
   b7062:	4b02      	ldr	r3, [pc, #8]	; (b706c <network_connect+0xc>)
   b7064:	681b      	ldr	r3, [r3, #0]
   b7066:	685b      	ldr	r3, [r3, #4]
   b7068:	9301      	str	r3, [sp, #4]
   b706a:	bd08      	pop	{r3, pc}
   b706c:	00030240 	.word	0x00030240

000b7070 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7070:	b508      	push	{r3, lr}
   b7072:	4b02      	ldr	r3, [pc, #8]	; (b707c <network_connecting+0xc>)
   b7074:	681b      	ldr	r3, [r3, #0]
   b7076:	689b      	ldr	r3, [r3, #8]
   b7078:	9301      	str	r3, [sp, #4]
   b707a:	bd08      	pop	{r3, pc}
   b707c:	00030240 	.word	0x00030240

000b7080 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7080:	b508      	push	{r3, lr}
   b7082:	4b02      	ldr	r3, [pc, #8]	; (b708c <network_disconnect+0xc>)
   b7084:	681b      	ldr	r3, [r3, #0]
   b7086:	68db      	ldr	r3, [r3, #12]
   b7088:	9301      	str	r3, [sp, #4]
   b708a:	bd08      	pop	{r3, pc}
   b708c:	00030240 	.word	0x00030240

000b7090 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7090:	b508      	push	{r3, lr}
   b7092:	4b02      	ldr	r3, [pc, #8]	; (b709c <network_ready+0xc>)
   b7094:	681b      	ldr	r3, [r3, #0]
   b7096:	691b      	ldr	r3, [r3, #16]
   b7098:	9301      	str	r3, [sp, #4]
   b709a:	bd08      	pop	{r3, pc}
   b709c:	00030240 	.word	0x00030240

000b70a0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b70a0:	b508      	push	{r3, lr}
   b70a2:	4b02      	ldr	r3, [pc, #8]	; (b70ac <network_on+0xc>)
   b70a4:	681b      	ldr	r3, [r3, #0]
   b70a6:	695b      	ldr	r3, [r3, #20]
   b70a8:	9301      	str	r3, [sp, #4]
   b70aa:	bd08      	pop	{r3, pc}
   b70ac:	00030240 	.word	0x00030240

000b70b0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b70b0:	b508      	push	{r3, lr}
   b70b2:	4b02      	ldr	r3, [pc, #8]	; (b70bc <network_off+0xc>)
   b70b4:	681b      	ldr	r3, [r3, #0]
   b70b6:	699b      	ldr	r3, [r3, #24]
   b70b8:	9301      	str	r3, [sp, #4]
   b70ba:	bd08      	pop	{r3, pc}
   b70bc:	00030240 	.word	0x00030240

000b70c0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b70c0:	b508      	push	{r3, lr}
   b70c2:	4b02      	ldr	r3, [pc, #8]	; (b70cc <network_listen+0xc>)
   b70c4:	681b      	ldr	r3, [r3, #0]
   b70c6:	69db      	ldr	r3, [r3, #28]
   b70c8:	9301      	str	r3, [sp, #4]
   b70ca:	bd08      	pop	{r3, pc}
   b70cc:	00030240 	.word	0x00030240

000b70d0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b70d0:	b508      	push	{r3, lr}
   b70d2:	4b02      	ldr	r3, [pc, #8]	; (b70dc <network_listening+0xc>)
   b70d4:	681b      	ldr	r3, [r3, #0]
   b70d6:	6a1b      	ldr	r3, [r3, #32]
   b70d8:	9301      	str	r3, [sp, #4]
   b70da:	bd08      	pop	{r3, pc}
   b70dc:	00030240 	.word	0x00030240

000b70e0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b70e0:	b508      	push	{r3, lr}
   b70e2:	4b02      	ldr	r3, [pc, #8]	; (b70ec <network_set_listen_timeout+0xc>)
   b70e4:	681b      	ldr	r3, [r3, #0]
   b70e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b70e8:	9301      	str	r3, [sp, #4]
   b70ea:	bd08      	pop	{r3, pc}
   b70ec:	00030240 	.word	0x00030240

000b70f0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b70f0:	b508      	push	{r3, lr}
   b70f2:	4b02      	ldr	r3, [pc, #8]	; (b70fc <network_get_listen_timeout+0xc>)
   b70f4:	681b      	ldr	r3, [r3, #0]
   b70f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b70f8:	9301      	str	r3, [sp, #4]
   b70fa:	bd08      	pop	{r3, pc}
   b70fc:	00030240 	.word	0x00030240

000b7100 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7100:	b508      	push	{r3, lr}
   b7102:	4b02      	ldr	r3, [pc, #8]	; (b710c <network_is_on+0xc>)
   b7104:	681b      	ldr	r3, [r3, #0]
   b7106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7108:	9301      	str	r3, [sp, #4]
   b710a:	bd08      	pop	{r3, pc}
   b710c:	00030240 	.word	0x00030240

000b7110 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7110:	b508      	push	{r3, lr}
   b7112:	4b02      	ldr	r3, [pc, #8]	; (b711c <network_is_off+0xc>)
   b7114:	681b      	ldr	r3, [r3, #0]
   b7116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7118:	9301      	str	r3, [sp, #4]
   b711a:	bd08      	pop	{r3, pc}
   b711c:	00030240 	.word	0x00030240

000b7120 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7120:	b508      	push	{r3, lr}
   b7122:	4b02      	ldr	r3, [pc, #8]	; (b712c <malloc+0xc>)
   b7124:	681b      	ldr	r3, [r3, #0]
   b7126:	681b      	ldr	r3, [r3, #0]
   b7128:	9301      	str	r3, [sp, #4]
   b712a:	bd08      	pop	{r3, pc}
   b712c:	0003021c 	.word	0x0003021c

000b7130 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7130:	b508      	push	{r3, lr}
   b7132:	4b02      	ldr	r3, [pc, #8]	; (b713c <free+0xc>)
   b7134:	681b      	ldr	r3, [r3, #0]
   b7136:	685b      	ldr	r3, [r3, #4]
   b7138:	9301      	str	r3, [sp, #4]
   b713a:	bd08      	pop	{r3, pc}
   b713c:	0003021c 	.word	0x0003021c

000b7140 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7140:	b508      	push	{r3, lr}
   b7142:	4b02      	ldr	r3, [pc, #8]	; (b714c <realloc+0xc>)
   b7144:	681b      	ldr	r3, [r3, #0]
   b7146:	689b      	ldr	r3, [r3, #8]
   b7148:	9301      	str	r3, [sp, #4]
   b714a:	bd08      	pop	{r3, pc}
   b714c:	0003021c 	.word	0x0003021c

000b7150 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7150:	b508      	push	{r3, lr}
   b7152:	4b02      	ldr	r3, [pc, #8]	; (b715c <snprintf+0xc>)
   b7154:	681b      	ldr	r3, [r3, #0]
   b7156:	69db      	ldr	r3, [r3, #28]
   b7158:	9301      	str	r3, [sp, #4]
   b715a:	bd08      	pop	{r3, pc}
   b715c:	0003021c 	.word	0x0003021c

000b7160 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7160:	b508      	push	{r3, lr}
   b7162:	4b02      	ldr	r3, [pc, #8]	; (b716c <vsnprintf+0xc>)
   b7164:	681b      	ldr	r3, [r3, #0]
   b7166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7168:	9301      	str	r3, [sp, #4]
   b716a:	bd08      	pop	{r3, pc}
   b716c:	0003021c 	.word	0x0003021c

000b7170 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7170:	b508      	push	{r3, lr}
   b7172:	4b02      	ldr	r3, [pc, #8]	; (b717c <__errno+0xc>)
   b7174:	681b      	ldr	r3, [r3, #0]
   b7176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7178:	9301      	str	r3, [sp, #4]
   b717a:	bd08      	pop	{r3, pc}
   b717c:	0003021c 	.word	0x0003021c

000b7180 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7180:	b508      	push	{r3, lr}
   b7182:	4b02      	ldr	r3, [pc, #8]	; (b718c <__assert_func+0xc>)
   b7184:	681b      	ldr	r3, [r3, #0]
   b7186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7188:	9301      	str	r3, [sp, #4]
   b718a:	bd08      	pop	{r3, pc}
   b718c:	0003021c 	.word	0x0003021c

000b7190 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7190:	b508      	push	{r3, lr}
   b7192:	4b02      	ldr	r3, [pc, #8]	; (b719c <newlib_impure_ptr_callback+0xc>)
   b7194:	681b      	ldr	r3, [r3, #0]
   b7196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7198:	9301      	str	r3, [sp, #4]
   b719a:	bd08      	pop	{r3, pc}
   b719c:	0003021c 	.word	0x0003021c

000b71a0 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b71a0:	428a      	cmp	r2, r1
{
   b71a2:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b71a4:	d007      	beq.n	b71b6 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b71a6:	1a44      	subs	r4, r0, r1
   b71a8:	9802      	ldr	r0, [sp, #8]
   b71aa:	1ac0      	subs	r0, r0, r3
   b71ac:	4344      	muls	r4, r0
   b71ae:	1a50      	subs	r0, r2, r1
   b71b0:	fb94 f0f0 	sdiv	r0, r4, r0
   b71b4:	4418      	add	r0, r3
}
   b71b6:	bd10      	pop	{r4, pc}

000b71b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b71b8:	2100      	movs	r1, #0
   b71ba:	f7ff bf15 	b.w	b6fe8 <system_delay_ms>
	...

000b71c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b71c0:	4802      	ldr	r0, [pc, #8]	; (b71cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b71c2:	2300      	movs	r3, #0
   b71c4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b71c6:	f7ff bd37 	b.w	b6c38 <os_mutex_recursive_create>
   b71ca:	bf00      	nop
   b71cc:	2003e6cc 	.word	0x2003e6cc

000b71d0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b71d0:	2200      	movs	r2, #0
   b71d2:	6840      	ldr	r0, [r0, #4]
   b71d4:	4611      	mov	r1, r2
   b71d6:	f7ff bf7b 	b.w	b70d0 <network_listening>

000b71da <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b71da:	2200      	movs	r2, #0
   b71dc:	6840      	ldr	r0, [r0, #4]
   b71de:	4611      	mov	r1, r2
   b71e0:	f7ff bf86 	b.w	b70f0 <network_get_listen_timeout>

000b71e4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b71e4:	6840      	ldr	r0, [r0, #4]
   b71e6:	2200      	movs	r2, #0
   b71e8:	f7ff bf7a 	b.w	b70e0 <network_set_listen_timeout>

000b71ec <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b71ec:	6840      	ldr	r0, [r0, #4]
   b71ee:	2200      	movs	r2, #0
   b71f0:	f081 0101 	eor.w	r1, r1, #1
   b71f4:	f7ff bf64 	b.w	b70c0 <network_listen>

000b71f8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b71f8:	2300      	movs	r3, #0
   b71fa:	6840      	ldr	r0, [r0, #4]
   b71fc:	461a      	mov	r2, r3
   b71fe:	4619      	mov	r1, r3
   b7200:	f7ff bf56 	b.w	b70b0 <network_off>

000b7204 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7204:	2300      	movs	r3, #0
   b7206:	6840      	ldr	r0, [r0, #4]
   b7208:	461a      	mov	r2, r3
   b720a:	4619      	mov	r1, r3
   b720c:	f7ff bf48 	b.w	b70a0 <network_on>

000b7210 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7210:	2200      	movs	r2, #0
   b7212:	6840      	ldr	r0, [r0, #4]
   b7214:	4611      	mov	r1, r2
   b7216:	f7ff bf3b 	b.w	b7090 <network_ready>

000b721a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b721a:	2200      	movs	r2, #0
   b721c:	6840      	ldr	r0, [r0, #4]
   b721e:	4611      	mov	r1, r2
   b7220:	f7ff bf26 	b.w	b7070 <network_connecting>

000b7224 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7224:	6840      	ldr	r0, [r0, #4]
   b7226:	2200      	movs	r2, #0
   b7228:	2102      	movs	r1, #2
   b722a:	f7ff bf29 	b.w	b7080 <network_disconnect>

000b722e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b722e:	2300      	movs	r3, #0
   b7230:	6840      	ldr	r0, [r0, #4]
   b7232:	461a      	mov	r2, r3
   b7234:	f7ff bf14 	b.w	b7060 <network_connect>

000b7238 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7238:	4b02      	ldr	r3, [pc, #8]	; (b7244 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b723a:	2203      	movs	r2, #3
   b723c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b723e:	4a02      	ldr	r2, [pc, #8]	; (b7248 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7240:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7242:	4770      	bx	lr
   b7244:	2003e6d0 	.word	0x2003e6d0
   b7248:	000b9350 	.word	0x000b9350

000b724c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b724c:	4770      	bx	lr

000b724e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b724e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7250:	4606      	mov	r6, r0
   b7252:	4615      	mov	r5, r2
   b7254:	460c      	mov	r4, r1
   b7256:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7258:	42bc      	cmp	r4, r7
   b725a:	d006      	beq.n	b726a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b725c:	6833      	ldr	r3, [r6, #0]
   b725e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7262:	689b      	ldr	r3, [r3, #8]
   b7264:	4630      	mov	r0, r6
   b7266:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7268:	e7f6      	b.n	b7258 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b726a:	4628      	mov	r0, r5
   b726c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b726e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b726e:	7c00      	ldrb	r0, [r0, #16]
   b7270:	2200      	movs	r2, #0
   b7272:	f7ff bd49 	b.w	b6d08 <hal_i2c_write>

000b7276 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7276:	7c00      	ldrb	r0, [r0, #16]
   b7278:	2100      	movs	r1, #0
   b727a:	f7ff bd4d 	b.w	b6d18 <hal_i2c_available>

000b727e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b727e:	7c00      	ldrb	r0, [r0, #16]
   b7280:	2100      	movs	r1, #0
   b7282:	f7ff bd51 	b.w	b6d28 <hal_i2c_read>

000b7286 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7286:	7c00      	ldrb	r0, [r0, #16]
   b7288:	2100      	movs	r1, #0
   b728a:	f7ff bd55 	b.w	b6d38 <hal_i2c_peek>

000b728e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b728e:	7c00      	ldrb	r0, [r0, #16]
   b7290:	2100      	movs	r1, #0
   b7292:	f7ff bd59 	b.w	b6d48 <hal_i2c_flush>

000b7296 <_ZN7TwoWireD0Ev>:
   b7296:	b510      	push	{r4, lr}
   b7298:	2114      	movs	r1, #20
   b729a:	4604      	mov	r4, r0
   b729c:	f7fd fbc7 	bl	b4a2e <_ZdlPvj>
   b72a0:	4620      	mov	r0, r4
   b72a2:	bd10      	pop	{r4, pc}

000b72a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b72a4:	b538      	push	{r3, r4, r5, lr}
   b72a6:	4604      	mov	r4, r0
   b72a8:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b72aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b72ae:	2200      	movs	r2, #0
   b72b0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b72b4:	4b09      	ldr	r3, [pc, #36]	; (b72dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b72b6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b72b8:	4608      	mov	r0, r1
   b72ba:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b72bc:	4629      	mov	r1, r5
   b72be:	f7ff fd53 	bl	b6d68 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b72c2:	30bf      	adds	r0, #191	; 0xbf
   b72c4:	d108      	bne.n	b72d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b72c6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b72c8:	07db      	lsls	r3, r3, #31
   b72ca:	d505      	bpl.n	b72d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b72cc:	6868      	ldr	r0, [r5, #4]
   b72ce:	f7ff ff2f 	bl	b7130 <free>
    free(conf.tx_buffer);
   b72d2:	68e8      	ldr	r0, [r5, #12]
   b72d4:	f7ff ff2c 	bl	b7130 <free>
}
   b72d8:	4620      	mov	r0, r4
   b72da:	bd38      	pop	{r3, r4, r5, pc}
   b72dc:	000b938c 	.word	0x000b938c

000b72e0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b72e0:	4770      	bx	lr

000b72e2 <_ZN9IPAddressD0Ev>:
   b72e2:	b510      	push	{r4, lr}
   b72e4:	2118      	movs	r1, #24
   b72e6:	4604      	mov	r4, r0
   b72e8:	f7fd fba1 	bl	b4a2e <_ZdlPvj>
   b72ec:	4620      	mov	r0, r4
   b72ee:	bd10      	pop	{r4, pc}

000b72f0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b72f0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b72f2:	7d03      	ldrb	r3, [r0, #20]
   b72f4:	2b06      	cmp	r3, #6
{
   b72f6:	b08d      	sub	sp, #52	; 0x34
   b72f8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b72fa:	f100 0704 	add.w	r7, r0, #4
   b72fe:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7302:	d012      	beq.n	b732a <_ZNK9IPAddress7printToER5Print+0x3a>
   b7304:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7308:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b730c:	220a      	movs	r2, #10
   b730e:	4630      	mov	r0, r6
   b7310:	f000 f973 	bl	b75fa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7314:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7316:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7318:	d019      	beq.n	b734e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b731a:	2c00      	cmp	r4, #0
   b731c:	d0f4      	beq.n	b7308 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b731e:	212e      	movs	r1, #46	; 0x2e
   b7320:	4630      	mov	r0, r6
   b7322:	f000 f951 	bl	b75c8 <_ZN5Print5printEc>
   b7326:	4404      	add	r4, r0
   b7328:	e7ee      	b.n	b7308 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b732a:	232f      	movs	r3, #47	; 0x2f
   b732c:	466a      	mov	r2, sp
   b732e:	4639      	mov	r1, r7
   b7330:	200a      	movs	r0, #10
		buf[0] = 0;
   b7332:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7336:	f7ff fd27 	bl	b6d88 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b733a:	4668      	mov	r0, sp
   b733c:	f7fd fb2e 	bl	b499c <strlen>
   b7340:	6833      	ldr	r3, [r6, #0]
   b7342:	4602      	mov	r2, r0
   b7344:	68db      	ldr	r3, [r3, #12]
   b7346:	4669      	mov	r1, sp
   b7348:	4630      	mov	r0, r6
   b734a:	4798      	blx	r3
   b734c:	4604      	mov	r4, r0
    }
    return n;
}
   b734e:	4620      	mov	r0, r4
   b7350:	b00d      	add	sp, #52	; 0x34
   b7352:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7354 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7354:	b510      	push	{r4, lr}
   b7356:	4b05      	ldr	r3, [pc, #20]	; (b736c <_ZN9IPAddressC1Ev+0x18>)
   b7358:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b735a:	2211      	movs	r2, #17
   b735c:	f840 3b04 	str.w	r3, [r0], #4
   b7360:	2100      	movs	r1, #0
   b7362:	f001 fba5 	bl	b8ab0 <memset>
}
   b7366:	4620      	mov	r0, r4
   b7368:	bd10      	pop	{r4, pc}
   b736a:	bf00      	nop
   b736c:	000b93b4 	.word	0x000b93b4

000b7370 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7370:	4603      	mov	r3, r0
   b7372:	4a07      	ldr	r2, [pc, #28]	; (b7390 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7374:	b510      	push	{r4, lr}
   b7376:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b737a:	f101 0210 	add.w	r2, r1, #16
   b737e:	f851 4b04 	ldr.w	r4, [r1], #4
   b7382:	f843 4b04 	str.w	r4, [r3], #4
   b7386:	4291      	cmp	r1, r2
   b7388:	d1f9      	bne.n	b737e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b738a:	780a      	ldrb	r2, [r1, #0]
   b738c:	701a      	strb	r2, [r3, #0]
}
   b738e:	bd10      	pop	{r4, pc}
   b7390:	000b93b4 	.word	0x000b93b4

000b7394 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b7394:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b7396:	2b04      	cmp	r3, #4
   b7398:	d104      	bne.n	b73a4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b739a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b739c:	3800      	subs	r0, #0
   b739e:	bf18      	it	ne
   b73a0:	2001      	movne	r0, #1
   b73a2:	4770      	bx	lr
    } else if (version() == 6) {
   b73a4:	2b06      	cmp	r3, #6
   b73a6:	d107      	bne.n	b73b8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b73a8:	6843      	ldr	r3, [r0, #4]
   b73aa:	b93b      	cbnz	r3, b73bc <_ZNK9IPAddresscvbEv+0x28>
   b73ac:	6883      	ldr	r3, [r0, #8]
   b73ae:	b92b      	cbnz	r3, b73bc <_ZNK9IPAddresscvbEv+0x28>
   b73b0:	68c3      	ldr	r3, [r0, #12]
   b73b2:	b91b      	cbnz	r3, b73bc <_ZNK9IPAddresscvbEv+0x28>
   b73b4:	6900      	ldr	r0, [r0, #16]
   b73b6:	e7f1      	b.n	b739c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b73b8:	2000      	movs	r0, #0
   b73ba:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b73bc:	2001      	movs	r0, #1
}
   b73be:	4770      	bx	lr

000b73c0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b73c0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b73c2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b73c6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b73ca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b73ce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b73d2:	2304      	movs	r3, #4
   b73d4:	6041      	str	r1, [r0, #4]
   b73d6:	7503      	strb	r3, [r0, #20]
}
   b73d8:	bd10      	pop	{r4, pc}
	...

000b73dc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b73dc:	b507      	push	{r0, r1, r2, lr}
   b73de:	4b06      	ldr	r3, [pc, #24]	; (b73f8 <_ZN9IPAddressC1EPKh+0x1c>)
   b73e0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b73e2:	78cb      	ldrb	r3, [r1, #3]
   b73e4:	9300      	str	r3, [sp, #0]
   b73e6:	788b      	ldrb	r3, [r1, #2]
   b73e8:	784a      	ldrb	r2, [r1, #1]
   b73ea:	7809      	ldrb	r1, [r1, #0]
   b73ec:	f7ff ffe8 	bl	b73c0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b73f0:	b003      	add	sp, #12
   b73f2:	f85d fb04 	ldr.w	pc, [sp], #4
   b73f6:	bf00      	nop
   b73f8:	000b93b4 	.word	0x000b93b4

000b73fc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b73fc:	4b01      	ldr	r3, [pc, #4]	; (b7404 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b73fe:	4a02      	ldr	r2, [pc, #8]	; (b7408 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7400:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7402:	4770      	bx	lr
   b7404:	2003e6d8 	.word	0x2003e6d8
   b7408:	000b93c0 	.word	0x000b93c0

000b740c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b740c:	2300      	movs	r3, #0
   b740e:	6840      	ldr	r0, [r0, #4]
   b7410:	461a      	mov	r2, r3
   b7412:	f7ff be25 	b.w	b7060 <network_connect>

000b7416 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7416:	6840      	ldr	r0, [r0, #4]
   b7418:	2200      	movs	r2, #0
   b741a:	2102      	movs	r1, #2
   b741c:	f7ff be30 	b.w	b7080 <network_disconnect>

000b7420 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7420:	2200      	movs	r2, #0
   b7422:	6840      	ldr	r0, [r0, #4]
   b7424:	4611      	mov	r1, r2
   b7426:	f7ff be23 	b.w	b7070 <network_connecting>

000b742a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b742a:	2200      	movs	r2, #0
   b742c:	6840      	ldr	r0, [r0, #4]
   b742e:	4611      	mov	r1, r2
   b7430:	f7ff be2e 	b.w	b7090 <network_ready>

000b7434 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7434:	2300      	movs	r3, #0
   b7436:	6840      	ldr	r0, [r0, #4]
   b7438:	461a      	mov	r2, r3
   b743a:	4619      	mov	r1, r3
   b743c:	f7ff be30 	b.w	b70a0 <network_on>

000b7440 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7440:	2300      	movs	r3, #0
   b7442:	6840      	ldr	r0, [r0, #4]
   b7444:	461a      	mov	r2, r3
   b7446:	4619      	mov	r1, r3
   b7448:	f7ff be32 	b.w	b70b0 <network_off>

000b744c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b744c:	6840      	ldr	r0, [r0, #4]
   b744e:	2100      	movs	r1, #0
   b7450:	f7ff be56 	b.w	b7100 <network_is_on>

000b7454 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7454:	6840      	ldr	r0, [r0, #4]
   b7456:	2100      	movs	r1, #0
   b7458:	f7ff be5a 	b.w	b7110 <network_is_off>

000b745c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b745c:	6840      	ldr	r0, [r0, #4]
   b745e:	2200      	movs	r2, #0
   b7460:	f081 0101 	eor.w	r1, r1, #1
   b7464:	f7ff be2c 	b.w	b70c0 <network_listen>

000b7468 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7468:	6840      	ldr	r0, [r0, #4]
   b746a:	2200      	movs	r2, #0
   b746c:	f7ff be38 	b.w	b70e0 <network_set_listen_timeout>

000b7470 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7470:	2200      	movs	r2, #0
   b7472:	6840      	ldr	r0, [r0, #4]
   b7474:	4611      	mov	r1, r2
   b7476:	f7ff be3b 	b.w	b70f0 <network_get_listen_timeout>

000b747a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b747a:	2200      	movs	r2, #0
   b747c:	6840      	ldr	r0, [r0, #4]
   b747e:	4611      	mov	r1, r2
   b7480:	f7ff be26 	b.w	b70d0 <network_listening>

000b7484 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7488:	b095      	sub	sp, #84	; 0x54
   b748a:	4614      	mov	r4, r2
   b748c:	460d      	mov	r5, r1
   b748e:	4607      	mov	r7, r0
    IPAddress addr;
   b7490:	f7ff ff60 	bl	b7354 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7494:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7496:	221c      	movs	r2, #28
   b7498:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b749a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b749c:	f001 fb08 	bl	b8ab0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b74a0:	2340      	movs	r3, #64	; 0x40
   b74a2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b74a4:	4620      	mov	r0, r4
   b74a6:	466b      	mov	r3, sp
   b74a8:	aa0c      	add	r2, sp, #48	; 0x30
   b74aa:	2100      	movs	r1, #0
   b74ac:	f7ff fc94 	bl	b6dd8 <netdb_getaddrinfo>
    if (!r) {
   b74b0:	4604      	mov	r4, r0
   b74b2:	2800      	cmp	r0, #0
   b74b4:	d14b      	bne.n	b754e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b74b6:	4602      	mov	r2, r0
   b74b8:	2101      	movs	r1, #1
   b74ba:	6868      	ldr	r0, [r5, #4]
   b74bc:	f7ff fde8 	bl	b7090 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b74c0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b74c2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b74c4:	4622      	mov	r2, r4
   b74c6:	6868      	ldr	r0, [r5, #4]
   b74c8:	f7ff fde2 	bl	b7090 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b74cc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b74ce:	4681      	mov	r9, r0
        bool ok = false;
   b74d0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b74d2:	2e00      	cmp	r6, #0
   b74d4:	d03b      	beq.n	b754e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b74d6:	2900      	cmp	r1, #0
   b74d8:	d139      	bne.n	b754e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b74da:	6873      	ldr	r3, [r6, #4]
   b74dc:	2b02      	cmp	r3, #2
   b74de:	d003      	beq.n	b74e8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b74e0:	2b0a      	cmp	r3, #10
   b74e2:	d011      	beq.n	b7508 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b74e4:	69f6      	ldr	r6, [r6, #28]
   b74e6:	e7f4      	b.n	b74d2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b74e8:	f1b8 0f00 	cmp.w	r8, #0
   b74ec:	d0fa      	beq.n	b74e4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b74ee:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b74f0:	a806      	add	r0, sp, #24
   b74f2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b74f4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b74f6:	f7ff ff71 	bl	b73dc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b74fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b74fc:	1d3c      	adds	r4, r7, #4
   b74fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7500:	682b      	ldr	r3, [r5, #0]
   b7502:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7504:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7506:	e7ed      	b.n	b74e4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7508:	f1b9 0f00 	cmp.w	r9, #0
   b750c:	d0ea      	beq.n	b74e4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b750e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7510:	2210      	movs	r2, #16
   b7512:	a801      	add	r0, sp, #4
   b7514:	f001 facc 	bl	b8ab0 <memset>
                    a.v = 6;
   b7518:	2306      	movs	r3, #6
   b751a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b751e:	ad01      	add	r5, sp, #4
   b7520:	f104 0308 	add.w	r3, r4, #8
   b7524:	3418      	adds	r4, #24
   b7526:	6818      	ldr	r0, [r3, #0]
   b7528:	6859      	ldr	r1, [r3, #4]
   b752a:	462a      	mov	r2, r5
   b752c:	c203      	stmia	r2!, {r0, r1}
   b752e:	3308      	adds	r3, #8
   b7530:	42a3      	cmp	r3, r4
   b7532:	4615      	mov	r5, r2
   b7534:	d1f7      	bne.n	b7526 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7536:	a901      	add	r1, sp, #4
   b7538:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b753a:	ad07      	add	r5, sp, #28
   b753c:	f7ff ff18 	bl	b7370 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7542:	1d3c      	adds	r4, r7, #4
   b7544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7546:	682b      	ldr	r3, [r5, #0]
   b7548:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b754a:	4649      	mov	r1, r9
   b754c:	e7ca      	b.n	b74e4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b754e:	9800      	ldr	r0, [sp, #0]
   b7550:	f7ff fc3a 	bl	b6dc8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7554:	4638      	mov	r0, r7
   b7556:	b015      	add	sp, #84	; 0x54
   b7558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b755c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b755c:	4b02      	ldr	r3, [pc, #8]	; (b7568 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b755e:	4a03      	ldr	r2, [pc, #12]	; (b756c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7560:	601a      	str	r2, [r3, #0]
   b7562:	2200      	movs	r2, #0
   b7564:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b7566:	4770      	bx	lr
   b7568:	2003e6dc 	.word	0x2003e6dc
   b756c:	000b93cc 	.word	0x000b93cc

000b7570 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7572:	4606      	mov	r6, r0
   b7574:	460d      	mov	r5, r1
  size_t n = 0;
   b7576:	188f      	adds	r7, r1, r2
   b7578:	2400      	movs	r4, #0
  while (size--) {
   b757a:	42bd      	cmp	r5, r7
   b757c:	d00c      	beq.n	b7598 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b757e:	6833      	ldr	r3, [r6, #0]
   b7580:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7584:	689b      	ldr	r3, [r3, #8]
   b7586:	4630      	mov	r0, r6
   b7588:	4798      	blx	r3
     if (chunk>=0)
   b758a:	1e03      	subs	r3, r0, #0
   b758c:	db01      	blt.n	b7592 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b758e:	441c      	add	r4, r3
  while (size--) {
   b7590:	e7f3      	b.n	b757a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7592:	2c00      	cmp	r4, #0
   b7594:	bf08      	it	eq
   b7596:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7598:	4620      	mov	r0, r4
   b759a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b759c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b759c:	b513      	push	{r0, r1, r4, lr}
   b759e:	4604      	mov	r4, r0
    }
   b75a0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b75a2:	b159      	cbz	r1, b75bc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b75a4:	9101      	str	r1, [sp, #4]
   b75a6:	f7fd f9f9 	bl	b499c <strlen>
   b75aa:	6823      	ldr	r3, [r4, #0]
   b75ac:	9901      	ldr	r1, [sp, #4]
   b75ae:	68db      	ldr	r3, [r3, #12]
   b75b0:	4602      	mov	r2, r0
   b75b2:	4620      	mov	r0, r4
    }
   b75b4:	b002      	add	sp, #8
   b75b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b75ba:	4718      	bx	r3
    }
   b75bc:	b002      	add	sp, #8
   b75be:	bd10      	pop	{r4, pc}

000b75c0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b75c0:	b508      	push	{r3, lr}
  return write(str);
   b75c2:	f7ff ffeb 	bl	b759c <_ZN5Print5writeEPKc>
}
   b75c6:	bd08      	pop	{r3, pc}

000b75c8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b75c8:	6803      	ldr	r3, [r0, #0]
   b75ca:	689b      	ldr	r3, [r3, #8]
   b75cc:	4718      	bx	r3

000b75ce <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b75ce:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b75d0:	210d      	movs	r1, #13
{
   b75d2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b75d4:	f7ff fff8 	bl	b75c8 <_ZN5Print5printEc>
  n += print('\n');
   b75d8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b75da:	4604      	mov	r4, r0
  n += print('\n');
   b75dc:	4628      	mov	r0, r5
   b75de:	f7ff fff3 	bl	b75c8 <_ZN5Print5printEc>
  return n;
}
   b75e2:	4420      	add	r0, r4
   b75e4:	bd38      	pop	{r3, r4, r5, pc}

000b75e6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b75e6:	b538      	push	{r3, r4, r5, lr}
   b75e8:	4605      	mov	r5, r0
  return write(str);
   b75ea:	f7ff ffd7 	bl	b759c <_ZN5Print5writeEPKc>
   b75ee:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b75f0:	4628      	mov	r0, r5
   b75f2:	f7ff ffec 	bl	b75ce <_ZN5Print7printlnEv>
  return n;
}
   b75f6:	4420      	add	r0, r4
   b75f8:	bd38      	pop	{r3, r4, r5, pc}

000b75fa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b75fa:	b530      	push	{r4, r5, lr}
   b75fc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b75fe:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7600:	2a01      	cmp	r2, #1
  *str = '\0';
   b7602:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7606:	bf98      	it	ls
   b7608:	220a      	movls	r2, #10
   b760a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b760c:	460d      	mov	r5, r1
   b760e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7612:	fb01 5312 	mls	r3, r1, r2, r5
   b7616:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b761a:	2b09      	cmp	r3, #9
   b761c:	bf94      	ite	ls
   b761e:	3330      	addls	r3, #48	; 0x30
   b7620:	3337      	addhi	r3, #55	; 0x37
   b7622:	b2db      	uxtb	r3, r3
  } while(n);
   b7624:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7626:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b762a:	d9ef      	bls.n	b760c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b762c:	4621      	mov	r1, r4
   b762e:	f7ff ffb5 	bl	b759c <_ZN5Print5writeEPKc>
}
   b7632:	b00b      	add	sp, #44	; 0x2c
   b7634:	bd30      	pop	{r4, r5, pc}
	...

000b7638 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b7638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b763c:	ec55 4b10 	vmov	r4, r5, d0
   b7640:	4606      	mov	r6, r0
   b7642:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b7644:	ee10 2a10 	vmov	r2, s0
   b7648:	ee10 0a10 	vmov	r0, s0
   b764c:	462b      	mov	r3, r5
   b764e:	4629      	mov	r1, r5
   b7650:	f7fd f93c 	bl	b48cc <__aeabi_dcmpun>
   b7654:	b140      	cbz	r0, b7668 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b7656:	4953      	ldr	r1, [pc, #332]	; (b77a4 <_ZN5Print10printFloatEdh+0x16c>)
   b7658:	4630      	mov	r0, r6
   b765a:	f7ff ff9f 	bl	b759c <_ZN5Print5writeEPKc>
   b765e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b7660:	4650      	mov	r0, sl
   b7662:	b003      	add	sp, #12
   b7664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b7668:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b766c:	4b4e      	ldr	r3, [pc, #312]	; (b77a8 <_ZN5Print10printFloatEdh+0x170>)
   b766e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7672:	4620      	mov	r0, r4
   b7674:	4649      	mov	r1, r9
   b7676:	f7fd f929 	bl	b48cc <__aeabi_dcmpun>
   b767a:	b948      	cbnz	r0, b7690 <_ZN5Print10printFloatEdh+0x58>
   b767c:	4b4a      	ldr	r3, [pc, #296]	; (b77a8 <_ZN5Print10printFloatEdh+0x170>)
   b767e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7682:	4620      	mov	r0, r4
   b7684:	4649      	mov	r1, r9
   b7686:	f7fd f903 	bl	b4890 <__aeabi_dcmple>
   b768a:	b908      	cbnz	r0, b7690 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b768c:	4947      	ldr	r1, [pc, #284]	; (b77ac <_ZN5Print10printFloatEdh+0x174>)
   b768e:	e7e3      	b.n	b7658 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b7690:	4b47      	ldr	r3, [pc, #284]	; (b77b0 <_ZN5Print10printFloatEdh+0x178>)
   b7692:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b7696:	4620      	mov	r0, r4
   b7698:	4629      	mov	r1, r5
   b769a:	f7fd f90d 	bl	b48b8 <__aeabi_dcmpgt>
   b769e:	b108      	cbz	r0, b76a4 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b76a0:	4944      	ldr	r1, [pc, #272]	; (b77b4 <_ZN5Print10printFloatEdh+0x17c>)
   b76a2:	e7d9      	b.n	b7658 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b76a4:	4b44      	ldr	r3, [pc, #272]	; (b77b8 <_ZN5Print10printFloatEdh+0x180>)
   b76a6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b76aa:	4620      	mov	r0, r4
   b76ac:	4629      	mov	r1, r5
   b76ae:	f7fd f8e5 	bl	b487c <__aeabi_dcmplt>
   b76b2:	2800      	cmp	r0, #0
   b76b4:	d1f4      	bne.n	b76a0 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b76b6:	2200      	movs	r2, #0
   b76b8:	2300      	movs	r3, #0
   b76ba:	4620      	mov	r0, r4
   b76bc:	4629      	mov	r1, r5
   b76be:	f7fd f8dd 	bl	b487c <__aeabi_dcmplt>
   b76c2:	b1d0      	cbz	r0, b76fa <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b76c4:	212d      	movs	r1, #45	; 0x2d
   b76c6:	4630      	mov	r0, r6
   b76c8:	f7ff ff7e 	bl	b75c8 <_ZN5Print5printEc>
     number = -number;
   b76cc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b76d0:	4682      	mov	sl, r0
     number = -number;
   b76d2:	461d      	mov	r5, r3
  double rounding = 0.5;
   b76d4:	4939      	ldr	r1, [pc, #228]	; (b77bc <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b76d6:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b77c4 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b76da:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b76de:	2000      	movs	r0, #0
    rounding /= 10.0;
   b76e0:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b76e4:	fa5f f38b 	uxtb.w	r3, fp
   b76e8:	429f      	cmp	r7, r3
   b76ea:	d908      	bls.n	b76fe <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b76ec:	4642      	mov	r2, r8
   b76ee:	464b      	mov	r3, r9
   b76f0:	f7fc ff7c 	bl	b45ec <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b76f4:	f10b 0b01 	add.w	fp, fp, #1
   b76f8:	e7f4      	b.n	b76e4 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b76fa:	4682      	mov	sl, r0
   b76fc:	e7ea      	b.n	b76d4 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b76fe:	4622      	mov	r2, r4
   b7700:	462b      	mov	r3, r5
   b7702:	f7fc fc93 	bl	b402c <__adddf3>
   b7706:	460d      	mov	r5, r1
   b7708:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b770a:	f7fd f91d 	bl	b4948 <__aeabi_d2uiz>
   b770e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b7710:	f7fc fdc8 	bl	b42a4 <__aeabi_ui2d>
   b7714:	4602      	mov	r2, r0
   b7716:	460b      	mov	r3, r1
   b7718:	4620      	mov	r0, r4
   b771a:	4629      	mov	r1, r5
   b771c:	f7fc fc84 	bl	b4028 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b7720:	220a      	movs	r2, #10
   b7722:	4604      	mov	r4, r0
   b7724:	460d      	mov	r5, r1
   b7726:	4630      	mov	r0, r6
   b7728:	4641      	mov	r1, r8
   b772a:	f7ff ff66 	bl	b75fa <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b772e:	4482      	add	sl, r0
  if (digits > 0) {
   b7730:	2f00      	cmp	r7, #0
   b7732:	d095      	beq.n	b7660 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b7734:	4922      	ldr	r1, [pc, #136]	; (b77c0 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b7736:	f8df 908c 	ldr.w	r9, [pc, #140]	; b77c4 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b773a:	4630      	mov	r0, r6
   b773c:	f7ff ff2e 	bl	b759c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b7740:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b7744:	4482      	add	sl, r0
  while (digits-- > 0)
   b7746:	2f00      	cmp	r7, #0
   b7748:	d08a      	beq.n	b7660 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b774a:	4642      	mov	r2, r8
   b774c:	464b      	mov	r3, r9
   b774e:	4620      	mov	r0, r4
   b7750:	4629      	mov	r1, r5
   b7752:	f7fc fe21 	bl	b4398 <__aeabi_dmul>
   b7756:	4604      	mov	r4, r0
   b7758:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b775a:	f7fd f8cd 	bl	b48f8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b775e:	f1b0 0b00 	subs.w	fp, r0, #0
   b7762:	da1c      	bge.n	b779e <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b7764:	212d      	movs	r1, #45	; 0x2d
   b7766:	4630      	mov	r0, r6
   b7768:	f7ff ff2e 	bl	b75c8 <_ZN5Print5printEc>
            val = -n;
   b776c:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b7770:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b7772:	220a      	movs	r2, #10
   b7774:	4630      	mov	r0, r6
   b7776:	9301      	str	r3, [sp, #4]
   b7778:	f7ff ff3f 	bl	b75fa <_ZN5Print11printNumberEmh>
   b777c:	9b01      	ldr	r3, [sp, #4]
   b777e:	4418      	add	r0, r3
    n += print(toPrint);
   b7780:	4482      	add	sl, r0
    remainder -= toPrint;
   b7782:	4658      	mov	r0, fp
   b7784:	f7fc fd9e 	bl	b42c4 <__aeabi_i2d>
   b7788:	4602      	mov	r2, r0
   b778a:	460b      	mov	r3, r1
   b778c:	4620      	mov	r0, r4
   b778e:	4629      	mov	r1, r5
   b7790:	f7fc fc4a 	bl	b4028 <__aeabi_dsub>
   b7794:	3f01      	subs	r7, #1
   b7796:	4604      	mov	r4, r0
   b7798:	460d      	mov	r5, r1
   b779a:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b779c:	e7d3      	b.n	b7746 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b779e:	4659      	mov	r1, fp
        size_t t = 0;
   b77a0:	2300      	movs	r3, #0
   b77a2:	e7e6      	b.n	b7772 <_ZN5Print10printFloatEdh+0x13a>
   b77a4:	000b9400 	.word	0x000b9400
   b77a8:	7fefffff 	.word	0x7fefffff
   b77ac:	000b9404 	.word	0x000b9404
   b77b0:	41efffff 	.word	0x41efffff
   b77b4:	000b9408 	.word	0x000b9408
   b77b8:	c1efffff 	.word	0xc1efffff
   b77bc:	3fe00000 	.word	0x3fe00000
   b77c0:	000b940c 	.word	0x000b940c
   b77c4:	40240000 	.word	0x40240000

000b77c8 <_ZN5Print7printlnEdi>:
{
   b77c8:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b77ca:	b2c9      	uxtb	r1, r1
{
   b77cc:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b77ce:	f7ff ff33 	bl	b7638 <_ZN5Print10printFloatEdh>
   b77d2:	4604      	mov	r4, r0
  n += println();
   b77d4:	4628      	mov	r0, r5
   b77d6:	f7ff fefa 	bl	b75ce <_ZN5Print7printlnEv>
}
   b77da:	4420      	add	r0, r4
   b77dc:	bd38      	pop	{r3, r4, r5, pc}

000b77de <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b77de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b77e2:	b086      	sub	sp, #24
   b77e4:	af00      	add	r7, sp, #0
   b77e6:	4605      	mov	r5, r0
   b77e8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b77ea:	1d38      	adds	r0, r7, #4
   b77ec:	2114      	movs	r1, #20
{
   b77ee:	4614      	mov	r4, r2
    va_copy(args2, args);
   b77f0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b77f2:	f7ff fcb5 	bl	b7160 <vsnprintf>

    if (n<bufsize)
   b77f6:	2813      	cmp	r0, #19
   b77f8:	d80e      	bhi.n	b7818 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b77fa:	1d39      	adds	r1, r7, #4
   b77fc:	4628      	mov	r0, r5
   b77fe:	f7ff fecd 	bl	b759c <_ZN5Print5writeEPKc>
   b7802:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7804:	b11e      	cbz	r6, b780e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7806:	4628      	mov	r0, r5
   b7808:	f7ff fee1 	bl	b75ce <_ZN5Print7printlnEv>
   b780c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b780e:	4620      	mov	r0, r4
   b7810:	3718      	adds	r7, #24
   b7812:	46bd      	mov	sp, r7
   b7814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7818:	f100 0308 	add.w	r3, r0, #8
   b781c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7820:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7822:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7826:	4622      	mov	r2, r4
   b7828:	1c41      	adds	r1, r0, #1
   b782a:	683b      	ldr	r3, [r7, #0]
   b782c:	4668      	mov	r0, sp
   b782e:	f7ff fc97 	bl	b7160 <vsnprintf>
  return write(str);
   b7832:	4669      	mov	r1, sp
   b7834:	4628      	mov	r0, r5
   b7836:	f7ff feb1 	bl	b759c <_ZN5Print5writeEPKc>
   b783a:	4604      	mov	r4, r0
   b783c:	46c5      	mov	sp, r8
   b783e:	e7e1      	b.n	b7804 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7840 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7840:	4b01      	ldr	r3, [pc, #4]	; (b7848 <_GLOBAL__sub_I_RGB+0x8>)
   b7842:	2200      	movs	r2, #0
   b7844:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7846:	4770      	bx	lr
   b7848:	2003e6e4 	.word	0x2003e6e4

000b784c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b784c:	2100      	movs	r1, #0
   b784e:	f7ff bb33 	b.w	b6eb8 <hal_spi_release>

000b7852 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7852:	2100      	movs	r1, #0
   b7854:	f7ff bb28 	b.w	b6ea8 <hal_spi_acquire>

000b7858 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7858:	b510      	push	{r4, lr}
   b785a:	4604      	mov	r4, r0
   b785c:	4608      	mov	r0, r1
{
    _spi = spi;
   b785e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7860:	f7ff fb02 	bl	b6e68 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7864:	2300      	movs	r3, #0
   b7866:	6063      	str	r3, [r4, #4]
}
   b7868:	4620      	mov	r0, r4
   b786a:	bd10      	pop	{r4, pc}

000b786c <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
   b786c:	b513      	push	{r0, r1, r4, lr}
   b786e:	4604      	mov	r4, r0
    if (!lock())
   b7870:	7800      	ldrb	r0, [r0, #0]
{
   b7872:	9101      	str	r1, [sp, #4]
    if (!lock())
   b7874:	f7ff ffed 	bl	b7852 <_ZN8SPIClass4lockEv.isra.0>
   b7878:	9901      	ldr	r1, [sp, #4]
   b787a:	b948      	cbnz	r0, b7890 <_ZN8SPIClass5beginEt+0x24>
   b787c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, ss_pin);
   b787e:	9001      	str	r0, [sp, #4]
   b7880:	f7ff fae2 	bl	b6e48 <hal_spi_begin>
        unlock();
   b7884:	9801      	ldr	r0, [sp, #4]
    }
}
   b7886:	b002      	add	sp, #8
   b7888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b788c:	f7ff bfde 	b.w	b784c <_ZN8SPIClass6unlockEv.isra.0>
   b7890:	b002      	add	sp, #8
   b7892:	bd10      	pop	{r4, pc}

000b7894 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7894:	7800      	ldrb	r0, [r0, #0]
   b7896:	f7ff bfd9 	b.w	b784c <_ZN8SPIClass6unlockEv.isra.0>
	...

000b789c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b789c:	0840      	lsrs	r0, r0, #1
{
   b789e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b78a0:	6018      	str	r0, [r3, #0]
   b78a2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b78a4:	6818      	ldr	r0, [r3, #0]
   b78a6:	4288      	cmp	r0, r1
   b78a8:	b2e5      	uxtb	r5, r4
   b78aa:	d906      	bls.n	b78ba <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b78ac:	3401      	adds	r4, #1
   b78ae:	2c08      	cmp	r4, #8
   b78b0:	d002      	beq.n	b78b8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b78b2:	0840      	lsrs	r0, r0, #1
   b78b4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b78b6:	e7f5      	b.n	b78a4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b78b8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b78ba:	4b02      	ldr	r3, [pc, #8]	; (b78c4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b78bc:	5d5b      	ldrb	r3, [r3, r5]
   b78be:	7013      	strb	r3, [r2, #0]
}
   b78c0:	bd30      	pop	{r4, r5, pc}
   b78c2:	bf00      	nop
   b78c4:	000b940e 	.word	0x000b940e

000b78c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b78c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b78cc:	4606      	mov	r6, r0
   b78ce:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b78d0:	7800      	ldrb	r0, [r0, #0]
{
   b78d2:	460c      	mov	r4, r1
    CHECK(lock());
   b78d4:	f7ff ffbd 	bl	b7852 <_ZN8SPIClass4lockEv.isra.0>
   b78d8:	2800      	cmp	r0, #0
   b78da:	db1b      	blt.n	b7914 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b78dc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b78de:	2214      	movs	r2, #20
   b78e0:	2100      	movs	r1, #0
   b78e2:	a809      	add	r0, sp, #36	; 0x24
   b78e4:	f001 f8e4 	bl	b8ab0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b78e8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b78ea:	2200      	movs	r2, #0
   b78ec:	a909      	add	r1, sp, #36	; 0x24
   b78ee:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b78f0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b78f4:	f7ff fac8 	bl	b6e88 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b78f8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b78fc:	b113      	cbz	r3, b7904 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b78fe:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7902:	b155      	cbz	r5, b791a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7904:	2700      	movs	r7, #0
   b7906:	46b9      	mov	r9, r7
   b7908:	46b8      	mov	r8, r7
   b790a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b790c:	7923      	ldrb	r3, [r4, #4]
   b790e:	b15d      	cbz	r5, b7928 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7910:	b1c3      	cbz	r3, b7944 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7912:	2000      	movs	r0, #0
}
   b7914:	b00f      	add	sp, #60	; 0x3c
   b7916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b791a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b791e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b7922:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7926:	e7f1      	b.n	b790c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7928:	2b00      	cmp	r3, #0
   b792a:	d135      	bne.n	b7998 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b792c:	68a3      	ldr	r3, [r4, #8]
   b792e:	4543      	cmp	r3, r8
   b7930:	d108      	bne.n	b7944 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7932:	f88d 9020 	strb.w	r9, [sp, #32]
   b7936:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b793a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b793e:	89a3      	ldrh	r3, [r4, #12]
   b7940:	429a      	cmp	r2, r3
   b7942:	d0e6      	beq.n	b7912 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7944:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7946:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7948:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b794c:	980a      	ldr	r0, [sp, #40]	; 0x28
   b794e:	ab04      	add	r3, sp, #16
   b7950:	f10d 020f 	add.w	r2, sp, #15
   b7954:	f7ff ffa2 	bl	b789c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7958:	7921      	ldrb	r1, [r4, #4]
   b795a:	b985      	cbnz	r5, b797e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b795c:	b989      	cbnz	r1, b7982 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b795e:	68a3      	ldr	r3, [r4, #8]
   b7960:	4543      	cmp	r3, r8
   b7962:	d30e      	bcc.n	b7982 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7964:	f88d 9020 	strb.w	r9, [sp, #32]
   b7968:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b796c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7970:	89a3      	ldrh	r3, [r4, #12]
   b7972:	429a      	cmp	r2, r3
   b7974:	d105      	bne.n	b7982 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7976:	9b04      	ldr	r3, [sp, #16]
   b7978:	4543      	cmp	r3, r8
   b797a:	d102      	bne.n	b7982 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b797c:	e7c9      	b.n	b7912 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b797e:	2900      	cmp	r1, #0
   b7980:	d1f9      	bne.n	b7976 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7982:	2300      	movs	r3, #0
   b7984:	9301      	str	r3, [sp, #4]
   b7986:	7b63      	ldrb	r3, [r4, #13]
   b7988:	9300      	str	r3, [sp, #0]
   b798a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b798e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7990:	7830      	ldrb	r0, [r6, #0]
   b7992:	f7ff fa81 	bl	b6e98 <hal_spi_set_settings>
   b7996:	e7bc      	b.n	b7912 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7998:	e9cd 5500 	strd	r5, r5, [sp]
   b799c:	462b      	mov	r3, r5
   b799e:	462a      	mov	r2, r5
   b79a0:	2101      	movs	r1, #1
   b79a2:	e7f5      	b.n	b7990 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b79a4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b79a4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b79a6:	7800      	ldrb	r0, [r0, #0]
   b79a8:	f7ff fa56 	bl	b6e58 <hal_spi_transfer>
}
   b79ac:	b2c0      	uxtb	r0, r0
   b79ae:	bd08      	pop	{r3, pc}

000b79b0 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b79b0:	b510      	push	{r4, lr}
   b79b2:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b79b4:	f7ff f960 	bl	b6c78 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b79b8:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b79ba:	6823      	ldr	r3, [r4, #0]
   b79bc:	4620      	mov	r0, r4
   b79be:	695b      	ldr	r3, [r3, #20]
   b79c0:	4798      	blx	r3
    if (c >= 0) return c;
   b79c2:	2800      	cmp	r0, #0
   b79c4:	da08      	bge.n	b79d8 <_ZN6Stream9timedReadEv+0x28>
   b79c6:	f7ff f957 	bl	b6c78 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b79ca:	68e3      	ldr	r3, [r4, #12]
   b79cc:	1ac0      	subs	r0, r0, r3
   b79ce:	68a3      	ldr	r3, [r4, #8]
   b79d0:	4298      	cmp	r0, r3
   b79d2:	d3f2      	bcc.n	b79ba <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b79d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b79d8:	bd10      	pop	{r4, pc}

000b79da <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b79da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b79de:	4607      	mov	r7, r0
   b79e0:	460c      	mov	r4, r1
   b79e2:	188e      	adds	r6, r1, r2
   b79e4:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b79e6:	42b5      	cmp	r5, r6
   b79e8:	eba5 0804 	sub.w	r8, r5, r4
   b79ec:	d007      	beq.n	b79fe <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b79ee:	4638      	mov	r0, r7
   b79f0:	f7ff ffde 	bl	b79b0 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b79f4:	1e03      	subs	r3, r0, #0
   b79f6:	db02      	blt.n	b79fe <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b79f8:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b79fc:	e7f3      	b.n	b79e6 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b79fe:	4640      	mov	r0, r8
   b7a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7a04 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7a04:	b510      	push	{r4, lr}
   b7a06:	4604      	mov	r4, r0
{
	free(buffer);
   b7a08:	6800      	ldr	r0, [r0, #0]
   b7a0a:	f7ff fb91 	bl	b7130 <free>
}
   b7a0e:	4620      	mov	r0, r4
   b7a10:	bd10      	pop	{r4, pc}

000b7a12 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b7a12:	b510      	push	{r4, lr}
   b7a14:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7a16:	6800      	ldr	r0, [r0, #0]
   b7a18:	b108      	cbz	r0, b7a1e <_ZN6String10invalidateEv+0xc>
   b7a1a:	f7ff fb89 	bl	b7130 <free>
	buffer = NULL;
   b7a1e:	2300      	movs	r3, #0
	capacity = len = 0;
   b7a20:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7a24:	6023      	str	r3, [r4, #0]
}
   b7a26:	bd10      	pop	{r4, pc}

000b7a28 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7a28:	b538      	push	{r3, r4, r5, lr}
   b7a2a:	4604      	mov	r4, r0
   b7a2c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7a2e:	6800      	ldr	r0, [r0, #0]
   b7a30:	3101      	adds	r1, #1
   b7a32:	f7ff fb85 	bl	b7140 <realloc>
	if (newbuffer) {
   b7a36:	b110      	cbz	r0, b7a3e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7a38:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7a3c:	2001      	movs	r0, #1
	}
	return 0;
}
   b7a3e:	bd38      	pop	{r3, r4, r5, pc}

000b7a40 <_ZN6String7reserveEj>:
{
   b7a40:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7a42:	6803      	ldr	r3, [r0, #0]
{
   b7a44:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7a46:	b123      	cbz	r3, b7a52 <_ZN6String7reserveEj+0x12>
   b7a48:	6843      	ldr	r3, [r0, #4]
   b7a4a:	428b      	cmp	r3, r1
   b7a4c:	d301      	bcc.n	b7a52 <_ZN6String7reserveEj+0x12>
   b7a4e:	2001      	movs	r0, #1
}
   b7a50:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7a52:	4620      	mov	r0, r4
   b7a54:	f7ff ffe8 	bl	b7a28 <_ZN6String12changeBufferEj>
   b7a58:	2800      	cmp	r0, #0
   b7a5a:	d0f9      	beq.n	b7a50 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7a5c:	68a3      	ldr	r3, [r4, #8]
   b7a5e:	2b00      	cmp	r3, #0
   b7a60:	d1f5      	bne.n	b7a4e <_ZN6String7reserveEj+0xe>
   b7a62:	6822      	ldr	r2, [r4, #0]
   b7a64:	7013      	strb	r3, [r2, #0]
   b7a66:	e7f2      	b.n	b7a4e <_ZN6String7reserveEj+0xe>

000b7a68 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7a6a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7a6c:	4611      	mov	r1, r2
   b7a6e:	9201      	str	r2, [sp, #4]
{
   b7a70:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7a72:	f7ff ffe5 	bl	b7a40 <_ZN6String7reserveEj>
   b7a76:	9a01      	ldr	r2, [sp, #4]
   b7a78:	b928      	cbnz	r0, b7a86 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7a7a:	4620      	mov	r0, r4
   b7a7c:	f7ff ffc9 	bl	b7a12 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7a80:	4620      	mov	r0, r4
   b7a82:	b003      	add	sp, #12
   b7a84:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7a86:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7a88:	4629      	mov	r1, r5
   b7a8a:	6820      	ldr	r0, [r4, #0]
   b7a8c:	f001 f802 	bl	b8a94 <memcpy>
	buffer[len] = 0;
   b7a90:	6822      	ldr	r2, [r4, #0]
   b7a92:	68a3      	ldr	r3, [r4, #8]
   b7a94:	2100      	movs	r1, #0
   b7a96:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7a98:	e7f2      	b.n	b7a80 <_ZN6String4copyEPKcj+0x18>

000b7a9a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7a9a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7a9c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7a9e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7aa2:	4604      	mov	r4, r0
	len = 0;
   b7aa4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7aa6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7aa8:	b141      	cbz	r1, b7abc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7aaa:	4608      	mov	r0, r1
   b7aac:	9101      	str	r1, [sp, #4]
   b7aae:	f7fc ff75 	bl	b499c <strlen>
   b7ab2:	9901      	ldr	r1, [sp, #4]
   b7ab4:	4602      	mov	r2, r0
   b7ab6:	4620      	mov	r0, r4
   b7ab8:	f7ff ffd6 	bl	b7a68 <_ZN6String4copyEPKcj>
}
   b7abc:	4620      	mov	r0, r4
   b7abe:	b002      	add	sp, #8
   b7ac0:	bd10      	pop	{r4, pc}

000b7ac2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b7ac2:	b538      	push	{r3, r4, r5, lr}
   b7ac4:	4605      	mov	r5, r0
	if (buffer) {
   b7ac6:	6800      	ldr	r0, [r0, #0]
{
   b7ac8:	460c      	mov	r4, r1
	if (buffer) {
   b7aca:	b168      	cbz	r0, b7ae8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b7acc:	686a      	ldr	r2, [r5, #4]
   b7ace:	688b      	ldr	r3, [r1, #8]
   b7ad0:	429a      	cmp	r2, r3
   b7ad2:	d307      	bcc.n	b7ae4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b7ad4:	6809      	ldr	r1, [r1, #0]
   b7ad6:	f001 f821 	bl	b8b1c <strcpy>
			len = rhs.len;
   b7ada:	68a3      	ldr	r3, [r4, #8]
   b7adc:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b7ade:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b7ae0:	60a3      	str	r3, [r4, #8]
}
   b7ae2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b7ae4:	f7ff fb24 	bl	b7130 <free>
	buffer = rhs.buffer;
   b7ae8:	6823      	ldr	r3, [r4, #0]
   b7aea:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b7aec:	6863      	ldr	r3, [r4, #4]
   b7aee:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b7af0:	68a3      	ldr	r3, [r4, #8]
   b7af2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b7af4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b7af6:	e9c4 3300 	strd	r3, r3, [r4]
   b7afa:	e7f1      	b.n	b7ae0 <_ZN6String4moveERS_+0x1e>

000b7afc <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b7afc:	4288      	cmp	r0, r1
{
   b7afe:	b510      	push	{r4, lr}
   b7b00:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7b02:	d005      	beq.n	b7b10 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b7b04:	680b      	ldr	r3, [r1, #0]
   b7b06:	b12b      	cbz	r3, b7b14 <_ZN6StringaSERKS_+0x18>
   b7b08:	688a      	ldr	r2, [r1, #8]
   b7b0a:	4619      	mov	r1, r3
   b7b0c:	f7ff ffac 	bl	b7a68 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7b10:	4620      	mov	r0, r4
   b7b12:	bd10      	pop	{r4, pc}
	else invalidate();
   b7b14:	f7ff ff7d 	bl	b7a12 <_ZN6String10invalidateEv>
   b7b18:	e7fa      	b.n	b7b10 <_ZN6StringaSERKS_+0x14>

000b7b1a <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7b1a:	b510      	push	{r4, lr}
	buffer = NULL;
   b7b1c:	2300      	movs	r3, #0
String::String(const String &value)
   b7b1e:	4604      	mov	r4, r0
	capacity = 0;
   b7b20:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b7b24:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7b26:	7303      	strb	r3, [r0, #12]
	*this = value;
   b7b28:	f7ff ffe8 	bl	b7afc <_ZN6StringaSERKS_>
}
   b7b2c:	4620      	mov	r0, r4
   b7b2e:	bd10      	pop	{r4, pc}

000b7b30 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b7b30:	4288      	cmp	r0, r1
{
   b7b32:	b510      	push	{r4, lr}
   b7b34:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b7b36:	d001      	beq.n	b7b3c <_ZN6StringaSEOS_+0xc>
   b7b38:	f7ff ffc3 	bl	b7ac2 <_ZN6String4moveERS_>
	return *this;
}
   b7b3c:	4620      	mov	r0, r4
   b7b3e:	bd10      	pop	{r4, pc}

000b7b40 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7b40:	b513      	push	{r0, r1, r4, lr}
   b7b42:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7b44:	b159      	cbz	r1, b7b5e <_ZN6StringaSEPKc+0x1e>
   b7b46:	4608      	mov	r0, r1
   b7b48:	9101      	str	r1, [sp, #4]
   b7b4a:	f7fc ff27 	bl	b499c <strlen>
   b7b4e:	9901      	ldr	r1, [sp, #4]
   b7b50:	4602      	mov	r2, r0
   b7b52:	4620      	mov	r0, r4
   b7b54:	f7ff ff88 	bl	b7a68 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7b58:	4620      	mov	r0, r4
   b7b5a:	b002      	add	sp, #8
   b7b5c:	bd10      	pop	{r4, pc}
	else invalidate();
   b7b5e:	f7ff ff58 	bl	b7a12 <_ZN6String10invalidateEv>
   b7b62:	e7f9      	b.n	b7b58 <_ZN6StringaSEPKc+0x18>

000b7b64 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b7b64:	b510      	push	{r4, lr}
   b7b66:	4604      	mov	r4, r0
   b7b68:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b7b6a:	2300      	movs	r3, #0
	capacity = 0;
   b7b6c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b7b70:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b7b72:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b7b74:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b7b76:	a901      	add	r1, sp, #4
   b7b78:	f000 fc80 	bl	b847c <itoa>
	*this = buf;
   b7b7c:	a901      	add	r1, sp, #4
   b7b7e:	4620      	mov	r0, r4
   b7b80:	f7ff ffde 	bl	b7b40 <_ZN6StringaSEPKc>
}
   b7b84:	4620      	mov	r0, r4
   b7b86:	b00a      	add	sp, #40	; 0x28
   b7b88:	bd10      	pop	{r4, pc}

000b7b8a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b7b8a:	b570      	push	{r4, r5, r6, lr}
   b7b8c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b7b8e:	460e      	mov	r6, r1
   b7b90:	b909      	cbnz	r1, b7b96 <_ZN6String6concatEPKcj+0xc>
   b7b92:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b7b94:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b7b96:	b16a      	cbz	r2, b7bb4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b7b98:	6884      	ldr	r4, [r0, #8]
   b7b9a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b7b9c:	4621      	mov	r1, r4
   b7b9e:	f7ff ff4f 	bl	b7a40 <_ZN6String7reserveEj>
   b7ba2:	2800      	cmp	r0, #0
   b7ba4:	d0f5      	beq.n	b7b92 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b7ba6:	6828      	ldr	r0, [r5, #0]
   b7ba8:	68ab      	ldr	r3, [r5, #8]
   b7baa:	4631      	mov	r1, r6
   b7bac:	4418      	add	r0, r3
   b7bae:	f000 ffb5 	bl	b8b1c <strcpy>
	len = newlen;
   b7bb2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b7bb4:	2001      	movs	r0, #1
   b7bb6:	e7ed      	b.n	b7b94 <_ZN6String6concatEPKcj+0xa>

000b7bb8 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b7bb8:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7bba:	688a      	ldr	r2, [r1, #8]
   b7bbc:	6809      	ldr	r1, [r1, #0]
{
   b7bbe:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7bc0:	f7ff ffe3 	bl	b7b8a <_ZN6String6concatEPKcj>
   b7bc4:	b910      	cbnz	r0, b7bcc <_ZplRK15StringSumHelperRK6String+0x14>
   b7bc6:	4620      	mov	r0, r4
   b7bc8:	f7ff ff23 	bl	b7a12 <_ZN6String10invalidateEv>
	return a;
}
   b7bcc:	4620      	mov	r0, r4
   b7bce:	bd10      	pop	{r4, pc}

000b7bd0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7bd0:	4b05      	ldr	r3, [pc, #20]	; (b7be8 <_GLOBAL__sub_I_System+0x18>)
   b7bd2:	2202      	movs	r2, #2
   b7bd4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7bd6:	4b05      	ldr	r3, [pc, #20]	; (b7bec <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7bd8:	4a05      	ldr	r2, [pc, #20]	; (b7bf0 <_GLOBAL__sub_I_System+0x20>)
   b7bda:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7bdc:	2000      	movs	r0, #0
   b7bde:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7be2:	f7ff b9f9 	b.w	b6fd8 <set_system_mode>
   b7be6:	bf00      	nop
   b7be8:	2003e700 	.word	0x2003e700
   b7bec:	2003e6f4 	.word	0x2003e6f4
   b7bf0:	ffff0000 	.word	0xffff0000

000b7bf4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b7bf4:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7bf6:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b7bf8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7bfc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7bfe:	2201      	movs	r2, #1
   b7c00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7c04:	f10d 0107 	add.w	r1, sp, #7
   b7c08:	47a0      	blx	r4
}
   b7c0a:	b002      	add	sp, #8
   b7c0c:	bd10      	pop	{r4, pc}

000b7c0e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b7c0e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7c10:	6803      	ldr	r3, [r0, #0]
   b7c12:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7c18:	46a4      	mov	ip, r4
}
   b7c1a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7c1e:	4760      	bx	ip

000b7c20 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7c20:	b513      	push	{r0, r1, r4, lr}
   b7c22:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b7c24:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7c26:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b7c2a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7c2c:	f10d 0107 	add.w	r1, sp, #7
   b7c30:	2201      	movs	r2, #1
   b7c32:	47a0      	blx	r4
}
   b7c34:	b002      	add	sp, #8
   b7c36:	bd10      	pop	{r4, pc}

000b7c38 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b7c38:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7c3a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7c3c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7c40:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7c44:	429a      	cmp	r2, r3
int TCPClient::read() {
   b7c46:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7c48:	d008      	beq.n	b7c5c <_ZN9TCPClient4readEv+0x24>
   b7c4a:	6963      	ldr	r3, [r4, #20]
   b7c4c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7c50:	1c51      	adds	r1, r2, #1
   b7c52:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b7c56:	4413      	add	r3, r2
   b7c58:	7918      	ldrb	r0, [r3, #4]
}
   b7c5a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7c5c:	6803      	ldr	r3, [r0, #0]
   b7c5e:	691b      	ldr	r3, [r3, #16]
   b7c60:	4798      	blx	r3
   b7c62:	2800      	cmp	r0, #0
   b7c64:	d1f1      	bne.n	b7c4a <_ZN9TCPClient4readEv+0x12>
   b7c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7c6a:	e7f6      	b.n	b7c5a <_ZN9TCPClient4readEv+0x22>

000b7c6c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7c6c:	4770      	bx	lr

000b7c6e <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b7c6e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7c70:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b7c72:	43c0      	mvns	r0, r0
   b7c74:	0fc0      	lsrs	r0, r0, #31
   b7c76:	4770      	bx	lr

000b7c78 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7c78:	4770      	bx	lr
	...

000b7c7c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7c7c:	4b06      	ldr	r3, [pc, #24]	; (b7c98 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7c7e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7c80:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7c82:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7c86:	d005      	beq.n	b7c94 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7c88:	4608      	mov	r0, r1
   b7c8a:	f000 fde3 	bl	b8854 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7c8e:	2800      	cmp	r0, #0
   b7c90:	bf08      	it	eq
   b7c92:	2400      	moveq	r4, #0
      }
   b7c94:	4620      	mov	r0, r4
   b7c96:	bd10      	pop	{r4, pc}
   b7c98:	000b9340 	.word	0x000b9340

000b7c9c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7c9c:	b510      	push	{r4, lr}
   b7c9e:	21ac      	movs	r1, #172	; 0xac
   b7ca0:	4604      	mov	r4, r0
   b7ca2:	f7fc fec4 	bl	b4a2e <_ZdlPvj>
   b7ca6:	4620      	mov	r0, r4
   b7ca8:	bd10      	pop	{r4, pc}

000b7caa <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b7caa:	21ac      	movs	r1, #172	; 0xac
   b7cac:	f7fc bebf 	b.w	b4a2e <_ZdlPvj>

000b7cb0 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b7cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b7cb4:	f04f 0800 	mov.w	r8, #0
   b7cb8:	b086      	sub	sp, #24
   b7cba:	461c      	mov	r4, r3
   b7cbc:	f8c0 8004 	str.w	r8, [r0, #4]
   b7cc0:	4605      	mov	r5, r0
   b7cc2:	460e      	mov	r6, r1
   b7cc4:	4617      	mov	r7, r2
    struct timeval tv = {};
   b7cc6:	4641      	mov	r1, r8
   b7cc8:	2210      	movs	r2, #16
   b7cca:	a802      	add	r0, sp, #8
   b7ccc:	f000 fef0 	bl	b8ab0 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b7cd0:	1c63      	adds	r3, r4, #1
   b7cd2:	d009      	beq.n	b7ce8 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b7cd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7cd8:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b7cdc:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b7ce0:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b7ce4:	435c      	muls	r4, r3
   b7ce6:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b7ce8:	6968      	ldr	r0, [r5, #20]
   b7cea:	2310      	movs	r3, #16
   b7cec:	9300      	str	r3, [sp, #0]
   b7cee:	6800      	ldr	r0, [r0, #0]
   b7cf0:	ab02      	add	r3, sp, #8
   b7cf2:	f241 0205 	movw	r2, #4101	; 0x1005
   b7cf6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7cfa:	f7ff f875 	bl	b6de8 <sock_setsockopt>
    if (ret < 0) {
   b7cfe:	2800      	cmp	r0, #0
   b7d00:	da07      	bge.n	b7d12 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b7d02:	f7ff fa35 	bl	b7170 <__errno>
   b7d06:	6803      	ldr	r3, [r0, #0]
   b7d08:	606b      	str	r3, [r5, #4]
        return 0;
   b7d0a:	2000      	movs	r0, #0
}
   b7d0c:	b006      	add	sp, #24
   b7d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b7d12:	6968      	ldr	r0, [r5, #20]
   b7d14:	2300      	movs	r3, #0
   b7d16:	6800      	ldr	r0, [r0, #0]
   b7d18:	463a      	mov	r2, r7
   b7d1a:	4631      	mov	r1, r6
   b7d1c:	f7ff f884 	bl	b6e28 <sock_send>
    if (ret < 0) {
   b7d20:	1e03      	subs	r3, r0, #0
   b7d22:	dbee      	blt.n	b7d02 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7d24:	4618      	mov	r0, r3
   b7d26:	e7f1      	b.n	b7d0c <_ZN9TCPClient5writeEPKhjm+0x5c>

000b7d28 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b7d28:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b7d2a:	6984      	ldr	r4, [r0, #24]
   b7d2c:	4b0a      	ldr	r3, [pc, #40]	; (b7d58 <_ZN9TCPClientD1Ev+0x30>)
   b7d2e:	6003      	str	r3, [r0, #0]
   b7d30:	4605      	mov	r5, r0
   b7d32:	b17c      	cbz	r4, b7d54 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b7d34:	6863      	ldr	r3, [r4, #4]
   b7d36:	3b01      	subs	r3, #1
   b7d38:	6063      	str	r3, [r4, #4]
   b7d3a:	b95b      	cbnz	r3, b7d54 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b7d3c:	6823      	ldr	r3, [r4, #0]
   b7d3e:	4620      	mov	r0, r4
   b7d40:	689b      	ldr	r3, [r3, #8]
   b7d42:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7d44:	68a3      	ldr	r3, [r4, #8]
   b7d46:	3b01      	subs	r3, #1
   b7d48:	60a3      	str	r3, [r4, #8]
   b7d4a:	b91b      	cbnz	r3, b7d54 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b7d4c:	6823      	ldr	r3, [r4, #0]
   b7d4e:	4620      	mov	r0, r4
   b7d50:	68db      	ldr	r3, [r3, #12]
   b7d52:	4798      	blx	r3
   b7d54:	4628      	mov	r0, r5
   b7d56:	bd38      	pop	{r3, r4, r5, pc}
   b7d58:	000b9454 	.word	0x000b9454

000b7d5c <_ZN9TCPClientD0Ev>:
   b7d5c:	b510      	push	{r4, lr}
   b7d5e:	4604      	mov	r4, r0
   b7d60:	f7ff ffe2 	bl	b7d28 <_ZN9TCPClientD1Ev>
   b7d64:	4620      	mov	r0, r4
   b7d66:	211c      	movs	r1, #28
   b7d68:	f7fc fe61 	bl	b4a2e <_ZdlPvj>
   b7d6c:	4620      	mov	r0, r4
   b7d6e:	bd10      	pop	{r4, pc}

000b7d70 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7d70:	b530      	push	{r4, r5, lr}
   b7d72:	b087      	sub	sp, #28
   b7d74:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b7d76:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b7d78:	4668      	mov	r0, sp
   b7d7a:	f7ff fb2f 	bl	b73dc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7d7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7d80:	3404      	adds	r4, #4
   b7d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7d84:	682b      	ldr	r3, [r5, #0]
   b7d86:	7023      	strb	r3, [r4, #0]
    }
   b7d88:	b007      	add	sp, #28
   b7d8a:	bd30      	pop	{r4, r5, pc}

000b7d8c <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7d8c:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7d8e:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7d90:	4b05      	ldr	r3, [pc, #20]	; (b7da8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b7d92:	4604      	mov	r4, r0
   b7d94:	358c      	adds	r5, #140	; 0x8c
   b7d96:	f844 3b04 	str.w	r3, [r4], #4
   b7d9a:	4606      	mov	r6, r0
   b7d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7da0:	682b      	ldr	r3, [r5, #0]
   b7da2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b7da4:	4630      	mov	r0, r6
   b7da6:	bd70      	pop	{r4, r5, r6, pc}
   b7da8:	000b93b4 	.word	0x000b93b4

000b7dac <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7db0:	4698      	mov	r8, r3
    stop();
   b7db2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7db4:	b093      	sub	sp, #76	; 0x4c
   b7db6:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b7db8:	2400      	movs	r4, #0
    stop();
   b7dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7dbc:	4606      	mov	r6, r0
   b7dbe:	4617      	mov	r7, r2
    stop();
   b7dc0:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7dc2:	4628      	mov	r0, r5
   b7dc4:	466b      	mov	r3, sp
   b7dc6:	4622      	mov	r2, r4
   b7dc8:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b7dca:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7dcc:	f7ff f804 	bl	b6dd8 <netdb_getaddrinfo>
   b7dd0:	4605      	mov	r5, r0
   b7dd2:	2800      	cmp	r0, #0
   b7dd4:	d163      	bne.n	b7e9e <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b7dd6:	9b00      	ldr	r3, [sp, #0]
   b7dd8:	2b00      	cmp	r3, #0
   b7dda:	d04b      	beq.n	b7e74 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7ddc:	695b      	ldr	r3, [r3, #20]
   b7dde:	2b00      	cmp	r3, #0
   b7de0:	d048      	beq.n	b7e74 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b7de2:	a806      	add	r0, sp, #24
   b7de4:	f7ff fab6 	bl	b7354 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b7de8:	9b00      	ldr	r3, [sp, #0]
   b7dea:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7dec:	7863      	ldrb	r3, [r4, #1]
   b7dee:	2b02      	cmp	r3, #2
   b7df0:	d104      	bne.n	b7dfc <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b7df2:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7df4:	a806      	add	r0, sp, #24
   b7df6:	f7ff ffbb 	bl	b7d70 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b7dfa:	e026      	b.n	b7e4a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7dfc:	2b0a      	cmp	r3, #10
   b7dfe:	d124      	bne.n	b7e4a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7e00:	2211      	movs	r2, #17
   b7e02:	4629      	mov	r1, r5
   b7e04:	a801      	add	r0, sp, #4
   b7e06:	f000 fe53 	bl	b8ab0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7e0a:	68a3      	ldr	r3, [r4, #8]
   b7e0c:	2b00      	cmp	r3, #0
   b7e0e:	d038      	beq.n	b7e82 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7e10:	f104 0308 	add.w	r3, r4, #8
   b7e14:	f10d 0c04 	add.w	ip, sp, #4
   b7e18:	3418      	adds	r4, #24
   b7e1a:	6818      	ldr	r0, [r3, #0]
   b7e1c:	6859      	ldr	r1, [r3, #4]
   b7e1e:	4662      	mov	r2, ip
   b7e20:	c203      	stmia	r2!, {r0, r1}
   b7e22:	3308      	adds	r3, #8
   b7e24:	42a3      	cmp	r3, r4
   b7e26:	4694      	mov	ip, r2
   b7e28:	d1f7      	bne.n	b7e1a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b7e2a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7e2c:	a901      	add	r1, sp, #4
   b7e2e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b7e30:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7e34:	f7ff fa9c 	bl	b7370 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7e38:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7e3c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7e40:	ac07      	add	r4, sp, #28
   b7e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7e44:	f8dc 3000 	ldr.w	r3, [ip]
   b7e48:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b7e4a:	a806      	add	r0, sp, #24
   b7e4c:	f7ff faa2 	bl	b7394 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7e50:	b180      	cbz	r0, b7e74 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b7e52:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7e54:	ad07      	add	r5, sp, #28
   b7e56:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7e5a:	4b12      	ldr	r3, [pc, #72]	; (b7ea4 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7e5c:	930c      	str	r3, [sp, #48]	; 0x30
   b7e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7e60:	ac0d      	add	r4, sp, #52	; 0x34
   b7e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7e64:	682b      	ldr	r3, [r5, #0]
   b7e66:	7023      	strb	r3, [r4, #0]
   b7e68:	463a      	mov	r2, r7
   b7e6a:	4643      	mov	r3, r8
   b7e6c:	a90c      	add	r1, sp, #48	; 0x30
   b7e6e:	4630      	mov	r0, r6
   b7e70:	47c8      	blx	r9
   b7e72:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7e74:	9800      	ldr	r0, [sp, #0]
   b7e76:	f7fe ffa7 	bl	b6dc8 <netdb_freeaddrinfo>
}
   b7e7a:	4628      	mov	r0, r5
   b7e7c:	b013      	add	sp, #76	; 0x4c
   b7e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7e82:	68e3      	ldr	r3, [r4, #12]
   b7e84:	2b00      	cmp	r3, #0
   b7e86:	d1c3      	bne.n	b7e10 <_ZN9TCPClient7connectEPKctm+0x64>
   b7e88:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7e8c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7e90:	f7fe ff82 	bl	b6d98 <inet_htonl>
   b7e94:	4581      	cmp	r9, r0
   b7e96:	d1bb      	bne.n	b7e10 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b7e98:	f104 0114 	add.w	r1, r4, #20
   b7e9c:	e7aa      	b.n	b7df4 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7e9e:	4625      	mov	r5, r4
   b7ea0:	e7e8      	b.n	b7e74 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7ea2:	bf00      	nop
   b7ea4:	000b93b4 	.word	0x000b93b4

000b7ea8 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b7ea8:	b538      	push	{r3, r4, r5, lr}
   b7eaa:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7eac:	681a      	ldr	r2, [r3, #0]
   b7eae:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7eb0:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b7eb2:	da10      	bge.n	b7ed6 <_ZN9TCPClient9connectedEv+0x2e>
   b7eb4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7eb8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7ebc:	429a      	cmp	r2, r3
   b7ebe:	d10a      	bne.n	b7ed6 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7ec0:	6803      	ldr	r3, [r0, #0]
   b7ec2:	691b      	ldr	r3, [r3, #16]
   b7ec4:	4798      	blx	r3
        if (!rv) {
   b7ec6:	4604      	mov	r4, r0
   b7ec8:	b928      	cbnz	r0, b7ed6 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7eca:	682b      	ldr	r3, [r5, #0]
   b7ecc:	4628      	mov	r0, r5
   b7ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7ed0:	4798      	blx	r3
        rv = available();
   b7ed2:	4620      	mov	r0, r4
}
   b7ed4:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b7ed6:	2001      	movs	r0, #1
   b7ed8:	e7fc      	b.n	b7ed4 <_ZN9TCPClient9connectedEv+0x2c>

000b7eda <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b7eda:	b510      	push	{r4, lr}
   b7edc:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7ede:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7ee2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7ee6:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7ee8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7eea:	d005      	beq.n	b7ef8 <_ZN9TCPClient4peekEv+0x1e>
   b7eec:	6963      	ldr	r3, [r4, #20]
   b7eee:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7ef2:	4413      	add	r3, r2
   b7ef4:	7918      	ldrb	r0, [r3, #4]
}
   b7ef6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7ef8:	6803      	ldr	r3, [r0, #0]
   b7efa:	691b      	ldr	r3, [r3, #16]
   b7efc:	4798      	blx	r3
   b7efe:	2800      	cmp	r0, #0
   b7f00:	d1f4      	bne.n	b7eec <_ZN9TCPClient4peekEv+0x12>
   b7f02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7f06:	e7f6      	b.n	b7ef6 <_ZN9TCPClient4peekEv+0x1c>

000b7f08 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f0a:	6943      	ldr	r3, [r0, #20]
   b7f0c:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7f0e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7f12:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7f16:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7f18:	4605      	mov	r5, r0
   b7f1a:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7f1c:	d016      	beq.n	b7f4c <_ZN9TCPClient4readEPhj+0x44>
   b7f1e:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7f20:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7f24:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7f28:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7f2a:	42bc      	cmp	r4, r7
   b7f2c:	bf28      	it	cs
   b7f2e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7f30:	3304      	adds	r3, #4
   b7f32:	4622      	mov	r2, r4
   b7f34:	4419      	add	r1, r3
   b7f36:	4630      	mov	r0, r6
   b7f38:	f000 fdac 	bl	b8a94 <memcpy>
   b7f3c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7f3e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7f42:	4423      	add	r3, r4
   b7f44:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7f48:	4620      	mov	r0, r4
   b7f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7f4c:	6803      	ldr	r3, [r0, #0]
   b7f4e:	691b      	ldr	r3, [r3, #16]
   b7f50:	4798      	blx	r3
   b7f52:	2800      	cmp	r0, #0
   b7f54:	d1e3      	bne.n	b7f1e <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b7f56:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b7f5a:	e7f5      	b.n	b7f48 <_ZN9TCPClient4readEPhj+0x40>

000b7f5c <_ZN9TCPClient12flush_bufferEv>:
   b7f5c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7f5e:	2300      	movs	r3, #0
   b7f60:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7f64:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b7f66:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b7f6a:	4770      	bx	lr

000b7f6c <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7f70:	461f      	mov	r7, r3
    stop();
   b7f72:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7f74:	460c      	mov	r4, r1
    stop();
   b7f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7f78:	b08a      	sub	sp, #40	; 0x28
   b7f7a:	4605      	mov	r5, r0
   b7f7c:	4616      	mov	r6, r2
    stop();
   b7f7e:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7f80:	7d23      	ldrb	r3, [r4, #20]
   b7f82:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b7f86:	2b04      	cmp	r3, #4
   b7f88:	bf0c      	ite	eq
   b7f8a:	2002      	moveq	r0, #2
   b7f8c:	200a      	movne	r0, #10
   b7f8e:	2206      	movs	r2, #6
   b7f90:	2101      	movs	r1, #1
   b7f92:	f7fe ff51 	bl	b6e38 <sock_socket>
   b7f96:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7f9a:	696b      	ldr	r3, [r5, #20]
   b7f9c:	681b      	ldr	r3, [r3, #0]
   b7f9e:	2b00      	cmp	r3, #0
   b7fa0:	da08      	bge.n	b7fb4 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7fa2:	682b      	ldr	r3, [r5, #0]
   b7fa4:	4628      	mov	r0, r5
   b7fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7fa8:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7faa:	4798      	blx	r3
}
   b7fac:	4620      	mov	r0, r4
   b7fae:	b00a      	add	sp, #40	; 0x28
   b7fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7fb4:	4628      	mov	r0, r5
   b7fb6:	f7ff ffd1 	bl	b7f5c <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7fba:	b1b7      	cbz	r7, b7fea <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7fbc:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7fbe:	a903      	add	r1, sp, #12
   b7fc0:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7fc2:	9303      	str	r3, [sp, #12]
   b7fc4:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7fc8:	f7fe fed6 	bl	b6d78 <if_index_to_name>
   b7fcc:	2800      	cmp	r0, #0
   b7fce:	d1e8      	bne.n	b7fa2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7fd0:	6968      	ldr	r0, [r5, #20]
   b7fd2:	2306      	movs	r3, #6
   b7fd4:	9300      	str	r3, [sp, #0]
   b7fd6:	6800      	ldr	r0, [r0, #0]
   b7fd8:	ab03      	add	r3, sp, #12
   b7fda:	f241 020b 	movw	r2, #4107	; 0x100b
   b7fde:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7fe2:	f7fe ff01 	bl	b6de8 <sock_setsockopt>
   b7fe6:	2800      	cmp	r0, #0
   b7fe8:	d1db      	bne.n	b7fa2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7fea:	221c      	movs	r2, #28
   b7fec:	2100      	movs	r1, #0
   b7fee:	a803      	add	r0, sp, #12
   b7ff0:	f000 fd5e 	bl	b8ab0 <memset>
    if (ip.version() == 4) {
   b7ff4:	7d23      	ldrb	r3, [r4, #20]
   b7ff6:	2b04      	cmp	r3, #4
   b7ff8:	d11d      	bne.n	b8036 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7ffa:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7ffe:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b8000:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b8004:	f7fe fed8 	bl	b6db8 <inet_htons>
   b8008:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b800c:	6860      	ldr	r0, [r4, #4]
   b800e:	f7fe fec3 	bl	b6d98 <inet_htonl>
   b8012:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b8014:	696b      	ldr	r3, [r5, #20]
   b8016:	221c      	movs	r2, #28
   b8018:	6818      	ldr	r0, [r3, #0]
   b801a:	a903      	add	r1, sp, #12
   b801c:	f7fe fef4 	bl	b6e08 <sock_connect>
   b8020:	2800      	cmp	r0, #0
   b8022:	d1be      	bne.n	b7fa2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b8024:	3404      	adds	r4, #4
   b8026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8028:	696d      	ldr	r5, [r5, #20]
   b802a:	358c      	adds	r5, #140	; 0x8c
   b802c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b802e:	6823      	ldr	r3, [r4, #0]
   b8030:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b8032:	2401      	movs	r4, #1
   b8034:	e7ba      	b.n	b7fac <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b8036:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b803a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b803c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b8040:	f7fe feba 	bl	b6db8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b8044:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b8046:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b804a:	1d23      	adds	r3, r4, #4
   b804c:	f104 0714 	add.w	r7, r4, #20
   b8050:	6818      	ldr	r0, [r3, #0]
   b8052:	6859      	ldr	r1, [r3, #4]
   b8054:	4632      	mov	r2, r6
   b8056:	c203      	stmia	r2!, {r0, r1}
   b8058:	3308      	adds	r3, #8
   b805a:	42bb      	cmp	r3, r7
   b805c:	4616      	mov	r6, r2
   b805e:	d1f7      	bne.n	b8050 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b8060:	e7d8      	b.n	b8014 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b8064 <_ZN9TCPClient9availableEv>:
{
   b8064:	b530      	push	{r4, r5, lr}
   b8066:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b8068:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b806c:	b08b      	sub	sp, #44	; 0x2c
   b806e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b8070:	b12b      	cbz	r3, b807e <_ZN9TCPClient9availableEv+0x1a>
   b8072:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b8076:	429a      	cmp	r2, r3
   b8078:	d101      	bne.n	b807e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b807a:	f7ff ff6f 	bl	b7f5c <_ZN9TCPClient12flush_bufferEv>
   b807e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b8080:	6808      	ldr	r0, [r1, #0]
   b8082:	2800      	cmp	r0, #0
   b8084:	db18      	blt.n	b80b8 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b8086:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b808a:	2d7f      	cmp	r5, #127	; 0x7f
   b808c:	d814      	bhi.n	b80b8 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b808e:	3104      	adds	r1, #4
   b8090:	2308      	movs	r3, #8
   b8092:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b8096:	4429      	add	r1, r5
   b8098:	f7fe febe 	bl	b6e18 <sock_recv>
            if (ret > 0) {
   b809c:	2800      	cmp	r0, #0
   b809e:	dd13      	ble.n	b80c8 <_ZN9TCPClient9availableEv+0x64>
   b80a0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b80a2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b80a6:	b90a      	cbnz	r2, b80ac <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b80a8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b80ac:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b80ae:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b80b2:	4410      	add	r0, r2
   b80b4:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b80b8:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b80ba:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b80be:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b80c2:	1ac0      	subs	r0, r0, r3
   b80c4:	b00b      	add	sp, #44	; 0x2c
   b80c6:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b80c8:	f7ff f852 	bl	b7170 <__errno>
   b80cc:	6803      	ldr	r3, [r0, #0]
   b80ce:	2b0b      	cmp	r3, #11
   b80d0:	d0f2      	beq.n	b80b8 <_ZN9TCPClient9availableEv+0x54>
   b80d2:	f7ff f84d 	bl	b7170 <__errno>
   b80d6:	6803      	ldr	r3, [r0, #0]
   b80d8:	2b0b      	cmp	r3, #11
   b80da:	d0ed      	beq.n	b80b8 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b80dc:	2320      	movs	r3, #32
   b80de:	2500      	movs	r5, #0
   b80e0:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b80e4:	f7ff f844 	bl	b7170 <__errno>
   b80e8:	6803      	ldr	r3, [r0, #0]
   b80ea:	9301      	str	r3, [sp, #4]
   b80ec:	4b08      	ldr	r3, [pc, #32]	; (b8110 <_ZN9TCPClient9availableEv+0xac>)
   b80ee:	4909      	ldr	r1, [pc, #36]	; (b8114 <_ZN9TCPClient9availableEv+0xb0>)
   b80f0:	9300      	str	r3, [sp, #0]
   b80f2:	aa02      	add	r2, sp, #8
   b80f4:	462b      	mov	r3, r5
   b80f6:	2032      	movs	r0, #50	; 0x32
   b80f8:	f7fe ff66 	bl	b6fc8 <log_message>
                    sock_close(d_->sock);
   b80fc:	6963      	ldr	r3, [r4, #20]
   b80fe:	6818      	ldr	r0, [r3, #0]
   b8100:	f7fe fe7a 	bl	b6df8 <sock_close>
   b8104:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b8106:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b810a:	601a      	str	r2, [r3, #0]
   b810c:	e7d4      	b.n	b80b8 <_ZN9TCPClient9availableEv+0x54>
   b810e:	bf00      	nop
   b8110:	000b941d 	.word	0x000b941d
   b8114:	000b9416 	.word	0x000b9416

000b8118 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b8118:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b811a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b811c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b811e:	6818      	ldr	r0, [r3, #0]
   b8120:	2800      	cmp	r0, #0
   b8122:	db01      	blt.n	b8128 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b8124:	f7fe fe68 	bl	b6df8 <sock_close>
   b8128:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b812a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b812e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b8130:	6960      	ldr	r0, [r4, #20]
   b8132:	2211      	movs	r2, #17
   b8134:	2100      	movs	r1, #0
   b8136:	308c      	adds	r0, #140	; 0x8c
   b8138:	f000 fcba 	bl	b8ab0 <memset>
    flush_buffer();
   b813c:	4620      	mov	r0, r4
}
   b813e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b8142:	f7ff bf0b 	b.w	b7f5c <_ZN9TCPClient12flush_bufferEv>

000b8146 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b8146:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b8148:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b814a:	4604      	mov	r4, r0
          total(0) {
   b814c:	6001      	str	r1, [r0, #0]
   b814e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b8152:	3088      	adds	r0, #136	; 0x88
   b8154:	f7ff f8fe 	bl	b7354 <_ZN9IPAddressC1Ev>
}
   b8158:	4620      	mov	r0, r4
   b815a:	bd10      	pop	{r4, pc}

000b815c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b815c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b815e:	2300      	movs	r3, #0
   b8160:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8164:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b8168:	4a0e      	ldr	r2, [pc, #56]	; (b81a4 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b816a:	6103      	str	r3, [r0, #16]
   b816c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b816e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b8170:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8172:	20ac      	movs	r0, #172	; 0xac
   b8174:	9101      	str	r1, [sp, #4]
   b8176:	f7fc fc54 	bl	b4a22 <_Znwj>
	  auto __pi = ::new (__mem)
   b817a:	1e05      	subs	r5, r0, #0
   b817c:	f105 060c 	add.w	r6, r5, #12
   b8180:	d008      	beq.n	b8194 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b8182:	2301      	movs	r3, #1
   b8184:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b8188:	4b07      	ldr	r3, [pc, #28]	; (b81a8 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b818a:	9901      	ldr	r1, [sp, #4]
   b818c:	602b      	str	r3, [r5, #0]
   b818e:	4630      	mov	r0, r6
   b8190:	f7ff ffd9 	bl	b8146 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b8194:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b8196:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b819a:	f7ff fedf 	bl	b7f5c <_ZN9TCPClient12flush_bufferEv>
}
   b819e:	b002      	add	sp, #8
   b81a0:	bd70      	pop	{r4, r5, r6, pc}
   b81a2:	bf00      	nop
   b81a4:	000b9454 	.word	0x000b9454
   b81a8:	000b9438 	.word	0x000b9438

000b81ac <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b81ac:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b81ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b81b2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b81b4:	f7ff ffd2 	bl	b815c <_ZN9TCPClientC1Ei>
}
   b81b8:	4620      	mov	r0, r4
   b81ba:	bd10      	pop	{r4, pc}

000b81bc <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b81bc:	b510      	push	{r4, lr}
   b81be:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b81c0:	6800      	ldr	r0, [r0, #0]
   b81c2:	2800      	cmp	r0, #0
   b81c4:	db01      	blt.n	b81ca <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b81c6:	f7fe fe17 	bl	b6df8 <sock_close>
    }
}
   b81ca:	4620      	mov	r0, r4
   b81cc:	bd10      	pop	{r4, pc}

000b81ce <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b81ce:	300c      	adds	r0, #12
   b81d0:	f7ff bff4 	b.w	b81bc <_ZN9TCPClient4DataD1Ev>

000b81d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b81d4:	4b02      	ldr	r3, [pc, #8]	; (b81e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b81d6:	681a      	ldr	r2, [r3, #0]
   b81d8:	4b02      	ldr	r3, [pc, #8]	; (b81e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b81da:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b81dc:	4770      	bx	lr
   b81de:	bf00      	nop
   b81e0:	2003e410 	.word	0x2003e410
   b81e4:	2003e704 	.word	0x2003e704

000b81e8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b81e8:	4770      	bx	lr

000b81ea <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b81ea:	7441      	strb	r1, [r0, #17]
}
   b81ec:	4770      	bx	lr

000b81ee <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b81ee:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b81f0:	7c00      	ldrb	r0, [r0, #16]
   b81f2:	f7fe fe99 	bl	b6f28 <hal_usart_available_data_for_write>
}
   b81f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b81fa:	bd08      	pop	{r3, pc}

000b81fc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b81fc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b81fe:	7c00      	ldrb	r0, [r0, #16]
   b8200:	f7fe fe6a 	bl	b6ed8 <hal_usart_available>
}
   b8204:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8208:	bd08      	pop	{r3, pc}

000b820a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b820a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b820c:	7c00      	ldrb	r0, [r0, #16]
   b820e:	f7fe fe73 	bl	b6ef8 <hal_usart_peek>
}
   b8212:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8216:	bd08      	pop	{r3, pc}

000b8218 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8218:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b821a:	7c00      	ldrb	r0, [r0, #16]
   b821c:	f7fe fe64 	bl	b6ee8 <hal_usart_read>
}
   b8220:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8224:	bd08      	pop	{r3, pc}

000b8226 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b8226:	7c00      	ldrb	r0, [r0, #16]
   b8228:	f7fe be6e 	b.w	b6f08 <hal_usart_flush>

000b822c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b822c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b822e:	7c45      	ldrb	r5, [r0, #17]
{
   b8230:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8232:	b12d      	cbz	r5, b8240 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8234:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b8236:	b003      	add	sp, #12
   b8238:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b823c:	f7fe be44 	b.w	b6ec8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8240:	7c00      	ldrb	r0, [r0, #16]
   b8242:	9101      	str	r1, [sp, #4]
   b8244:	f7fe fe70 	bl	b6f28 <hal_usart_available_data_for_write>
   b8248:	2800      	cmp	r0, #0
   b824a:	9901      	ldr	r1, [sp, #4]
   b824c:	dcf2      	bgt.n	b8234 <_ZN11USARTSerial5writeEh+0x8>
}
   b824e:	4628      	mov	r0, r5
   b8250:	b003      	add	sp, #12
   b8252:	bd30      	pop	{r4, r5, pc}

000b8254 <_ZN11USARTSerialD0Ev>:
   b8254:	b510      	push	{r4, lr}
   b8256:	2114      	movs	r1, #20
   b8258:	4604      	mov	r4, r0
   b825a:	f7fc fbe8 	bl	b4a2e <_ZdlPvj>
   b825e:	4620      	mov	r0, r4
   b8260:	bd10      	pop	{r4, pc}
	...

000b8264 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8264:	b510      	push	{r4, lr}
   b8266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b826a:	4604      	mov	r4, r0
   b826c:	4608      	mov	r0, r1
   b826e:	4611      	mov	r1, r2
   b8270:	2200      	movs	r2, #0
   b8272:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b8276:	4b04      	ldr	r3, [pc, #16]	; (b8288 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8278:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b827a:	2301      	movs	r3, #1
  _serial = serial;
   b827c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b827e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8280:	f7fe fe5a 	bl	b6f38 <hal_usart_init_ex>
}
   b8284:	4620      	mov	r0, r4
   b8286:	bd10      	pop	{r4, pc}
   b8288:	000b94bc 	.word	0x000b94bc

000b828c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b828c:	7441      	strb	r1, [r0, #17]
}
   b828e:	4770      	bx	lr

000b8290 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8290:	4770      	bx	lr

000b8292 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8292:	4770      	bx	lr

000b8294 <_ZN9USBSerial4readEv>:
{
   b8294:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b8296:	2100      	movs	r1, #0
   b8298:	7c00      	ldrb	r0, [r0, #16]
   b829a:	f7fe fe75 	bl	b6f88 <HAL_USB_USART_Receive_Data>
}
   b829e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b82a2:	bd08      	pop	{r3, pc}

000b82a4 <_ZN9USBSerial4peekEv>:
{
   b82a4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b82a6:	2101      	movs	r1, #1
   b82a8:	7c00      	ldrb	r0, [r0, #16]
   b82aa:	f7fe fe6d 	bl	b6f88 <HAL_USB_USART_Receive_Data>
}
   b82ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b82b2:	bd08      	pop	{r3, pc}

000b82b4 <_ZN9USBSerial17availableForWriteEv>:
{
   b82b4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b82b6:	7c00      	ldrb	r0, [r0, #16]
   b82b8:	f7fe fe5e 	bl	b6f78 <HAL_USB_USART_Available_Data_For_Write>
}
   b82bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b82c0:	bd08      	pop	{r3, pc}

000b82c2 <_ZN9USBSerial9availableEv>:
{
   b82c2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b82c4:	7c00      	ldrb	r0, [r0, #16]
   b82c6:	f7fe fe4f 	bl	b6f68 <HAL_USB_USART_Available_Data>
}
   b82ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b82ce:	bd08      	pop	{r3, pc}

000b82d0 <_ZN9USBSerial5writeEh>:
{
   b82d0:	b513      	push	{r0, r1, r4, lr}
   b82d2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b82d4:	7c00      	ldrb	r0, [r0, #16]
{
   b82d6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b82d8:	f7fe fe4e 	bl	b6f78 <HAL_USB_USART_Available_Data_For_Write>
   b82dc:	2800      	cmp	r0, #0
   b82de:	9901      	ldr	r1, [sp, #4]
   b82e0:	dc01      	bgt.n	b82e6 <_ZN9USBSerial5writeEh+0x16>
   b82e2:	7c60      	ldrb	r0, [r4, #17]
   b82e4:	b120      	cbz	r0, b82f0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b82e6:	7c20      	ldrb	r0, [r4, #16]
   b82e8:	f7fe fe56 	bl	b6f98 <HAL_USB_USART_Send_Data>
   b82ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b82f0:	b002      	add	sp, #8
   b82f2:	bd10      	pop	{r4, pc}

000b82f4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b82f4:	7c00      	ldrb	r0, [r0, #16]
   b82f6:	f7fe be57 	b.w	b6fa8 <HAL_USB_USART_Flush_Data>

000b82fa <_ZN9USBSerialD0Ev>:
   b82fa:	b510      	push	{r4, lr}
   b82fc:	2114      	movs	r1, #20
   b82fe:	4604      	mov	r4, r0
   b8300:	f7fc fb95 	bl	b4a2e <_ZdlPvj>
   b8304:	4620      	mov	r0, r4
   b8306:	bd10      	pop	{r4, pc}

000b8308 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8308:	b510      	push	{r4, lr}
   b830a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b830e:	4604      	mov	r4, r0
   b8310:	4608      	mov	r0, r1
   b8312:	2100      	movs	r1, #0
   b8314:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8318:	4b04      	ldr	r3, [pc, #16]	; (b832c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b831a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b831c:	2301      	movs	r3, #1
  _serial = serial;
   b831e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8320:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8322:	4611      	mov	r1, r2
   b8324:	f7fe fe10 	bl	b6f48 <HAL_USB_USART_Init>
}
   b8328:	4620      	mov	r0, r4
   b832a:	bd10      	pop	{r4, pc}
   b832c:	000b94ec 	.word	0x000b94ec

000b8330 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b8330:	7c00      	ldrb	r0, [r0, #16]
   b8332:	2200      	movs	r2, #0
   b8334:	f7fe be10 	b.w	b6f58 <HAL_USB_USART_Begin>

000b8338 <_Z19acquireSerialBufferv>:
{
   b8338:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b833a:	2214      	movs	r2, #20
{
   b833c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b833e:	2100      	movs	r1, #0
   b8340:	f000 fbb6 	bl	b8ab0 <memset>
}
   b8344:	4620      	mov	r0, r4
   b8346:	bd10      	pop	{r4, pc}

000b8348 <_Z16_fetch_usbserialv>:
{
   b8348:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b834a:	4c0f      	ldr	r4, [pc, #60]	; (b8388 <_Z16_fetch_usbserialv+0x40>)
{
   b834c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b834e:	a803      	add	r0, sp, #12
   b8350:	f7ff fff2 	bl	b8338 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8354:	7821      	ldrb	r1, [r4, #0]
   b8356:	f3bf 8f5b 	dmb	ish
   b835a:	f011 0101 	ands.w	r1, r1, #1
   b835e:	d10f      	bne.n	b8380 <_Z16_fetch_usbserialv+0x38>
   b8360:	4620      	mov	r0, r4
   b8362:	9101      	str	r1, [sp, #4]
   b8364:	f7fc fb72 	bl	b4a4c <__cxa_guard_acquire>
   b8368:	9901      	ldr	r1, [sp, #4]
   b836a:	b148      	cbz	r0, b8380 <_Z16_fetch_usbserialv+0x38>
   b836c:	aa03      	add	r2, sp, #12
   b836e:	4807      	ldr	r0, [pc, #28]	; (b838c <_Z16_fetch_usbserialv+0x44>)
   b8370:	f7ff ffca 	bl	b8308 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8374:	4620      	mov	r0, r4
   b8376:	f7fc fb6e 	bl	b4a56 <__cxa_guard_release>
   b837a:	4805      	ldr	r0, [pc, #20]	; (b8390 <_Z16_fetch_usbserialv+0x48>)
   b837c:	f000 fb7c 	bl	b8a78 <atexit>
	return _usbserial;
}
   b8380:	4802      	ldr	r0, [pc, #8]	; (b838c <_Z16_fetch_usbserialv+0x44>)
   b8382:	b008      	add	sp, #32
   b8384:	bd10      	pop	{r4, pc}
   b8386:	bf00      	nop
   b8388:	2003e708 	.word	0x2003e708
   b838c:	2003e70c 	.word	0x2003e70c
   b8390:	000b8291 	.word	0x000b8291

000b8394 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b8394:	2200      	movs	r2, #0
   b8396:	6840      	ldr	r0, [r0, #4]
   b8398:	4611      	mov	r1, r2
   b839a:	f7fe be79 	b.w	b7090 <network_ready>

000b839e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b839e:	2200      	movs	r2, #0
   b83a0:	6840      	ldr	r0, [r0, #4]
   b83a2:	4611      	mov	r1, r2
   b83a4:	f7fe be94 	b.w	b70d0 <network_listening>

000b83a8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b83a8:	2200      	movs	r2, #0
   b83aa:	6840      	ldr	r0, [r0, #4]
   b83ac:	4611      	mov	r1, r2
   b83ae:	f7fe be9f 	b.w	b70f0 <network_get_listen_timeout>

000b83b2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b83b2:	6840      	ldr	r0, [r0, #4]
   b83b4:	2200      	movs	r2, #0
   b83b6:	f7fe be93 	b.w	b70e0 <network_set_listen_timeout>

000b83ba <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b83ba:	6840      	ldr	r0, [r0, #4]
   b83bc:	2200      	movs	r2, #0
   b83be:	f081 0101 	eor.w	r1, r1, #1
   b83c2:	f7fe be7d 	b.w	b70c0 <network_listen>

000b83c6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b83c6:	2300      	movs	r3, #0
   b83c8:	6840      	ldr	r0, [r0, #4]
   b83ca:	461a      	mov	r2, r3
   b83cc:	4619      	mov	r1, r3
   b83ce:	f7fe be6f 	b.w	b70b0 <network_off>

000b83d2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b83d2:	2300      	movs	r3, #0
   b83d4:	6840      	ldr	r0, [r0, #4]
   b83d6:	461a      	mov	r2, r3
   b83d8:	4619      	mov	r1, r3
   b83da:	f7fe be61 	b.w	b70a0 <network_on>

000b83de <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b83de:	2200      	movs	r2, #0
   b83e0:	6840      	ldr	r0, [r0, #4]
   b83e2:	4611      	mov	r1, r2
   b83e4:	f7fe be44 	b.w	b7070 <network_connecting>

000b83e8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b83e8:	6840      	ldr	r0, [r0, #4]
   b83ea:	2200      	movs	r2, #0
   b83ec:	2102      	movs	r1, #2
   b83ee:	f7fe be47 	b.w	b7080 <network_disconnect>

000b83f2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b83f2:	2300      	movs	r3, #0
   b83f4:	6840      	ldr	r0, [r0, #4]
   b83f6:	461a      	mov	r2, r3
   b83f8:	f7fe be32 	b.w	b7060 <network_connect>

000b83fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b83fc:	4b02      	ldr	r3, [pc, #8]	; (b8408 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b83fe:	2204      	movs	r2, #4
   b8400:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b8402:	4a02      	ldr	r2, [pc, #8]	; (b840c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b8404:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b8406:	4770      	bx	lr
   b8408:	2003e720 	.word	0x2003e720
   b840c:	000b951c 	.word	0x000b951c

000b8410 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b8410:	b510      	push	{r4, lr}
   b8412:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b8414:	f7fc fac2 	bl	b499c <strlen>
   b8418:	3801      	subs	r0, #1
   b841a:	1823      	adds	r3, r4, r0
   b841c:	4620      	mov	r0, r4
	while(i<j){
   b841e:	4283      	cmp	r3, r0
   b8420:	d906      	bls.n	b8430 <_Z11str_reversePc+0x20>
		c = *i;
   b8422:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b8424:	7819      	ldrb	r1, [r3, #0]
   b8426:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b842a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b842e:	e7f6      	b.n	b841e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b8430:	bd10      	pop	{r4, pc}

000b8432 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b8432:	b570      	push	{r4, r5, r6, lr}
   b8434:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b8436:	1e91      	subs	r1, r2, #2
   b8438:	2922      	cmp	r1, #34	; 0x22
   b843a:	d81d      	bhi.n	b8478 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b843c:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b843e:	b930      	cbnz	r0, b844e <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b8440:	4423      	add	r3, r4
            *ptr++ = '0';
   b8442:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b8444:	429d      	cmp	r5, r3
   b8446:	d210      	bcs.n	b846a <ultoa+0x38>
            *ptr++ = '0';
   b8448:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b844c:	e7fa      	b.n	b8444 <ultoa+0x12>
            result.quot = a/radix;
   b844e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b8452:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b8456:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b8458:	2809      	cmp	r0, #9
                *ptr += '0';
   b845a:	bf94      	ite	ls
   b845c:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b845e:	3157      	addhi	r1, #87	; 0x57
   b8460:	b2c9      	uxtb	r1, r1
   b8462:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b8466:	4630      	mov	r0, r6
	while(a){
   b8468:	e7e9      	b.n	b843e <ultoa+0xc>

	*ptr = '\0';
   b846a:	2300      	movs	r3, #0
	str_reverse(buffer);
   b846c:	4620      	mov	r0, r4
	*ptr = '\0';
   b846e:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b8470:	f7ff ffce 	bl	b8410 <_Z11str_reversePc>
	return buffer;
   b8474:	4620      	mov	r0, r4
}
   b8476:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b8478:	2000      	movs	r0, #0
   b847a:	e7fc      	b.n	b8476 <ultoa+0x44>

000b847c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b847c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b847e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8480:	460c      	mov	r4, r1
   b8482:	4615      	mov	r5, r2
	if(a<0){
   b8484:	da0e      	bge.n	b84a4 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8486:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b848a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b848e:	bf14      	ite	ne
   b8490:	4258      	negne	r0, r3
   b8492:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b8494:	2301      	movs	r3, #1
		*buffer = '-';
   b8496:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b8498:	462a      	mov	r2, r5
   b849a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b849c:	f7ff ffc9 	bl	b8432 <ultoa>
	}
	return buffer;
}
   b84a0:	4620      	mov	r0, r4
   b84a2:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b84a4:	2301      	movs	r3, #1
   b84a6:	e7f9      	b.n	b849c <itoa+0x20>

000b84a8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b84a8:	4b01      	ldr	r3, [pc, #4]	; (b84b0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b84aa:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b84ac:	4770      	bx	lr
   b84ae:	bf00      	nop
   b84b0:	2003e414 	.word	0x2003e414

000b84b4 <serialEventRun>:
{
   b84b4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b84b6:	4b0b      	ldr	r3, [pc, #44]	; (b84e4 <serialEventRun+0x30>)
   b84b8:	b143      	cbz	r3, b84cc <serialEventRun+0x18>
   b84ba:	f7ff ff45 	bl	b8348 <_Z16_fetch_usbserialv>
   b84be:	6803      	ldr	r3, [r0, #0]
   b84c0:	691b      	ldr	r3, [r3, #16]
   b84c2:	4798      	blx	r3
   b84c4:	2800      	cmp	r0, #0
   b84c6:	dd01      	ble.n	b84cc <serialEventRun+0x18>
        serialEvent();
   b84c8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b84cc:	4b06      	ldr	r3, [pc, #24]	; (b84e8 <serialEventRun+0x34>)
   b84ce:	b143      	cbz	r3, b84e2 <serialEventRun+0x2e>
   b84d0:	f000 f99a 	bl	b8808 <_Z22__fetch_global_Serial1v>
   b84d4:	6803      	ldr	r3, [r0, #0]
   b84d6:	691b      	ldr	r3, [r3, #16]
   b84d8:	4798      	blx	r3
   b84da:	2800      	cmp	r0, #0
   b84dc:	dd01      	ble.n	b84e2 <serialEventRun+0x2e>
        serialEvent1();
   b84de:	f3af 8000 	nop.w
}
   b84e2:	bd08      	pop	{r3, pc}
	...

000b84ec <_post_loop>:
{
   b84ec:	b508      	push	{r3, lr}
	serialEventRun();
   b84ee:	f7ff ffe1 	bl	b84b4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b84f2:	f7fe fbc1 	bl	b6c78 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b84f6:	4b01      	ldr	r3, [pc, #4]	; (b84fc <_post_loop+0x10>)
   b84f8:	6018      	str	r0, [r3, #0]
}
   b84fa:	bd08      	pop	{r3, pc}
   b84fc:	2003e730 	.word	0x2003e730

000b8500 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8500:	4805      	ldr	r0, [pc, #20]	; (b8518 <_Z33system_initialize_user_backup_ramv+0x18>)
   b8502:	4a06      	ldr	r2, [pc, #24]	; (b851c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8504:	4906      	ldr	r1, [pc, #24]	; (b8520 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8506:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8508:	1a12      	subs	r2, r2, r0
   b850a:	f000 fac3 	bl	b8a94 <memcpy>
    __backup_sram_signature = signature;
   b850e:	4b05      	ldr	r3, [pc, #20]	; (b8524 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8510:	4a05      	ldr	r2, [pc, #20]	; (b8528 <_Z33system_initialize_user_backup_ramv+0x28>)
   b8512:	601a      	str	r2, [r3, #0]
}
   b8514:	bd08      	pop	{r3, pc}
   b8516:	bf00      	nop
   b8518:	2003f400 	.word	0x2003f400
   b851c:	2003f404 	.word	0x2003f404
   b8520:	000b9884 	.word	0x000b9884
   b8524:	2003f400 	.word	0x2003f400
   b8528:	9a271c1e 	.word	0x9a271c1e

000b852c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b852c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b852e:	2300      	movs	r3, #0
   b8530:	9300      	str	r3, [sp, #0]
   b8532:	461a      	mov	r2, r3
   b8534:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8538:	f7fe fd70 	bl	b701c <system_ctrl_set_result>
}
   b853c:	b003      	add	sp, #12
   b853e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8544 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8544:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b8546:	8843      	ldrh	r3, [r0, #2]
   b8548:	2b0a      	cmp	r3, #10
   b854a:	d008      	beq.n	b855e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b854c:	2b50      	cmp	r3, #80	; 0x50
   b854e:	d10b      	bne.n	b8568 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8550:	4b09      	ldr	r3, [pc, #36]	; (b8578 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8552:	681b      	ldr	r3, [r3, #0]
   b8554:	b14b      	cbz	r3, b856a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8556:	b003      	add	sp, #12
   b8558:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b855c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b855e:	f7ff ffe5 	bl	b852c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8562:	b003      	add	sp, #12
   b8564:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8568:	2300      	movs	r3, #0
   b856a:	9300      	str	r3, [sp, #0]
   b856c:	461a      	mov	r2, r3
   b856e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8572:	f7fe fd53 	bl	b701c <system_ctrl_set_result>
}
   b8576:	e7f4      	b.n	b8562 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8578:	2003e72c 	.word	0x2003e72c

000b857c <module_user_init_hook>:
{
   b857c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b857e:	4812      	ldr	r0, [pc, #72]	; (b85c8 <module_user_init_hook+0x4c>)
   b8580:	2100      	movs	r1, #0
   b8582:	f7fe fe05 	bl	b7190 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8586:	4b11      	ldr	r3, [pc, #68]	; (b85cc <module_user_init_hook+0x50>)
   b8588:	681a      	ldr	r2, [r3, #0]
   b858a:	4b11      	ldr	r3, [pc, #68]	; (b85d0 <module_user_init_hook+0x54>)
   b858c:	429a      	cmp	r2, r3
   b858e:	4b11      	ldr	r3, [pc, #68]	; (b85d4 <module_user_init_hook+0x58>)
   b8590:	bf0c      	ite	eq
   b8592:	2201      	moveq	r2, #1
   b8594:	2200      	movne	r2, #0
   b8596:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8598:	d001      	beq.n	b859e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b859a:	f7ff ffb1 	bl	b8500 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b859e:	f7fe fb5b 	bl	b6c58 <HAL_RNG_GetRandomNumber>
   b85a2:	4604      	mov	r4, r0
    srand(seed);
   b85a4:	f000 fa8c 	bl	b8ac0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b85a8:	4b0b      	ldr	r3, [pc, #44]	; (b85d8 <module_user_init_hook+0x5c>)
   b85aa:	b113      	cbz	r3, b85b2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b85ac:	4620      	mov	r0, r4
   b85ae:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b85b2:	2100      	movs	r1, #0
   b85b4:	4808      	ldr	r0, [pc, #32]	; (b85d8 <module_user_init_hook+0x5c>)
   b85b6:	f7fe fd4b 	bl	b7050 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b85ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b85be:	4807      	ldr	r0, [pc, #28]	; (b85dc <module_user_init_hook+0x60>)
   b85c0:	2100      	movs	r1, #0
   b85c2:	f7fe bd21 	b.w	b7008 <system_ctrl_set_app_request_handler>
   b85c6:	bf00      	nop
   b85c8:	000b84a9 	.word	0x000b84a9
   b85cc:	2003f400 	.word	0x2003f400
   b85d0:	9a271c1e 	.word	0x9a271c1e
   b85d4:	2003e728 	.word	0x2003e728
   b85d8:	00000000 	.word	0x00000000
   b85dc:	000b8545 	.word	0x000b8545

000b85e0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b85e0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b85e2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b85e4:	d902      	bls.n	b85ec <pinAvailable+0xc>
    return false;
   b85e6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b85e8:	b002      	add	sp, #8
   b85ea:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b85ec:	f1a0 030b 	sub.w	r3, r0, #11
   b85f0:	2b02      	cmp	r3, #2
   b85f2:	d81a      	bhi.n	b862a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b85f4:	4c17      	ldr	r4, [pc, #92]	; (b8654 <pinAvailable+0x74>)
   b85f6:	7821      	ldrb	r1, [r4, #0]
   b85f8:	f3bf 8f5b 	dmb	ish
   b85fc:	f011 0101 	ands.w	r1, r1, #1
   b8600:	d10b      	bne.n	b861a <pinAvailable+0x3a>
   b8602:	4620      	mov	r0, r4
   b8604:	9101      	str	r1, [sp, #4]
   b8606:	f7fc fa21 	bl	b4a4c <__cxa_guard_acquire>
   b860a:	9901      	ldr	r1, [sp, #4]
   b860c:	b128      	cbz	r0, b861a <pinAvailable+0x3a>
   b860e:	4812      	ldr	r0, [pc, #72]	; (b8658 <pinAvailable+0x78>)
   b8610:	f7ff f922 	bl	b7858 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8614:	4620      	mov	r0, r4
   b8616:	f7fc fa1e 	bl	b4a56 <__cxa_guard_release>
   b861a:	4b0f      	ldr	r3, [pc, #60]	; (b8658 <pinAvailable+0x78>)
   b861c:	7818      	ldrb	r0, [r3, #0]
   b861e:	f7fe fc2b 	bl	b6e78 <hal_spi_is_enabled>
   b8622:	2800      	cmp	r0, #0
   b8624:	d1df      	bne.n	b85e6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b8626:	2001      	movs	r0, #1
   b8628:	e7de      	b.n	b85e8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b862a:	2801      	cmp	r0, #1
   b862c:	d809      	bhi.n	b8642 <pinAvailable+0x62>
   b862e:	f000 f8ab 	bl	b8788 <_Z19__fetch_global_Wirev>
   b8632:	2100      	movs	r1, #0
   b8634:	7c00      	ldrb	r0, [r0, #16]
   b8636:	f7fe fb8f 	bl	b6d58 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b863a:	f080 0001 	eor.w	r0, r0, #1
   b863e:	b2c0      	uxtb	r0, r0
   b8640:	e7d2      	b.n	b85e8 <pinAvailable+0x8>
   b8642:	3809      	subs	r0, #9
   b8644:	2801      	cmp	r0, #1
   b8646:	d8ee      	bhi.n	b8626 <pinAvailable+0x46>
   b8648:	f000 f8de 	bl	b8808 <_Z22__fetch_global_Serial1v>
   b864c:	7c00      	ldrb	r0, [r0, #16]
   b864e:	f7fe fc63 	bl	b6f18 <hal_usart_is_enabled>
   b8652:	e7f2      	b.n	b863a <pinAvailable+0x5a>
   b8654:	2003e480 	.word	0x2003e480
   b8658:	2003e484 	.word	0x2003e484

000b865c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b865c:	2823      	cmp	r0, #35	; 0x23
{
   b865e:	b538      	push	{r3, r4, r5, lr}
   b8660:	4604      	mov	r4, r0
   b8662:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8664:	d80a      	bhi.n	b867c <pinMode+0x20>
   b8666:	29ff      	cmp	r1, #255	; 0xff
   b8668:	d008      	beq.n	b867c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b866a:	f7ff ffb9 	bl	b85e0 <pinAvailable>
   b866e:	b128      	cbz	r0, b867c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b8670:	4629      	mov	r1, r5
   b8672:	4620      	mov	r0, r4
}
   b8674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b8678:	f7fe bb0e 	b.w	b6c98 <hal_gpio_mode>
}
   b867c:	bd38      	pop	{r3, r4, r5, pc}

000b867e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b867e:	b538      	push	{r3, r4, r5, lr}
   b8680:	4604      	mov	r4, r0
   b8682:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b8684:	f7fe fb10 	bl	b6ca8 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8688:	28ff      	cmp	r0, #255	; 0xff
   b868a:	d010      	beq.n	b86ae <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b868c:	2806      	cmp	r0, #6
   b868e:	d804      	bhi.n	b869a <digitalWrite+0x1c>
   b8690:	234d      	movs	r3, #77	; 0x4d
   b8692:	fa23 f000 	lsr.w	r0, r3, r0
   b8696:	07c3      	lsls	r3, r0, #31
   b8698:	d409      	bmi.n	b86ae <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b869a:	4620      	mov	r0, r4
   b869c:	f7ff ffa0 	bl	b85e0 <pinAvailable>
   b86a0:	b128      	cbz	r0, b86ae <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b86a2:	4629      	mov	r1, r5
   b86a4:	4620      	mov	r0, r4
}
   b86a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b86aa:	f7fe bb05 	b.w	b6cb8 <hal_gpio_write>
}
   b86ae:	bd38      	pop	{r3, r4, r5, pc}

000b86b0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b86b0:	b510      	push	{r4, lr}
   b86b2:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b86b4:	f7fe faf8 	bl	b6ca8 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b86b8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b86ba:	b2db      	uxtb	r3, r3
   b86bc:	2b01      	cmp	r3, #1
   b86be:	d908      	bls.n	b86d2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b86c0:	4620      	mov	r0, r4
   b86c2:	f7ff ff8d 	bl	b85e0 <pinAvailable>
   b86c6:	b120      	cbz	r0, b86d2 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b86c8:	4620      	mov	r0, r4
}
   b86ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b86ce:	f7fe bafb 	b.w	b6cc8 <hal_gpio_read>
}
   b86d2:	2000      	movs	r0, #0
   b86d4:	bd10      	pop	{r4, pc}

000b86d6 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b86d6:	280d      	cmp	r0, #13
{
   b86d8:	b510      	push	{r4, lr}
   b86da:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b86dc:	bf9c      	itt	ls
   b86de:	340e      	addls	r4, #14
   b86e0:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b86e2:	4620      	mov	r0, r4
   b86e4:	f7ff ff7c 	bl	b85e0 <pinAvailable>
   b86e8:	b150      	cbz	r0, b8700 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b86ea:	2103      	movs	r1, #3
   b86ec:	4620      	mov	r0, r4
   b86ee:	f7fe facb 	bl	b6c88 <hal_pin_validate_function>
   b86f2:	2803      	cmp	r0, #3
   b86f4:	d104      	bne.n	b8700 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b86f6:	4620      	mov	r0, r4
}
   b86f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b86fc:	f7fe baf4 	b.w	b6ce8 <hal_adc_read>
}
   b8700:	2000      	movs	r0, #0
   b8702:	bd10      	pop	{r4, pc}

000b8704 <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(hal_pin_t pin, uint32_t value)
{
   b8704:	b538      	push	{r3, r4, r5, lr}
   b8706:	4604      	mov	r4, r0
   b8708:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b870a:	f7ff ff69 	bl	b85e0 <pinAvailable>
   b870e:	b1f0      	cbz	r0, b874e <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
   b8710:	2104      	movs	r1, #4
   b8712:	4620      	mov	r0, r4
   b8714:	f7fe fab8 	bl	b6c88 <hal_pin_validate_function>
   b8718:	2804      	cmp	r0, #4
   b871a:	d105      	bne.n	b8728 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b871c:	b2a9      	uxth	r1, r5
   b871e:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b8720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b8724:	f7fe bad8 	b.w	b6cd8 <HAL_DAC_Write>
    else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   b8728:	2102      	movs	r1, #2
   b872a:	4620      	mov	r0, r4
   b872c:	f7fe faac 	bl	b6c88 <hal_pin_validate_function>
   b8730:	2802      	cmp	r0, #2
   b8732:	d10c      	bne.n	b874e <_Z11analogWritetm+0x4a>
        PinMode mode = hal_gpio_get_mode(pin);
   b8734:	4620      	mov	r0, r4
   b8736:	f7fe fab7 	bl	b6ca8 <hal_gpio_get_mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b873a:	2801      	cmp	r0, #1
   b873c:	d001      	beq.n	b8742 <_Z11analogWritetm+0x3e>
   b873e:	2804      	cmp	r0, #4
   b8740:	d105      	bne.n	b874e <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b8742:	4629      	mov	r1, r5
   b8744:	4620      	mov	r0, r4
}
   b8746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b874a:	f7fe bad5 	b.w	b6cf8 <hal_pwm_write_ext>
}
   b874e:	bd38      	pop	{r3, r4, r5, pc}

000b8750 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8750:	4770      	bx	lr
	...

000b8754 <_Z17acquireWireBufferv>:
{
   b8754:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8756:	4b0a      	ldr	r3, [pc, #40]	; (b8780 <_Z17acquireWireBufferv+0x2c>)
   b8758:	6003      	str	r3, [r0, #0]
   b875a:	2301      	movs	r3, #1
{
   b875c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b875e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8760:	4908      	ldr	r1, [pc, #32]	; (b8784 <_Z17acquireWireBufferv+0x30>)
   b8762:	2020      	movs	r0, #32
   b8764:	f000 f874 	bl	b8850 <_ZnajRKSt9nothrow_t>
	};
   b8768:	2520      	movs	r5, #32
   b876a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b876c:	4905      	ldr	r1, [pc, #20]	; (b8784 <_Z17acquireWireBufferv+0x30>)
	};
   b876e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8770:	4628      	mov	r0, r5
   b8772:	f000 f86d 	bl	b8850 <_ZnajRKSt9nothrow_t>
	};
   b8776:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b877a:	4620      	mov	r0, r4
   b877c:	bd38      	pop	{r3, r4, r5, pc}
   b877e:	bf00      	nop
   b8780:	00010018 	.word	0x00010018
   b8784:	000b9550 	.word	0x000b9550

000b8788 <_Z19__fetch_global_Wirev>:
{
   b8788:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b878a:	4d0e      	ldr	r5, [pc, #56]	; (b87c4 <_Z19__fetch_global_Wirev+0x3c>)
   b878c:	7829      	ldrb	r1, [r5, #0]
   b878e:	f3bf 8f5b 	dmb	ish
   b8792:	f011 0401 	ands.w	r4, r1, #1
{
   b8796:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8798:	d111      	bne.n	b87be <_Z19__fetch_global_Wirev+0x36>
   b879a:	4628      	mov	r0, r5
   b879c:	f7fc f956 	bl	b4a4c <__cxa_guard_acquire>
   b87a0:	b168      	cbz	r0, b87be <_Z19__fetch_global_Wirev+0x36>
   b87a2:	4668      	mov	r0, sp
   b87a4:	f7ff ffd6 	bl	b8754 <_Z17acquireWireBufferv>
   b87a8:	466a      	mov	r2, sp
   b87aa:	4621      	mov	r1, r4
   b87ac:	4806      	ldr	r0, [pc, #24]	; (b87c8 <_Z19__fetch_global_Wirev+0x40>)
   b87ae:	f7fe fd79 	bl	b72a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b87b2:	4628      	mov	r0, r5
   b87b4:	f7fc f94f 	bl	b4a56 <__cxa_guard_release>
   b87b8:	4804      	ldr	r0, [pc, #16]	; (b87cc <_Z19__fetch_global_Wirev+0x44>)
   b87ba:	f000 f95d 	bl	b8a78 <atexit>
	return wire;
}
   b87be:	4802      	ldr	r0, [pc, #8]	; (b87c8 <_Z19__fetch_global_Wirev+0x40>)
   b87c0:	b007      	add	sp, #28
   b87c2:	bd30      	pop	{r4, r5, pc}
   b87c4:	2003e734 	.word	0x2003e734
   b87c8:	2003e738 	.word	0x2003e738
   b87cc:	000b8751 	.word	0x000b8751

000b87d0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b87d0:	4770      	bx	lr
	...

000b87d4 <_Z20acquireSerial1Bufferv>:
{
   b87d4:	b538      	push	{r3, r4, r5, lr}
   b87d6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b87d8:	2514      	movs	r5, #20
   b87da:	462a      	mov	r2, r5
   b87dc:	2100      	movs	r1, #0
   b87de:	f000 f967 	bl	b8ab0 <memset>
   b87e2:	8025      	strh	r5, [r4, #0]
   b87e4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b87e6:	4907      	ldr	r1, [pc, #28]	; (b8804 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b87e8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b87ea:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b87ec:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b87ee:	f000 f82f 	bl	b8850 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b87f2:	4904      	ldr	r1, [pc, #16]	; (b8804 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b87f4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b87f6:	4628      	mov	r0, r5
   b87f8:	f000 f82a 	bl	b8850 <_ZnajRKSt9nothrow_t>
    };
   b87fc:	60e0      	str	r0, [r4, #12]
}
   b87fe:	4620      	mov	r0, r4
   b8800:	bd38      	pop	{r3, r4, r5, pc}
   b8802:	bf00      	nop
   b8804:	000b9550 	.word	0x000b9550

000b8808 <_Z22__fetch_global_Serial1v>:
{
   b8808:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b880a:	4d0e      	ldr	r5, [pc, #56]	; (b8844 <_Z22__fetch_global_Serial1v+0x3c>)
   b880c:	7829      	ldrb	r1, [r5, #0]
   b880e:	f3bf 8f5b 	dmb	ish
   b8812:	f011 0401 	ands.w	r4, r1, #1
{
   b8816:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8818:	d111      	bne.n	b883e <_Z22__fetch_global_Serial1v+0x36>
   b881a:	4628      	mov	r0, r5
   b881c:	f7fc f916 	bl	b4a4c <__cxa_guard_acquire>
   b8820:	b168      	cbz	r0, b883e <_Z22__fetch_global_Serial1v+0x36>
   b8822:	a801      	add	r0, sp, #4
   b8824:	f7ff ffd6 	bl	b87d4 <_Z20acquireSerial1Bufferv>
   b8828:	aa01      	add	r2, sp, #4
   b882a:	4621      	mov	r1, r4
   b882c:	4806      	ldr	r0, [pc, #24]	; (b8848 <_Z22__fetch_global_Serial1v+0x40>)
   b882e:	f7ff fd19 	bl	b8264 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8832:	4628      	mov	r0, r5
   b8834:	f7fc f90f 	bl	b4a56 <__cxa_guard_release>
   b8838:	4804      	ldr	r0, [pc, #16]	; (b884c <_Z22__fetch_global_Serial1v+0x44>)
   b883a:	f000 f91d 	bl	b8a78 <atexit>
    return serial1;
}
   b883e:	4802      	ldr	r0, [pc, #8]	; (b8848 <_Z22__fetch_global_Serial1v+0x40>)
   b8840:	b007      	add	sp, #28
   b8842:	bd30      	pop	{r4, r5, pc}
   b8844:	2003e74c 	.word	0x2003e74c
   b8848:	2003e750 	.word	0x2003e750
   b884c:	000b87d1 	.word	0x000b87d1

000b8850 <_ZnajRKSt9nothrow_t>:
   b8850:	f7fc b8e9 	b.w	b4a26 <_Znaj>

000b8854 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8854:	4901      	ldr	r1, [pc, #4]	; (b885c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8856:	f000 b8f9 	b.w	b8a4c <_ZNKSt9type_infoeqERKS_>
   b885a:	bf00      	nop
   b885c:	000b956c 	.word	0x000b956c

000b8860 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b8860:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8862:	2400      	movs	r4, #0
   b8864:	2310      	movs	r3, #16
   b8866:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b886a:	6803      	ldr	r3, [r0, #0]
   b886c:	4615      	mov	r5, r2
   b886e:	699e      	ldr	r6, [r3, #24]
   b8870:	6812      	ldr	r2, [r2, #0]
   b8872:	466b      	mov	r3, sp
   b8874:	e9cd 4400 	strd	r4, r4, [sp]
   b8878:	47b0      	blx	r6
   b887a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b887e:	f003 0306 	and.w	r3, r3, #6
   b8882:	2b06      	cmp	r3, #6
   b8884:	bf03      	ittte	eq
   b8886:	9b00      	ldreq	r3, [sp, #0]
   b8888:	602b      	streq	r3, [r5, #0]
   b888a:	2001      	moveq	r0, #1
   b888c:	4620      	movne	r0, r4
   b888e:	b004      	add	sp, #16
   b8890:	bd70      	pop	{r4, r5, r6, pc}

000b8892 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b8892:	9800      	ldr	r0, [sp, #0]
   b8894:	4290      	cmp	r0, r2
   b8896:	bf14      	ite	ne
   b8898:	2001      	movne	r0, #1
   b889a:	2006      	moveq	r0, #6
   b889c:	4770      	bx	lr
	...

000b88a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b88a0:	b510      	push	{r4, lr}
   b88a2:	4b03      	ldr	r3, [pc, #12]	; (b88b0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b88a4:	6003      	str	r3, [r0, #0]
   b88a6:	4604      	mov	r4, r0
   b88a8:	f000 f8cd 	bl	b8a46 <_ZNSt9type_infoD1Ev>
   b88ac:	4620      	mov	r0, r4
   b88ae:	bd10      	pop	{r4, pc}
   b88b0:	000b95ac 	.word	0x000b95ac

000b88b4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b88b4:	b510      	push	{r4, lr}
   b88b6:	4604      	mov	r4, r0
   b88b8:	f7ff fff2 	bl	b88a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b88bc:	4620      	mov	r0, r4
   b88be:	2108      	movs	r1, #8
   b88c0:	f7fc f8b5 	bl	b4a2e <_ZdlPvj>
   b88c4:	4620      	mov	r0, r4
   b88c6:	bd10      	pop	{r4, pc}

000b88c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b88c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b88cc:	461f      	mov	r7, r3
   b88ce:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b88d2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b88d6:	4598      	cmp	r8, r3
   b88d8:	4606      	mov	r6, r0
   b88da:	4615      	mov	r5, r2
   b88dc:	d107      	bne.n	b88ee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b88de:	9907      	ldr	r1, [sp, #28]
   b88e0:	f000 f8b4 	bl	b8a4c <_ZNKSt9type_infoeqERKS_>
   b88e4:	b118      	cbz	r0, b88ee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b88e6:	7165      	strb	r5, [r4, #5]
   b88e8:	2000      	movs	r0, #0
   b88ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b88ee:	4639      	mov	r1, r7
   b88f0:	4630      	mov	r0, r6
   b88f2:	f000 f8ab 	bl	b8a4c <_ZNKSt9type_infoeqERKS_>
   b88f6:	2800      	cmp	r0, #0
   b88f8:	d0f6      	beq.n	b88e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b88fa:	2301      	movs	r3, #1
   b88fc:	f8c4 8000 	str.w	r8, [r4]
   b8900:	7125      	strb	r5, [r4, #4]
   b8902:	71a3      	strb	r3, [r4, #6]
   b8904:	e7f0      	b.n	b88e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8906 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8906:	b538      	push	{r3, r4, r5, lr}
   b8908:	4615      	mov	r5, r2
   b890a:	461c      	mov	r4, r3
   b890c:	f000 f89e 	bl	b8a4c <_ZNKSt9type_infoeqERKS_>
   b8910:	b120      	cbz	r0, b891c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b8912:	2308      	movs	r3, #8
   b8914:	60e3      	str	r3, [r4, #12]
   b8916:	2306      	movs	r3, #6
   b8918:	6025      	str	r5, [r4, #0]
   b891a:	7123      	strb	r3, [r4, #4]
   b891c:	bd38      	pop	{r3, r4, r5, pc}

000b891e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b891e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8920:	4605      	mov	r5, r0
   b8922:	460c      	mov	r4, r1
   b8924:	9201      	str	r2, [sp, #4]
   b8926:	461e      	mov	r6, r3
   b8928:	f000 f890 	bl	b8a4c <_ZNKSt9type_infoeqERKS_>
   b892c:	b950      	cbnz	r0, b8944 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b892e:	2e03      	cmp	r6, #3
   b8930:	d808      	bhi.n	b8944 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8932:	6823      	ldr	r3, [r4, #0]
   b8934:	9a01      	ldr	r2, [sp, #4]
   b8936:	695b      	ldr	r3, [r3, #20]
   b8938:	4629      	mov	r1, r5
   b893a:	4620      	mov	r0, r4
   b893c:	b002      	add	sp, #8
   b893e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8942:	4718      	bx	r3
   b8944:	b002      	add	sp, #8
   b8946:	bd70      	pop	{r4, r5, r6, pc}

000b8948 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8948:	b510      	push	{r4, lr}
   b894a:	4b03      	ldr	r3, [pc, #12]	; (b8958 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b894c:	6003      	str	r3, [r0, #0]
   b894e:	4604      	mov	r4, r0
   b8950:	f7ff ffa6 	bl	b88a0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8954:	4620      	mov	r0, r4
   b8956:	bd10      	pop	{r4, pc}
   b8958:	000b960c 	.word	0x000b960c

000b895c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b895c:	b510      	push	{r4, lr}
   b895e:	4604      	mov	r4, r0
   b8960:	f7ff fff2 	bl	b8948 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8964:	4620      	mov	r0, r4
   b8966:	210c      	movs	r1, #12
   b8968:	f7fc f861 	bl	b4a2e <_ZdlPvj>
   b896c:	4620      	mov	r0, r4
   b896e:	bd10      	pop	{r4, pc}

000b8970 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b8970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b8972:	9f08      	ldr	r7, [sp, #32]
   b8974:	4297      	cmp	r7, r2
   b8976:	4605      	mov	r5, r0
   b8978:	460e      	mov	r6, r1
   b897a:	4614      	mov	r4, r2
   b897c:	d00a      	beq.n	b8994 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b897e:	68a8      	ldr	r0, [r5, #8]
   b8980:	6802      	ldr	r2, [r0, #0]
   b8982:	9708      	str	r7, [sp, #32]
   b8984:	6a15      	ldr	r5, [r2, #32]
   b8986:	4631      	mov	r1, r6
   b8988:	4622      	mov	r2, r4
   b898a:	46ac      	mov	ip, r5
   b898c:	b003      	add	sp, #12
   b898e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8992:	4760      	bx	ip
   b8994:	4619      	mov	r1, r3
   b8996:	9301      	str	r3, [sp, #4]
   b8998:	f000 f858 	bl	b8a4c <_ZNKSt9type_infoeqERKS_>
   b899c:	9b01      	ldr	r3, [sp, #4]
   b899e:	2800      	cmp	r0, #0
   b89a0:	d0ed      	beq.n	b897e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b89a2:	2006      	movs	r0, #6
   b89a4:	b003      	add	sp, #12
   b89a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b89a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b89a8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b89ac:	460d      	mov	r5, r1
   b89ae:	4619      	mov	r1, r3
   b89b0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b89b4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b89b8:	4681      	mov	r9, r0
   b89ba:	4617      	mov	r7, r2
   b89bc:	4698      	mov	r8, r3
   b89be:	f000 f845 	bl	b8a4c <_ZNKSt9type_infoeqERKS_>
   b89c2:	b190      	cbz	r0, b89ea <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b89c4:	2d00      	cmp	r5, #0
   b89c6:	6034      	str	r4, [r6, #0]
   b89c8:	7137      	strb	r7, [r6, #4]
   b89ca:	db09      	blt.n	b89e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b89cc:	1961      	adds	r1, r4, r5
   b89ce:	458a      	cmp	sl, r1
   b89d0:	bf0c      	ite	eq
   b89d2:	2106      	moveq	r1, #6
   b89d4:	2101      	movne	r1, #1
   b89d6:	71b1      	strb	r1, [r6, #6]
   b89d8:	2000      	movs	r0, #0
   b89da:	b001      	add	sp, #4
   b89dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b89e0:	3502      	adds	r5, #2
   b89e2:	d1f9      	bne.n	b89d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b89e4:	2301      	movs	r3, #1
   b89e6:	71b3      	strb	r3, [r6, #6]
   b89e8:	e7f6      	b.n	b89d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b89ea:	4554      	cmp	r4, sl
   b89ec:	d106      	bne.n	b89fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b89ee:	4659      	mov	r1, fp
   b89f0:	4648      	mov	r0, r9
   b89f2:	f000 f82b 	bl	b8a4c <_ZNKSt9type_infoeqERKS_>
   b89f6:	b108      	cbz	r0, b89fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b89f8:	7177      	strb	r7, [r6, #5]
   b89fa:	e7ed      	b.n	b89d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b89fc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b8a00:	6803      	ldr	r3, [r0, #0]
   b8a02:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8a06:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b8a0a:	69dc      	ldr	r4, [r3, #28]
   b8a0c:	463a      	mov	r2, r7
   b8a0e:	4643      	mov	r3, r8
   b8a10:	4629      	mov	r1, r5
   b8a12:	46a4      	mov	ip, r4
   b8a14:	b001      	add	sp, #4
   b8a16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8a1a:	4760      	bx	ip

000b8a1c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8a20:	4607      	mov	r7, r0
   b8a22:	460c      	mov	r4, r1
   b8a24:	4615      	mov	r5, r2
   b8a26:	461e      	mov	r6, r3
   b8a28:	f7ff ff6d 	bl	b8906 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8a2c:	b948      	cbnz	r0, b8a42 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b8a2e:	68b8      	ldr	r0, [r7, #8]
   b8a30:	6803      	ldr	r3, [r0, #0]
   b8a32:	699f      	ldr	r7, [r3, #24]
   b8a34:	462a      	mov	r2, r5
   b8a36:	4633      	mov	r3, r6
   b8a38:	4621      	mov	r1, r4
   b8a3a:	46bc      	mov	ip, r7
   b8a3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8a40:	4760      	bx	ip
   b8a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8a46 <_ZNSt9type_infoD1Ev>:
   b8a46:	4770      	bx	lr

000b8a48 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8a48:	2000      	movs	r0, #0
   b8a4a:	4770      	bx	lr

000b8a4c <_ZNKSt9type_infoeqERKS_>:
   b8a4c:	4281      	cmp	r1, r0
   b8a4e:	b508      	push	{r3, lr}
   b8a50:	d00e      	beq.n	b8a70 <_ZNKSt9type_infoeqERKS_+0x24>
   b8a52:	6840      	ldr	r0, [r0, #4]
   b8a54:	7803      	ldrb	r3, [r0, #0]
   b8a56:	2b2a      	cmp	r3, #42	; 0x2a
   b8a58:	d00c      	beq.n	b8a74 <_ZNKSt9type_infoeqERKS_+0x28>
   b8a5a:	6849      	ldr	r1, [r1, #4]
   b8a5c:	780b      	ldrb	r3, [r1, #0]
   b8a5e:	2b2a      	cmp	r3, #42	; 0x2a
   b8a60:	bf08      	it	eq
   b8a62:	3101      	addeq	r1, #1
   b8a64:	f7fb ff90 	bl	b4988 <strcmp>
   b8a68:	fab0 f080 	clz	r0, r0
   b8a6c:	0940      	lsrs	r0, r0, #5
   b8a6e:	bd08      	pop	{r3, pc}
   b8a70:	2001      	movs	r0, #1
   b8a72:	e7fc      	b.n	b8a6e <_ZNKSt9type_infoeqERKS_+0x22>
   b8a74:	2000      	movs	r0, #0
   b8a76:	e7fa      	b.n	b8a6e <_ZNKSt9type_infoeqERKS_+0x22>

000b8a78 <atexit>:
   b8a78:	2300      	movs	r3, #0
   b8a7a:	4601      	mov	r1, r0
   b8a7c:	461a      	mov	r2, r3
   b8a7e:	4618      	mov	r0, r3
   b8a80:	f000 b8f4 	b.w	b8c6c <__register_exitproc>

000b8a84 <atoi>:
   b8a84:	220a      	movs	r2, #10
   b8a86:	2100      	movs	r1, #0
   b8a88:	f000 b8e6 	b.w	b8c58 <strtol>

000b8a8c <atol>:
   b8a8c:	220a      	movs	r2, #10
   b8a8e:	2100      	movs	r1, #0
   b8a90:	f000 b8e2 	b.w	b8c58 <strtol>

000b8a94 <memcpy>:
   b8a94:	440a      	add	r2, r1
   b8a96:	4291      	cmp	r1, r2
   b8a98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8a9c:	d100      	bne.n	b8aa0 <memcpy+0xc>
   b8a9e:	4770      	bx	lr
   b8aa0:	b510      	push	{r4, lr}
   b8aa2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8aa6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8aaa:	4291      	cmp	r1, r2
   b8aac:	d1f9      	bne.n	b8aa2 <memcpy+0xe>
   b8aae:	bd10      	pop	{r4, pc}

000b8ab0 <memset>:
   b8ab0:	4402      	add	r2, r0
   b8ab2:	4603      	mov	r3, r0
   b8ab4:	4293      	cmp	r3, r2
   b8ab6:	d100      	bne.n	b8aba <memset+0xa>
   b8ab8:	4770      	bx	lr
   b8aba:	f803 1b01 	strb.w	r1, [r3], #1
   b8abe:	e7f9      	b.n	b8ab4 <memset+0x4>

000b8ac0 <srand>:
   b8ac0:	b538      	push	{r3, r4, r5, lr}
   b8ac2:	4b10      	ldr	r3, [pc, #64]	; (b8b04 <srand+0x44>)
   b8ac4:	681d      	ldr	r5, [r3, #0]
   b8ac6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8ac8:	4604      	mov	r4, r0
   b8aca:	b9b3      	cbnz	r3, b8afa <srand+0x3a>
   b8acc:	2018      	movs	r0, #24
   b8ace:	f7fe fb27 	bl	b7120 <malloc>
   b8ad2:	4602      	mov	r2, r0
   b8ad4:	63a8      	str	r0, [r5, #56]	; 0x38
   b8ad6:	b920      	cbnz	r0, b8ae2 <srand+0x22>
   b8ad8:	4b0b      	ldr	r3, [pc, #44]	; (b8b08 <srand+0x48>)
   b8ada:	480c      	ldr	r0, [pc, #48]	; (b8b0c <srand+0x4c>)
   b8adc:	2142      	movs	r1, #66	; 0x42
   b8ade:	f7fe fb4f 	bl	b7180 <__assert_func>
   b8ae2:	490b      	ldr	r1, [pc, #44]	; (b8b10 <srand+0x50>)
   b8ae4:	4b0b      	ldr	r3, [pc, #44]	; (b8b14 <srand+0x54>)
   b8ae6:	e9c0 1300 	strd	r1, r3, [r0]
   b8aea:	4b0b      	ldr	r3, [pc, #44]	; (b8b18 <srand+0x58>)
   b8aec:	6083      	str	r3, [r0, #8]
   b8aee:	230b      	movs	r3, #11
   b8af0:	8183      	strh	r3, [r0, #12]
   b8af2:	2100      	movs	r1, #0
   b8af4:	2001      	movs	r0, #1
   b8af6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8afa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8afc:	2200      	movs	r2, #0
   b8afe:	611c      	str	r4, [r3, #16]
   b8b00:	615a      	str	r2, [r3, #20]
   b8b02:	bd38      	pop	{r3, r4, r5, pc}
   b8b04:	2003e414 	.word	0x2003e414
   b8b08:	000b9645 	.word	0x000b9645
   b8b0c:	000b965c 	.word	0x000b965c
   b8b10:	abcd330e 	.word	0xabcd330e
   b8b14:	e66d1234 	.word	0xe66d1234
   b8b18:	0005deec 	.word	0x0005deec

000b8b1c <strcpy>:
   b8b1c:	4603      	mov	r3, r0
   b8b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8b22:	f803 2b01 	strb.w	r2, [r3], #1
   b8b26:	2a00      	cmp	r2, #0
   b8b28:	d1f9      	bne.n	b8b1e <strcpy+0x2>
   b8b2a:	4770      	bx	lr

000b8b2c <strncpy>:
   b8b2c:	b510      	push	{r4, lr}
   b8b2e:	3901      	subs	r1, #1
   b8b30:	4603      	mov	r3, r0
   b8b32:	b132      	cbz	r2, b8b42 <strncpy+0x16>
   b8b34:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8b38:	f803 4b01 	strb.w	r4, [r3], #1
   b8b3c:	3a01      	subs	r2, #1
   b8b3e:	2c00      	cmp	r4, #0
   b8b40:	d1f7      	bne.n	b8b32 <strncpy+0x6>
   b8b42:	441a      	add	r2, r3
   b8b44:	2100      	movs	r1, #0
   b8b46:	4293      	cmp	r3, r2
   b8b48:	d100      	bne.n	b8b4c <strncpy+0x20>
   b8b4a:	bd10      	pop	{r4, pc}
   b8b4c:	f803 1b01 	strb.w	r1, [r3], #1
   b8b50:	e7f9      	b.n	b8b46 <strncpy+0x1a>
	...

000b8b54 <_strtol_l.constprop.0>:
   b8b54:	2b01      	cmp	r3, #1
   b8b56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8b5a:	d001      	beq.n	b8b60 <_strtol_l.constprop.0+0xc>
   b8b5c:	2b24      	cmp	r3, #36	; 0x24
   b8b5e:	d906      	bls.n	b8b6e <_strtol_l.constprop.0+0x1a>
   b8b60:	f7fe fb06 	bl	b7170 <__errno>
   b8b64:	2316      	movs	r3, #22
   b8b66:	6003      	str	r3, [r0, #0]
   b8b68:	2000      	movs	r0, #0
   b8b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8b6e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b8c54 <_strtol_l.constprop.0+0x100>
   b8b72:	460d      	mov	r5, r1
   b8b74:	462e      	mov	r6, r5
   b8b76:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8b7a:	f814 700c 	ldrb.w	r7, [r4, ip]
   b8b7e:	f017 0708 	ands.w	r7, r7, #8
   b8b82:	d1f7      	bne.n	b8b74 <_strtol_l.constprop.0+0x20>
   b8b84:	2c2d      	cmp	r4, #45	; 0x2d
   b8b86:	d132      	bne.n	b8bee <_strtol_l.constprop.0+0x9a>
   b8b88:	782c      	ldrb	r4, [r5, #0]
   b8b8a:	2701      	movs	r7, #1
   b8b8c:	1cb5      	adds	r5, r6, #2
   b8b8e:	2b00      	cmp	r3, #0
   b8b90:	d05b      	beq.n	b8c4a <_strtol_l.constprop.0+0xf6>
   b8b92:	2b10      	cmp	r3, #16
   b8b94:	d109      	bne.n	b8baa <_strtol_l.constprop.0+0x56>
   b8b96:	2c30      	cmp	r4, #48	; 0x30
   b8b98:	d107      	bne.n	b8baa <_strtol_l.constprop.0+0x56>
   b8b9a:	782c      	ldrb	r4, [r5, #0]
   b8b9c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b8ba0:	2c58      	cmp	r4, #88	; 0x58
   b8ba2:	d14d      	bne.n	b8c40 <_strtol_l.constprop.0+0xec>
   b8ba4:	786c      	ldrb	r4, [r5, #1]
   b8ba6:	2310      	movs	r3, #16
   b8ba8:	3502      	adds	r5, #2
   b8baa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b8bae:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8bb2:	f04f 0c00 	mov.w	ip, #0
   b8bb6:	fbb8 f9f3 	udiv	r9, r8, r3
   b8bba:	4666      	mov	r6, ip
   b8bbc:	fb03 8a19 	mls	sl, r3, r9, r8
   b8bc0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8bc4:	f1be 0f09 	cmp.w	lr, #9
   b8bc8:	d816      	bhi.n	b8bf8 <_strtol_l.constprop.0+0xa4>
   b8bca:	4674      	mov	r4, lr
   b8bcc:	42a3      	cmp	r3, r4
   b8bce:	dd24      	ble.n	b8c1a <_strtol_l.constprop.0+0xc6>
   b8bd0:	f1bc 0f00 	cmp.w	ip, #0
   b8bd4:	db1e      	blt.n	b8c14 <_strtol_l.constprop.0+0xc0>
   b8bd6:	45b1      	cmp	r9, r6
   b8bd8:	d31c      	bcc.n	b8c14 <_strtol_l.constprop.0+0xc0>
   b8bda:	d101      	bne.n	b8be0 <_strtol_l.constprop.0+0x8c>
   b8bdc:	45a2      	cmp	sl, r4
   b8bde:	db19      	blt.n	b8c14 <_strtol_l.constprop.0+0xc0>
   b8be0:	fb06 4603 	mla	r6, r6, r3, r4
   b8be4:	f04f 0c01 	mov.w	ip, #1
   b8be8:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8bec:	e7e8      	b.n	b8bc0 <_strtol_l.constprop.0+0x6c>
   b8bee:	2c2b      	cmp	r4, #43	; 0x2b
   b8bf0:	bf04      	itt	eq
   b8bf2:	782c      	ldrbeq	r4, [r5, #0]
   b8bf4:	1cb5      	addeq	r5, r6, #2
   b8bf6:	e7ca      	b.n	b8b8e <_strtol_l.constprop.0+0x3a>
   b8bf8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8bfc:	f1be 0f19 	cmp.w	lr, #25
   b8c00:	d801      	bhi.n	b8c06 <_strtol_l.constprop.0+0xb2>
   b8c02:	3c37      	subs	r4, #55	; 0x37
   b8c04:	e7e2      	b.n	b8bcc <_strtol_l.constprop.0+0x78>
   b8c06:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8c0a:	f1be 0f19 	cmp.w	lr, #25
   b8c0e:	d804      	bhi.n	b8c1a <_strtol_l.constprop.0+0xc6>
   b8c10:	3c57      	subs	r4, #87	; 0x57
   b8c12:	e7db      	b.n	b8bcc <_strtol_l.constprop.0+0x78>
   b8c14:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8c18:	e7e6      	b.n	b8be8 <_strtol_l.constprop.0+0x94>
   b8c1a:	f1bc 0f00 	cmp.w	ip, #0
   b8c1e:	da05      	bge.n	b8c2c <_strtol_l.constprop.0+0xd8>
   b8c20:	2322      	movs	r3, #34	; 0x22
   b8c22:	6003      	str	r3, [r0, #0]
   b8c24:	4646      	mov	r6, r8
   b8c26:	b942      	cbnz	r2, b8c3a <_strtol_l.constprop.0+0xe6>
   b8c28:	4630      	mov	r0, r6
   b8c2a:	e79e      	b.n	b8b6a <_strtol_l.constprop.0+0x16>
   b8c2c:	b107      	cbz	r7, b8c30 <_strtol_l.constprop.0+0xdc>
   b8c2e:	4276      	negs	r6, r6
   b8c30:	2a00      	cmp	r2, #0
   b8c32:	d0f9      	beq.n	b8c28 <_strtol_l.constprop.0+0xd4>
   b8c34:	f1bc 0f00 	cmp.w	ip, #0
   b8c38:	d000      	beq.n	b8c3c <_strtol_l.constprop.0+0xe8>
   b8c3a:	1e69      	subs	r1, r5, #1
   b8c3c:	6011      	str	r1, [r2, #0]
   b8c3e:	e7f3      	b.n	b8c28 <_strtol_l.constprop.0+0xd4>
   b8c40:	2430      	movs	r4, #48	; 0x30
   b8c42:	2b00      	cmp	r3, #0
   b8c44:	d1b1      	bne.n	b8baa <_strtol_l.constprop.0+0x56>
   b8c46:	2308      	movs	r3, #8
   b8c48:	e7af      	b.n	b8baa <_strtol_l.constprop.0+0x56>
   b8c4a:	2c30      	cmp	r4, #48	; 0x30
   b8c4c:	d0a5      	beq.n	b8b9a <_strtol_l.constprop.0+0x46>
   b8c4e:	230a      	movs	r3, #10
   b8c50:	e7ab      	b.n	b8baa <_strtol_l.constprop.0+0x56>
   b8c52:	bf00      	nop
   b8c54:	000b96b6 	.word	0x000b96b6

000b8c58 <strtol>:
   b8c58:	4613      	mov	r3, r2
   b8c5a:	460a      	mov	r2, r1
   b8c5c:	4601      	mov	r1, r0
   b8c5e:	4802      	ldr	r0, [pc, #8]	; (b8c68 <strtol+0x10>)
   b8c60:	6800      	ldr	r0, [r0, #0]
   b8c62:	f7ff bf77 	b.w	b8b54 <_strtol_l.constprop.0>
   b8c66:	bf00      	nop
   b8c68:	2003e414 	.word	0x2003e414

000b8c6c <__register_exitproc>:
   b8c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8c70:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8d2c <__register_exitproc+0xc0>
   b8c74:	4606      	mov	r6, r0
   b8c76:	f8d8 0000 	ldr.w	r0, [r8]
   b8c7a:	461f      	mov	r7, r3
   b8c7c:	460d      	mov	r5, r1
   b8c7e:	4691      	mov	r9, r2
   b8c80:	f000 f856 	bl	b8d30 <__retarget_lock_acquire_recursive>
   b8c84:	4b25      	ldr	r3, [pc, #148]	; (b8d1c <__register_exitproc+0xb0>)
   b8c86:	681c      	ldr	r4, [r3, #0]
   b8c88:	b934      	cbnz	r4, b8c98 <__register_exitproc+0x2c>
   b8c8a:	4c25      	ldr	r4, [pc, #148]	; (b8d20 <__register_exitproc+0xb4>)
   b8c8c:	601c      	str	r4, [r3, #0]
   b8c8e:	4b25      	ldr	r3, [pc, #148]	; (b8d24 <__register_exitproc+0xb8>)
   b8c90:	b113      	cbz	r3, b8c98 <__register_exitproc+0x2c>
   b8c92:	681b      	ldr	r3, [r3, #0]
   b8c94:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8c98:	6863      	ldr	r3, [r4, #4]
   b8c9a:	2b1f      	cmp	r3, #31
   b8c9c:	dd07      	ble.n	b8cae <__register_exitproc+0x42>
   b8c9e:	f8d8 0000 	ldr.w	r0, [r8]
   b8ca2:	f000 f847 	bl	b8d34 <__retarget_lock_release_recursive>
   b8ca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8cae:	b34e      	cbz	r6, b8d04 <__register_exitproc+0x98>
   b8cb0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8cb4:	b988      	cbnz	r0, b8cda <__register_exitproc+0x6e>
   b8cb6:	4b1c      	ldr	r3, [pc, #112]	; (b8d28 <__register_exitproc+0xbc>)
   b8cb8:	b923      	cbnz	r3, b8cc4 <__register_exitproc+0x58>
   b8cba:	f8d8 0000 	ldr.w	r0, [r8]
   b8cbe:	f000 f838 	bl	b8d32 <__retarget_lock_release>
   b8cc2:	e7f0      	b.n	b8ca6 <__register_exitproc+0x3a>
   b8cc4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8cc8:	f7fe fa2a 	bl	b7120 <malloc>
   b8ccc:	2800      	cmp	r0, #0
   b8cce:	d0f4      	beq.n	b8cba <__register_exitproc+0x4e>
   b8cd0:	2300      	movs	r3, #0
   b8cd2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8cd6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8cda:	6863      	ldr	r3, [r4, #4]
   b8cdc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8ce0:	2201      	movs	r2, #1
   b8ce2:	409a      	lsls	r2, r3
   b8ce4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8ce8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8cec:	4313      	orrs	r3, r2
   b8cee:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8cf2:	2e02      	cmp	r6, #2
   b8cf4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8cf8:	bf02      	ittt	eq
   b8cfa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8cfe:	4313      	orreq	r3, r2
   b8d00:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8d04:	6863      	ldr	r3, [r4, #4]
   b8d06:	f8d8 0000 	ldr.w	r0, [r8]
   b8d0a:	1c5a      	adds	r2, r3, #1
   b8d0c:	3302      	adds	r3, #2
   b8d0e:	6062      	str	r2, [r4, #4]
   b8d10:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8d14:	f000 f80e 	bl	b8d34 <__retarget_lock_release_recursive>
   b8d18:	2000      	movs	r0, #0
   b8d1a:	e7c6      	b.n	b8caa <__register_exitproc+0x3e>
   b8d1c:	2003e7f0 	.word	0x2003e7f0
   b8d20:	2003e764 	.word	0x2003e764
   b8d24:	00000000 	.word	0x00000000
   b8d28:	000b7121 	.word	0x000b7121
   b8d2c:	2003e478 	.word	0x2003e478

000b8d30 <__retarget_lock_acquire_recursive>:
   b8d30:	4770      	bx	lr

000b8d32 <__retarget_lock_release>:
   b8d32:	4770      	bx	lr

000b8d34 <__retarget_lock_release_recursive>:
   b8d34:	4770      	bx	lr

000b8d36 <link_code_end>:
	...

000b8d38 <link_const_data_start>:
   b8d38:	514d0400 	.word	0x514d0400
   b8d3c:	00045454 	.word	0x00045454
   b8d40:	49514d06 	.word	0x49514d06
   b8d44:	03706473 	.word	0x03706473

000b8d48 <dynalib_user>:
   b8d48:	000b49ad 000b49e9 000b4a11 000b4a15     .I...I...J...J..
   b8d58:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   b8d68:	72697620 6c617574 66656400 746c7561      virtual.default
   b8d78:	534d0020 534c0042 533c0042 65534950      .MSB.LSB.<SPISe
   b8d88:	6e697474 64207367 75616665 003e746c     ttings default>.
   b8d98:	4950533c 74746553 73676e69 25732520     <SPISettings %s%
   b8da8:	73252075 444f4d20 3e752545 00692500     u %s MODE%u>.%i.
   b8db8:	00696c25 6f006e69 70007475 64006d77     %li.in.out.pwm.d
   b8dc8:	77610077 73656700 65727574 706d614c     w.aw.gestureLamp
   b8dd8:	65670032 72757473 6d614c65 6d740070     2.gestureLamp.tm
   b8de8:	54006c70 324c504d 38783850 74496563     pl.TMPL2P8x8ceIt
   b8df8:	564c5500 477a7745 4c715242 4e353730     .ULVEwzGBRqL075N
   b8e08:	4552474b 7a56514c 4a70592d 312d5761     KGRELQVz-YpJaW-1
   b8e18:	6c62006e 2e6b6e79 756f6c63 696c0064     n.blynk.cloud.li
   b8e28:	6f746867 696c006e 6f746867 6c006666     ghton.lightoff.l
   b8e38:	742e6261 63776568 6f632e6c 3532006d     ab.thewcl.com.25
   b8e48:	30300035 30303030 30303030 00303030     5.0000000000000.

000b8e58 <_ZTVN8particle11SPISettingsE>:
	...
   b8e60:	000b4b8d 000b4a5d 000b4abd              .K..]J...J..

000b8e6c <_ZTV5Timer>:
	...
   b8e74:	000b4bf5 000b4c49 000b4acb              .K..IL...J..

000b8e80 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   b8e80:	6b6e6c62 00666e69 00726576 2e312e31     blnkinf.ver.1.1.
   b8e90:	2d680030 74616562 00353400 66667562     0.h-beat.45.buff
   b8ea0:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
   b8eb0:	6c636974 72412065 006e6f67 742d7766     ticle Argon.fw-t
   b8ec0:	00657079 4c504d54 78385032 49656338     ype.TMPL2P8x8ceI
   b8ed0:	75620074 00646c69 206c754a 32203231     t.build.Jul 12 2
   b8ee0:	20333230 333a3131 34303a38 64000000     023 11:38:04...d
   b8ef0:	63697665 6f6e2065 6f662074 00646e75     evice not found.

000b8f00 <_ZTV6LIS3DH>:
	...
   b8f10:	000b61a9 000b4a35 000b4a35              .a..5J..5J..

000b8f1c <_ZTV9LIS3DHSPI>:
	...
   b8f24:	000b6095 000b6097 000b61cb 000b60d5     .`...`...a...`..
   b8f34:	000b6117 000b60a5 000b60bf              .a...`...`..

000b8f40 <_ZL22BlynkReadHandlerVector>:
   b8f40:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b8f50:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b8f60:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b8f70:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b8f80:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b8f90:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b8fa0:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b8fb0:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b8fc0:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b8fd0:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b8fe0:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b8ff0:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b9000:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b9010:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b9020:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b9030:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b9040:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b9050:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b9060:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b9070:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b9080:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b9090:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b90a0:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b90b0:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b90c0:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b90d0:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b90e0:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b90f0:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b9100:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b9110:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b9120:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..
   b9130:	000b6b79 000b6b79 000b6b79 000b6b79     yk..yk..yk..yk..

000b9140 <_ZL23BlynkWriteHandlerVector>:
   b9140:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b9150:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b9160:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b9170:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b9180:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b9190:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b91a0:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b91b0:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b91c0:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b91d0:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b91e0:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b91f0:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b9200:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b9210:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b9220:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b9230:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b9240:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b9250:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b9260:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b9270:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b9280:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b9290:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b92a0:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b92b0:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b92c0:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b92d0:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b92e0:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b92f0:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b9300:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b9310:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b9320:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..
   b9330:	000b6b7b 000b6b7b 000b6b7b 000b6b7b     {k..{k..{k..{k..

000b9340 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b9348 <_ZTVN5spark13EthernetClassE>:
	...
   b9350:	000b722f 000b7225 000b721b 000b7211     /r..%r...r...r..
   b9360:	000b7205 000b71f9 000b744d 000b7455     .r...q..Mt..Ut..
   b9370:	000b71ed 000b71e5 000b71db 000b71d1     .q...q...q...q..
   b9380:	000b7485                                .t..

000b9384 <_ZTV7TwoWire>:
	...
   b938c:	000b724d 000b7297 000b726f 000b724f     Mr...r..or..Or..
   b939c:	000b7277 000b727f 000b7287 000b728f     wr...r...r...r..

000b93ac <_ZTV9IPAddress>:
	...
   b93b4:	000b72f1 000b72e1 000b72e3 00707061     .r...r...r..app.

000b93c4 <_ZTVN5spark12NetworkClassE>:
	...
   b93cc:	000b740d 000b7417 000b7421 000b742b     .t...t..!t..+t..
   b93dc:	000b7435 000b7441 000b744d 000b7455     5t..At..Mt..Ut..
   b93ec:	000b745d 000b7469 000b7471 000b747b     ]t..it..qt..{t..
   b93fc:	000b7485 006e616e 00666e69 0066766f     .t..nan.inf.ovf.
   b940c:	                                         ..

000b940e <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b940e:	18100800 38302820 69726977 7200676e     .... (08wiring.r
   b941e:	20766365 6f727265 203d2072 00006425     ecv error = %d..
	...

000b9430 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9438:	000b7c79 000b7c9d 000b81cf 000b7cab     y|...|.......|..
   b9448:	000b7c7d                                }|..

000b944c <_ZTV9TCPClient>:
	...
   b9454:	000b7d29 000b7d5d 000b7bf5 000b7c0f     )}..]}...{...|..
   b9464:	000b8065 000b7c39 000b7edb 000b7c6d     e...9|...~..m|..
   b9474:	000b7f6d 000b7dad 000b7f09 000b8119     m....}..........
   b9484:	000b7ea9 000b7c6f 000b7c21 000b7cb1     .~..o|..!|...|..
   b9494:	000b7d8d 252d5925 64252d6d 3a482554     .}..%Y-%m-%dT%H:
   b94a4:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000b94b4 <_ZTV11USARTSerial>:
	...
   b94bc:	000b81e9 000b8255 000b822d 000b7571     ....U...-...qu..
   b94cc:	000b81fd 000b8219 000b820b 000b8227     ............'...
   b94dc:	000b81eb 000b81ef                       ........

000b94e4 <_ZTV9USBSerial>:
	...
   b94ec:	000b8293 000b82fb 000b82d1 000b7571     ............qu..
   b94fc:	000b82c3 000b8295 000b82a5 000b82f5     ................
   b950c:	000b82b5 000b828d                       ........

000b9514 <_ZTVN5spark9WiFiClassE>:
	...
   b951c:	000b83f3 000b83e9 000b83df 000b8395     ................
   b952c:	000b83d3 000b83c7 000b744d 000b7455     ........Mt..Ut..
   b953c:	000b83bb 000b83b3 000b83a9 000b839f     ................
   b954c:	000b7485                                .t..

000b9550 <_ZSt7nothrow>:
	...

000b9551 <_ZTSSt19_Sp_make_shared_tag>:
   b9551:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   b9561:	5f646572 00676174                        red_tag....

000b956c <_ZTISt19_Sp_make_shared_tag>:
   b956c:	000b95ac 000b9551                       ....Q...

000b9574 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b9574:	000b960c 000b9580 000b9630              ........0...

000b9580 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b9580:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   b9590:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   b95a0:	00000045                                E...

000b95a4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b95a4:	00000000 000b9574 000b88a1 000b88b5     ....t...........
   b95b4:	000b8a49 000b8a49 000b891f 000b8861     I...I.......a...
   b95c4:	000b8907 000b88c9 000b8893              ............

000b95d0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b95d0:	000b960c 000b95dc 000b9574              ........t...

000b95dc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b95dc:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   b95ec:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   b95fc:	456f666e 00000000                       nfoE....

000b9604 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b9604:	00000000 000b95d0 000b8949 000b895d     ........I...]...
   b9614:	000b8a49 000b8a49 000b891f 000b8861     I...I.......a...
   b9624:	000b8a1d 000b89a9 000b8971              ........q...

000b9630 <_ZTISt9type_info>:
   b9630:	000b95ac 000b9638                       ....8...

000b9638 <_ZTSSt9type_info>:
   b9638:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   b9648:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   b9658:	00646564 706d742f 6e656a2f 736e696b     ded./tmp/jenkins
   b9668:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   b9678:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   b9688:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   b9698:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   b96a8:	696c6474 61722f62 632e646e               tdlib/rand.c.

000b96b5 <_ctype_>:
   b96b5:	20202000 20202020 28282020 20282828     .         ((((( 
   b96c5:	20202020 20202020 20202020 20202020                     
   b96d5:	10108820 10101010 10101010 10101010      ...............
   b96e5:	04040410 04040404 10040404 10101010     ................
   b96f5:	41411010 41414141 01010101 01010101     ..AAAAAA........
   b9705:	01010101 01010101 01010101 10101010     ................
   b9715:	42421010 42424242 02020202 02020202     ..BBBBBB........
   b9725:	02020202 02020202 02020202 10101010     ................
   b9735:	00000020 00000000 00000000 00000000      ...............
	...

000b97b6 <link_const_data_end>:
	...

000b97b8 <link_constructors_location>:
   b97b8:	000b5ec5 	.word	0x000b5ec5
   b97bc:	000b71c1 	.word	0x000b71c1
   b97c0:	000b7239 	.word	0x000b7239
   b97c4:	000b73fd 	.word	0x000b73fd
   b97c8:	000b755d 	.word	0x000b755d
   b97cc:	000b7841 	.word	0x000b7841
   b97d0:	000b7bd1 	.word	0x000b7bd1
   b97d4:	000b81d5 	.word	0x000b81d5
   b97d8:	000b83fd 	.word	0x000b83fd
